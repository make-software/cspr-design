import { __assign, __makeTemplateObject } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import FlexRow from './flex-row';
import FlexBox from '../flex-box/flex-box';
import FlexColumn from '../flex-column/flex-column';
import styled from 'styled-components';
export default {
    component: FlexRow,
    title: 'FlexRow',
    args: {
        itemsSpacing: 10,
        justify: 'center',
        align: 'center',
        grow: 10,
        gap: 10,
        shrink: 1,
    },
};
var StyledBlock = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  height: 100px;\n  width: 100px;\n  border: 1px solid #0a0a0a;\n  font-weight: bolder;\n  color: #fff;\n  :nth-child(1n) {\n    background: black;\n  }\n  :nth-child(2n) {\n    background: red;\n  }\n  :nth-child(3n) {\n    background: green;\n  }\n"], ["\n  height: 100px;\n  width: 100px;\n  border: 1px solid #0a0a0a;\n  font-weight: bolder;\n  color: #fff;\n  :nth-child(1n) {\n    background: black;\n  }\n  :nth-child(2n) {\n    background: red;\n  }\n  :nth-child(3n) {\n    background: green;\n  }\n"])));
var Block = function () { return (_jsxs(FlexBox, { children: [_jsx(StyledBlock, { children: "Block 1" }), _jsx(StyledBlock, { children: "Block 2" }), _jsx(StyledBlock, { children: "Block 3" })] })); };
var Template = function (args) { return (_jsxs(_Fragment, { children: [_jsx(FlexRow, __assign({ itemsSpacing: 10 }, { children: _jsx(FlexColumn, __assign({ itemsSpacing: 20 }, { children: _jsx(Block, {}) })) })), _jsx(FlexRow, __assign({}, args, { children: _jsx(FlexColumn, __assign({ itemsSpacing: 20 }, { children: _jsx(Block, {}) })) }))] })); };
export var Primary = Template.bind({});
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC1yb3cuc3Rvcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9mbGV4LXJvdy9mbGV4LXJvdy5zdG9yaWVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE9BQU8sT0FBTyxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLE9BQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUMzQyxPQUFPLFVBQVUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQztBQUV2QyxlQUFlO0lBQ1gsU0FBUyxFQUFFLE9BQU87SUFDbEIsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBSSxFQUFFO1FBQ0YsWUFBWSxFQUFFLEVBQUU7UUFDaEIsT0FBTyxFQUFFLFFBQVE7UUFDakIsS0FBSyxFQUFFLFFBQVE7UUFDZixJQUFJLEVBQUUsRUFBRTtRQUNSLEdBQUcsRUFBRSxFQUFFO1FBQ1AsTUFBTSxFQUFFLENBQUM7S0FDWjtDQUM2QixDQUFDO0FBR25DLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxHQUFHLGlVQUFBLDhQQWU3QixJQUFBLENBQUE7QUFFRCxJQUFNLEtBQUssR0FBRyxjQUFNLE9BQUEsQ0FDaEIsTUFBQyxPQUFPLGVBQ0osS0FBQyxXQUFXLDBCQUFzQixFQUNsQyxLQUFDLFdBQVcsMEJBQXNCLEVBQ2xDLEtBQUMsV0FBVywwQkFBc0IsSUFDNUIsQ0FDYixFQU5tQixDQU1uQixDQUFDO0FBRUYsSUFBTSxRQUFRLEdBQW1DLFVBQUMsSUFBSSxJQUFLLE9BQUEsQ0FDdkQsOEJBQ0ksS0FBQyxPQUFPLGFBQUMsWUFBWSxFQUFFLEVBQUUsZ0JBQ3JCLEtBQUMsVUFBVSxhQUFDLFlBQVksRUFBRSxFQUFFLGdCQUN4QixLQUFDLEtBQUssS0FBRSxJQUNDLElBQ1AsRUFDVixLQUFDLE9BQU8sZUFBSyxJQUFJLGNBQ2IsS0FBQyxVQUFVLGFBQUMsWUFBWSxFQUFFLEVBQUUsZ0JBQ3hCLEtBQUMsS0FBSyxLQUFFLElBQ0MsSUFDUCxJQUNYLENBQ04sRUFiMEQsQ0FhMUQsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbXBvbmVudE1ldGEsIENvbXBvbmVudFN0b3J5IH0gZnJvbSAnQHN0b3J5Ym9vay9yZWFjdCc7XG5pbXBvcnQgRmxleFJvdyBmcm9tICcuL2ZsZXgtcm93JztcbmltcG9ydCBGbGV4Qm94IGZyb20gJy4uL2ZsZXgtYm94L2ZsZXgtYm94JztcbmltcG9ydCBGbGV4Q29sdW1uIGZyb20gJy4uL2ZsZXgtY29sdW1uL2ZsZXgtY29sdW1uJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50OiBGbGV4Um93LFxuICAgIHRpdGxlOiAnRmxleFJvdycsXG4gICAgYXJnczoge1xuICAgICAgICBpdGVtc1NwYWNpbmc6IDEwLFxuICAgICAgICBqdXN0aWZ5OiAnY2VudGVyJyxcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBncm93OiAxMCxcbiAgICAgICAgZ2FwOiAxMCxcbiAgICAgICAgc2hyaW5rOiAxLFxuICAgIH0sXG59IGFzIENvbXBvbmVudE1ldGE8dHlwZW9mIEZsZXhSb3c+O1xuXG5cbmNvbnN0IFN0eWxlZEJsb2NrID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDBweDtcbiAgd2lkdGg6IDEwMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjMGEwYTBhO1xuICBmb250LXdlaWdodDogYm9sZGVyO1xuICBjb2xvcjogI2ZmZjtcbiAgOm50aC1jaGlsZCgxbikge1xuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xuICB9XG4gIDpudGgtY2hpbGQoMm4pIHtcbiAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gIH1cbiAgOm50aC1jaGlsZCgzbikge1xuICAgIGJhY2tncm91bmQ6IGdyZWVuO1xuICB9XG5gXG5cbmNvbnN0IEJsb2NrID0gKCkgPT4gKFxuICAgIDxGbGV4Qm94PlxuICAgICAgICA8U3R5bGVkQmxvY2s+QmxvY2sgMTwvU3R5bGVkQmxvY2s+XG4gICAgICAgIDxTdHlsZWRCbG9jaz5CbG9jayAyPC9TdHlsZWRCbG9jaz5cbiAgICAgICAgPFN0eWxlZEJsb2NrPkJsb2NrIDM8L1N0eWxlZEJsb2NrPlxuICAgIDwvRmxleEJveD5cbik7XG5cbmNvbnN0IFRlbXBsYXRlOiBDb21wb25lbnRTdG9yeTx0eXBlb2YgRmxleFJvdz4gPSAoYXJncykgPT4gKFxuICAgIDw+XG4gICAgICAgIDxGbGV4Um93IGl0ZW1zU3BhY2luZz17MTB9PlxuICAgICAgICAgICAgPEZsZXhDb2x1bW4gaXRlbXNTcGFjaW5nPXsyMH0+XG4gICAgICAgICAgICAgICAgPEJsb2NrLz5cbiAgICAgICAgICAgIDwvRmxleENvbHVtbj5cbiAgICAgICAgPC9GbGV4Um93PlxuICAgICAgICA8RmxleFJvdyB7Li4uYXJnc30+XG4gICAgICAgICAgICA8RmxleENvbHVtbiBpdGVtc1NwYWNpbmc9ezIwfT5cbiAgICAgICAgICAgICAgICA8QmxvY2svPlxuICAgICAgICAgICAgPC9GbGV4Q29sdW1uPlxuICAgICAgICA8L0ZsZXhSb3c+XG4gICAgPC8+XG4pO1xuXG5leHBvcnQgY29uc3QgUHJpbWFyeSA9IFRlbXBsYXRlLmJpbmQoe30pO1xuIl19