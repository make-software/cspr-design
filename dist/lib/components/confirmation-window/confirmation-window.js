import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled from 'styled-components';
import FlexRow from '../flex-row/flex-row';
import FlexColumn from '../flex-column/flex-column';
import Button from '../button/button';
import BodyText from '../body-text/body-text';
import ReactModal from 'react-modal';
import ModalHeader from './modal-header';
import SubtitleText from '../subtitle-text/subtitle-text';
var ModalContainer = styled(FlexColumn)(function (_a) {
    var theme = _a.theme;
    return theme.withMedia({
        width: ['311px', '400px', '462px'],
    });
});
var StyledCaption = styled.div(function (_a) {
    var theme = _a.theme;
    return theme.withMedia({
        textAlign: 'center',
        marginBottom: '16px',
    });
});
var StyledCaptionText = styled(SubtitleText)(function (_a) {
    var theme = _a.theme;
    return theme.withMedia({
        fontWeight: [600, 600, 700],
    });
});
var InformationText = styled(BodyText)(function (_a) {
    var theme = _a.theme;
    return theme.withMedia({
        textAlign: 'center',
        color: theme.styleguideColors.contentSecondary,
    });
});
var ButtonsContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return theme.withMedia({
        marginTop: ['32px', '32px', '56px'],
        flexDirection: ['column', 'row', 'row'],
    });
});
export var ConfirmationWindow = function (_a) {
    var isOpen = _a.isOpen, title = _a.title, withHeader = _a.withHeader, headerLogoSrc = _a.headerLogoSrc, information = _a.information, confirmLabel = _a.confirmLabel, confirmColor = _a.confirmColor, onConfirm = _a.onConfirm, dismissLabel = _a.dismissLabel, onDismiss = _a.onDismiss;
    var modalStyle = {
        overlay: {
            backgroundColor: '#0E1126A0',
        },
        content: {
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            borderRadius: '12px',
            padding: '32px 16px 16px',
            top: '50%',
            transform: 'translate(-50%, -50%)',
        },
    };
    return (_jsx(_Fragment, { children: isOpen && (_jsx(ReactModal, __assign({ isOpen: isOpen, style: modalStyle, onRequestClose: onDismiss, shouldCloseOnEsc: true, shouldCloseOnOverlayClick: true, portalClassName: 'cspr' }, { children: _jsxs(ModalContainer, { children: [withHeader && (_jsx(ModalHeader, { headerLogoSrc: headerLogoSrc, onDismiss: onDismiss })), _jsx(StyledCaption, { children: _jsx(StyledCaptionText, __assign({ size: 1, scale: "lg" }, { children: title })) }), _jsx(FlexRow, { children: _jsx(InformationText, __assign({ size: 3, scale: "sm" }, { children: information })) }), _jsxs(ButtonsContainer, __assign({ gap: '16px', justify: 'space-between' }, { children: [dismissLabel && (_jsx(Button, __assign({ color: 'secondaryBlue', onClick: onDismiss }, { children: dismissLabel }))), _jsx(Button, __assign({ color: confirmColor === 'red' ? 'primaryRed' : 'primaryBlue', onClick: onConfirm }, { children: confirmLabel }))] }))] }) }))) }));
};
export default ConfirmationWindow;
//# sourceMappingURL=data:application/json;base64,