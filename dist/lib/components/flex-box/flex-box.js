import { __assign } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import styled from 'styled-components';
var StyledFlexBox = styled('div')(function (_a) {
    var _b, _c;
    var itemsSpacing = _a.itemsSpacing, flexDirection = _a.direction, justifyContent = _a.justify, flexWrap = _a.wrap, alignItems = _a.align, flexGrow = _a.grow, flexShrink = _a.shrink, _d = _a.basis, flexBasis = _d === void 0 ? 'auto' : _d, gap = _a.gap, onClick = _a.onClick;
    return (__assign(__assign({ display: 'flex', gap: gap, flexDirection: flexDirection, flexWrap: flexWrap, justifyContent: justifyContent, alignItems: alignItems, flexGrow: flexGrow, flexShrink: flexShrink, flexBasis: flexBasis }, (itemsSpacing != null && {
        '> * + *': (_b = {},
            _b[flexDirection === 'row' ? 'marginLeft' : 'marginTop'] = itemsSpacing,
            _b),
        '> * + *:where(h1, h2, h3, h4, h5, h6)': (_c = {},
            _c[flexDirection === 'row' ? 'marginLeft' : 'marginTop'] = "".concat(itemsSpacing, "px !important"),
            _c),
    })), (onClick && {
        cursor: 'pointer',
    })));
});
export var FlexBox = React.forwardRef(function (props, ref) { return _jsx(StyledFlexBox, __assign({ ref: ref }, props)); });
export default FlexBox;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC1ib3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvZmxleC1ib3gvZmxleC1ib3gudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBbUJ2QyxJQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ2pDLFVBQUMsRUFXQTs7UUFWQyxZQUFZLGtCQUFBLEVBQ0QsYUFBYSxlQUFBLEVBQ2YsY0FBYyxhQUFBLEVBQ2pCLFFBQVEsVUFBQSxFQUNQLFVBQVUsV0FBQSxFQUNYLFFBQVEsVUFBQSxFQUNOLFVBQVUsWUFBQSxFQUNsQixhQUF5QixFQUFsQixTQUFTLG1CQUFHLE1BQU0sS0FBQSxFQUN6QixHQUFHLFNBQUEsRUFDSCxPQUFPLGFBQUE7SUFDSCxPQUFBLHFCQUNKLE9BQU8sRUFBRSxNQUFNLEVBQ2YsR0FBRyxLQUFBLEVBQ0gsYUFBYSxlQUFBLEVBQ2IsUUFBUSxVQUFBLEVBQ1IsY0FBYyxnQkFBQSxFQUNkLFVBQVUsWUFBQSxFQUNWLFFBQVEsVUFBQSxFQUNSLFVBQVUsWUFBQSxFQUNWLFNBQVMsV0FBQSxJQUNOLENBQUMsWUFBWSxJQUFJLElBQUksSUFBSTtRQUMxQixTQUFTO1lBQ1AsR0FBQyxhQUFhLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBRyxZQUFZO2VBQ3JFO1FBQ0QsdUNBQXVDO1lBQ3JDLEdBQUMsYUFBYSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUcsVUFBRyxZQUFZLGtCQUFlO2VBQ3ZGO0tBQ0YsQ0FBQyxHQUNDLENBQUMsT0FBTyxJQUFJO1FBQ2IsTUFBTSxFQUFFLFNBQVM7S0FDbEIsQ0FBQyxFQUNGO0FBckJJLENBcUJKLENBQ0gsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUNyQyxVQUFDLEtBQUssRUFBRSxHQUFHLElBQUssT0FBQSxLQUFDLGFBQWEsYUFBQyxHQUFHLEVBQUUsR0FBRyxJQUFNLEtBQUssRUFBSSxFQUF0QyxDQUFzQyxDQUN2RCxDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IEJhc2VQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG5leHBvcnQgaW50ZXJmYWNlIEZsZXhCb3hQcm9wcyBleHRlbmRzIEJhc2VQcm9wcyB7XG4gIC8qIEBkZXNjcmlwdGlvbiB3aWxsIGFkZCBzcGFjaW5nIGJldHdlZW4gY2hpbGRyZW4sIHdvcmsgZGVwZW5kaW5nIG9uIHJvdy9jb2x1bW4gbGF5b3V0ICovXG4gIGl0ZW1zU3BhY2luZz86IG51bWJlcjtcbiAgaW5uZXJSZWY/OiBSZWFjdC5SZWY8SFRNTERpdkVsZW1lbnQ+O1xuICBnYXA/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzWydnYXAnXTtcbiAgZGlyZWN0aW9uPzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleERpcmVjdGlvbiddO1xuICB3cmFwPzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleFdyYXAnXTtcbiAganVzdGlmeT86IFJlYWN0LkNTU1Byb3BlcnRpZXNbJ2p1c3RpZnlDb250ZW50J107XG4gIGFsaWduPzogUmVhY3QuQ1NTUHJvcGVydGllc1snYWxpZ25JdGVtcyddO1xuICBncm93PzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleEdyb3cnXTtcbiAgc2hyaW5rPzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleFNocmluayddO1xuICBiYXNpcz86IFJlYWN0LkNTU1Byb3BlcnRpZXNbJ2ZsZXhCYXNpcyddO1xufVxuXG5jb25zdCBTdHlsZWRGbGV4Qm94ID0gc3R5bGVkKCdkaXYnKTxGbGV4Qm94UHJvcHM+KFxuICAoe1xuICAgIGl0ZW1zU3BhY2luZyxcbiAgICBkaXJlY3Rpb246IGZsZXhEaXJlY3Rpb24sXG4gICAganVzdGlmeToganVzdGlmeUNvbnRlbnQsXG4gICAgd3JhcDogZmxleFdyYXAsXG4gICAgYWxpZ246IGFsaWduSXRlbXMsXG4gICAgZ3JvdzogZmxleEdyb3csXG4gICAgc2hyaW5rOiBmbGV4U2hyaW5rLFxuICAgIGJhc2lzOiBmbGV4QmFzaXMgPSAnYXV0bycsXG4gICAgZ2FwLFxuICAgIG9uQ2xpY2ssXG4gIH0pID0+ICh7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGdhcCxcbiAgICBmbGV4RGlyZWN0aW9uLFxuICAgIGZsZXhXcmFwLFxuICAgIGp1c3RpZnlDb250ZW50LFxuICAgIGFsaWduSXRlbXMsXG4gICAgZmxleEdyb3csXG4gICAgZmxleFNocmluayxcbiAgICBmbGV4QmFzaXMsXG4gICAgLi4uKGl0ZW1zU3BhY2luZyAhPSBudWxsICYmIHtcbiAgICAgICc+ICogKyAqJzoge1xuICAgICAgICBbZmxleERpcmVjdGlvbiA9PT0gJ3JvdycgPyAnbWFyZ2luTGVmdCcgOiAnbWFyZ2luVG9wJ106IGl0ZW1zU3BhY2luZyxcbiAgICAgIH0sXG4gICAgICAnPiAqICsgKjp3aGVyZShoMSwgaDIsIGgzLCBoNCwgaDUsIGg2KSc6IHtcbiAgICAgICAgW2ZsZXhEaXJlY3Rpb24gPT09ICdyb3cnID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblRvcCddOiBgJHtpdGVtc1NwYWNpbmd9cHggIWltcG9ydGFudGAsXG4gICAgICB9LFxuICAgIH0pLFxuICAgIC4uLihvbkNsaWNrICYmIHtcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIH0pLFxuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZsZXhCb3ggPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBGbGV4Qm94UHJvcHM+KFxuICAocHJvcHMsIHJlZikgPT4gPFN0eWxlZEZsZXhCb3ggcmVmPXtyZWZ9IHsuLi5wcm9wc30gLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEZsZXhCb3g7XG4iXX0=