import { __assign, __rest } from "tslib";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Tooltip as ReakitTooltip, TooltipReference, useTooltipState, } from 'reakit/Tooltip';
import styled from 'styled-components';
import BodyText from '../body-text/body-text';
import CaptionText from '../caption-text/caption-text';
import FlexColumn from '../flex-column/flex-column';
import { matchSize } from '../../utils/match-size';
var StyledReactTooltip = styled(ReakitTooltip)(function (_a) {
    var theme = _a.theme, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d;
    return ({
        zIndex: theme.zIndex.tooltip,
        color: theme.styleguideColors.contentPrimary,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        borderRadius: theme.borderRadius.base,
        padding: theme.padding[paddingScale],
        boxShadow: theme.boxShadow.tooltip,
        transition: 'opacity 250ms ease-in-out',
        opacity: 0,
        fontSize: matchSize({
            sm: '1.3rem',
            xs: '0.8125rem',
        }, scale),
        lineHeight: matchSize({
            sm: '1.5rem',
            xs: '1.25rem',
        }, lineHeight),
        '&[data-enter]': {
            opacity: 1,
        },
    });
});
export var Tooltip = React.forwardRef(function (_a, ref) {
    var children = _a.children, limitWidth = _a.limitWidth, title = _a.title, caption = _a.caption, additionalBlock = _a.additionalBlock, monotype = _a.monotype, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d, props = __rest(_a, ["children", "limitWidth", "title", "caption", "additionalBlock", "monotype", "lineHeight", "scale", "paddingScale"]);
    var tooltip = useTooltipState({ animated: 250 });
    var maxWidth = limitWidth
        ? typeof limitWidth === 'string'
            ? limitWidth
            : '500px'
        : undefined;
    if (children == null) {
        return null;
    }
    if (title == null) {
        return _jsx(_Fragment, { children: children });
    }
    return (_jsxs(_Fragment, { children: [_jsx(TooltipReference, __assign({}, tooltip, { ref: children.ref }, children.props, { children: function (referenceProps) { return React.cloneElement(children, referenceProps); } })), _jsx(StyledReactTooltip, __assign({ paddingScale: paddingScale }, tooltip, props, { children: _jsx("div", __assign({ style: { maxWidth: maxWidth } }, { children: _jsxs(FlexColumn, __assign({ itemsSpacing: 8 }, { children: [_jsxs(FlexColumn, { children: [_jsx(CaptionText, __assign({ size: 2, variation: "gray" }, { children: caption })), _jsx(BodyText, __assign({ size: 3, monotype: monotype, lineHeight: lineHeight, scale: scale }, { children: title }))] }), additionalBlock] })) })) }))] }));
});
export default Tooltip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFDTCxPQUFPLElBQUksYUFBYSxFQUN4QixnQkFBZ0IsRUFDaEIsZUFBZSxHQUNoQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBRXZDLE9BQU8sUUFBUSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZELE9BQU8sVUFBVSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQW1CbkQsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQzlDLFVBQUMsRUFBNEQ7UUFBMUQsS0FBSyxXQUFBLEVBQUUsa0JBQWlCLEVBQWpCLFVBQVUsbUJBQUcsSUFBSSxLQUFBLEVBQUUsYUFBWSxFQUFaLEtBQUssbUJBQUcsSUFBSSxLQUFBLEVBQUUsb0JBQWdCLEVBQWhCLFlBQVksbUJBQUcsQ0FBQyxLQUFBO0lBQU8sT0FBQSxDQUFDO1FBQ2pFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU87UUFDNUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjO1FBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCO1FBQ3pELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDckMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87UUFFbEMsVUFBVSxFQUFFLDJCQUEyQjtRQUN2QyxPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxTQUFTLENBQ2pCO1lBQ0UsRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsV0FBVztTQUNoQixFQUNELEtBQUssQ0FDTjtRQUNELFVBQVUsRUFBRSxTQUFTLENBQ25CO1lBQ0UsRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsU0FBUztTQUNkLEVBQ0QsVUFBVSxDQUNYO1FBQ0QsZUFBZSxFQUFFO1lBQ2YsT0FBTyxFQUFFLENBQUM7U0FDWDtLQUNGLENBQUM7QUEzQmdFLENBMkJoRSxDQUNILENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FJckMsVUFDRSxFQVdDLEVBQ0QsR0FBRztJQVhELElBQUEsUUFBUSxjQUFBLEVBQ1IsVUFBVSxnQkFBQSxFQUNWLEtBQUssV0FBQSxFQUNMLE9BQU8sYUFBQSxFQUNQLGVBQWUscUJBQUEsRUFDZixRQUFRLGNBQUEsRUFDUixrQkFBaUIsRUFBakIsVUFBVSxtQkFBRyxJQUFJLEtBQUEsRUFDakIsYUFBWSxFQUFaLEtBQUssbUJBQUcsSUFBSSxLQUFBLEVBQ1osb0JBQWdCLEVBQWhCLFlBQVksbUJBQUcsQ0FBQyxLQUFBLEVBQ2IsS0FBSyxjQVZWLG9IQVdDLENBRFM7SUFJVixJQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuRCxJQUFNLFFBQVEsR0FBRyxVQUFVO1FBQ3pCLENBQUMsQ0FBQyxPQUFPLFVBQVUsS0FBSyxRQUFRO1lBQzlCLENBQUMsQ0FBQyxVQUFVO1lBQ1osQ0FBQyxDQUFDLE9BQU87UUFDWCxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRWQsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDakIsT0FBTyw0QkFBRyxRQUFRLEdBQUksQ0FBQztLQUN4QjtJQUVELE9BQU8sQ0FDTCw4QkFDRSxLQUFDLGdCQUFnQixlQUFLLE9BQU8sSUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsSUFBTSxRQUFRLENBQUMsS0FBSyxjQUNqRSxVQUFDLGNBQWMsSUFBSyxPQUFBLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxFQUE1QyxDQUE0QyxJQUNoRCxFQUNuQixLQUFDLGtCQUFrQixhQUFDLFlBQVksRUFBRSxZQUFZLElBQU0sT0FBTyxFQUFNLEtBQUssY0FDcEUsdUJBQUssS0FBSyxFQUFFLEVBQUUsUUFBUSxVQUFBLEVBQUUsZ0JBQ3RCLE1BQUMsVUFBVSxhQUFDLFlBQVksRUFBRSxDQUFDLGlCQUN6QixNQUFDLFVBQVUsZUFDVCxLQUFDLFdBQVcsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUNuQyxPQUFPLElBQ0ksRUFDZCxLQUFDLFFBQVEsYUFDUCxJQUFJLEVBQUUsQ0FBQyxFQUNQLFFBQVEsRUFBRSxRQUFRLEVBQ2xCLFVBQVUsRUFBRSxVQUFVLEVBQ3RCLEtBQUssRUFBRSxLQUFLLGdCQUVYLEtBQUssSUFDRyxJQUNBLEVBQ1osZUFBZSxLQUNMLElBQ1QsSUFDYSxJQUNwQixDQUNKLENBQUM7QUFDSixDQUFDLENBQ0YsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFRvb2x0aXAgYXMgUmVha2l0VG9vbHRpcCxcbiAgVG9vbHRpcFJlZmVyZW5jZSxcbiAgdXNlVG9vbHRpcFN0YXRlLFxufSBmcm9tICdyZWFraXQvVG9vbHRpcCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJhc2VQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCBCb2R5VGV4dCBmcm9tICcuLi9ib2R5LXRleHQvYm9keS10ZXh0JztcbmltcG9ydCBDYXB0aW9uVGV4dCBmcm9tICcuLi9jYXB0aW9uLXRleHQvY2FwdGlvbi10ZXh0JztcbmltcG9ydCBGbGV4Q29sdW1uIGZyb20gJy4uL2ZsZXgtY29sdW1uL2ZsZXgtY29sdW1uJztcbmltcG9ydCB7IG1hdGNoU2l6ZSB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGNoLXNpemUnO1xuXG50eXBlIFJlZiA9IEhUTUxEaXZFbGVtZW50O1xuXG50eXBlIFN0eWxlZFJlYWN0VG9vbHRpcFByb3BzID0ge1xuICBsaW5lSGVpZ2h0PzogJ3hzJyB8ICdzbSc7XG4gIHNjYWxlPzogJ3hzJyB8ICdzbSc7XG4gIHBhZGRpbmdTY2FsZT86IDEgfCAyO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBUb29sdGlwUHJvcHMgZXh0ZW5kcyBCYXNlUHJvcHMge1xuICB0aXRsZT86IEpTWC5FbGVtZW50IHwgc3RyaW5nIHwgbnVsbDtcbiAgY2FwdGlvbj86IHN0cmluZyB8IG51bGw7XG4gIGFkZGl0aW9uYWxCbG9jaz86IFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+ICYgYW55O1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+ICYgYW55O1xuICBtb25vdHlwZT86IGJvb2xlYW47XG4gIGxpbWl0V2lkdGg/OiBib29sZWFuIHwgc3RyaW5nO1xufVxuXG5jb25zdCBTdHlsZWRSZWFjdFRvb2x0aXAgPSBzdHlsZWQoUmVha2l0VG9vbHRpcCk8U3R5bGVkUmVhY3RUb29sdGlwUHJvcHM+KFxuICAoeyB0aGVtZSwgbGluZUhlaWdodCA9ICdzbScsIHNjYWxlID0gJ3NtJywgcGFkZGluZ1NjYWxlID0gMiB9KSA9PiAoe1xuICAgIHpJbmRleDogdGhlbWUuekluZGV4LnRvb2x0aXAsXG4gICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFByaW1hcnksXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmJhY2tncm91bmRQcmltYXJ5LFxuICAgIGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmJhc2UsXG4gICAgcGFkZGluZzogdGhlbWUucGFkZGluZ1twYWRkaW5nU2NhbGVdLFxuICAgIGJveFNoYWRvdzogdGhlbWUuYm94U2hhZG93LnRvb2x0aXAsXG5cbiAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAyNTBtcyBlYXNlLWluLW91dCcsXG4gICAgb3BhY2l0eTogMCxcbiAgICBmb250U2l6ZTogbWF0Y2hTaXplKFxuICAgICAge1xuICAgICAgICBzbTogJzEuM3JlbScsXG4gICAgICAgIHhzOiAnMC44MTI1cmVtJyxcbiAgICAgIH0sXG4gICAgICBzY2FsZVxuICAgICksXG4gICAgbGluZUhlaWdodDogbWF0Y2hTaXplKFxuICAgICAge1xuICAgICAgICBzbTogJzEuNXJlbScsXG4gICAgICAgIHhzOiAnMS4yNXJlbScsXG4gICAgICB9LFxuICAgICAgbGluZUhlaWdodFxuICAgICksXG4gICAgJyZbZGF0YS1lbnRlcl0nOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVG9vbHRpcCA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlZixcbiAgVG9vbHRpcFByb3BzICYgU3R5bGVkUmVhY3RUb29sdGlwUHJvcHNcbj4oXG4gIChcbiAgICB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGxpbWl0V2lkdGgsXG4gICAgICB0aXRsZSxcbiAgICAgIGNhcHRpb24sXG4gICAgICBhZGRpdGlvbmFsQmxvY2ssXG4gICAgICBtb25vdHlwZSxcbiAgICAgIGxpbmVIZWlnaHQgPSAnc20nLFxuICAgICAgc2NhbGUgPSAnc20nLFxuICAgICAgcGFkZGluZ1NjYWxlID0gMixcbiAgICAgIC4uLnByb3BzXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgdG9vbHRpcCA9IHVzZVRvb2x0aXBTdGF0ZSh7IGFuaW1hdGVkOiAyNTAgfSk7XG4gICAgY29uc3QgbWF4V2lkdGggPSBsaW1pdFdpZHRoXG4gICAgICA/IHR5cGVvZiBsaW1pdFdpZHRoID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGxpbWl0V2lkdGhcbiAgICAgICAgOiAnNTAwcHgnXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGl0bGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIDw+e2NoaWxkcmVufTwvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPFRvb2x0aXBSZWZlcmVuY2Ugey4uLnRvb2x0aXB9IHJlZj17Y2hpbGRyZW4ucmVmfSB7Li4uY2hpbGRyZW4ucHJvcHN9PlxuICAgICAgICAgIHsocmVmZXJlbmNlUHJvcHMpID0+IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgcmVmZXJlbmNlUHJvcHMpfVxuICAgICAgICA8L1Rvb2x0aXBSZWZlcmVuY2U+XG4gICAgICAgIDxTdHlsZWRSZWFjdFRvb2x0aXAgcGFkZGluZ1NjYWxlPXtwYWRkaW5nU2NhbGV9IHsuLi50b29sdGlwfSB7Li4ucHJvcHN9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbWF4V2lkdGggfX0+XG4gICAgICAgICAgICA8RmxleENvbHVtbiBpdGVtc1NwYWNpbmc9ezh9PlxuICAgICAgICAgICAgICA8RmxleENvbHVtbj5cbiAgICAgICAgICAgICAgICA8Q2FwdGlvblRleHQgc2l6ZT17Mn0gdmFyaWF0aW9uPVwiZ3JheVwiPlxuICAgICAgICAgICAgICAgICAge2NhcHRpb259XG4gICAgICAgICAgICAgICAgPC9DYXB0aW9uVGV4dD5cbiAgICAgICAgICAgICAgICA8Qm9keVRleHRcbiAgICAgICAgICAgICAgICAgIHNpemU9ezN9XG4gICAgICAgICAgICAgICAgICBtb25vdHlwZT17bW9ub3R5cGV9XG4gICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0PXtsaW5lSGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgc2NhbGU9e3NjYWxlfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgICA8L0JvZHlUZXh0PlxuICAgICAgICAgICAgICA8L0ZsZXhDb2x1bW4+XG4gICAgICAgICAgICAgIHthZGRpdGlvbmFsQmxvY2t9XG4gICAgICAgICAgICA8L0ZsZXhDb2x1bW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkUmVhY3RUb29sdGlwPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcDtcbiJdfQ==