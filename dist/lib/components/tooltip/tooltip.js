import { __assign, __rest } from "tslib";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Tooltip as ReakitTooltip, TooltipReference, useTooltipState, } from 'reakit/Tooltip';
import styled from 'styled-components';
import BodyText from '../body-text/body-text';
import CaptionText from '../caption-text/caption-text';
import FlexColumn from '../flex-column/flex-column';
import { matchSize } from "../../utils/match-size";
var StyledReactTooltip = styled(ReakitTooltip)(function (_a) {
    var theme = _a.theme, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d;
    return ({
        zIndex: theme.zIndex.tooltip,
        color: theme.styleguideColors.contentPrimary,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        borderRadius: theme.borderRadius.base,
        padding: theme.padding[paddingScale],
        boxShadow: theme.boxShadow.tooltip,
        transition: 'opacity 250ms ease-in-out',
        opacity: 0,
        fontSize: matchSize({
            sm: '1.3rem',
            xs: '0.8125rem',
        }, scale),
        lineHeight: matchSize({
            sm: '1.5rem',
            xs: '1.25rem',
        }, lineHeight),
        '&[data-enter]': {
            opacity: 1,
        },
    });
});
export var Tooltip = React.forwardRef(function (_a, ref) {
    var children = _a.children, limitWidth = _a.limitWidth, title = _a.title, caption = _a.caption, monotype = _a.monotype, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d, props = __rest(_a, ["children", "limitWidth", "title", "caption", "monotype", "lineHeight", "scale", "paddingScale"]);
    var tooltip = useTooltipState({ animated: 250 });
    if (children == null) {
        return null;
    }
    if (title == null) {
        return _jsx(_Fragment, { children: children });
    }
    return (_jsxs(_Fragment, { children: [_jsx(TooltipReference, __assign({}, tooltip, { ref: children.ref }, children.props, { children: function (referenceProps) { return React.cloneElement(children, referenceProps); } })), _jsx(StyledReactTooltip, __assign({ paddingScale: paddingScale }, tooltip, props, { children: _jsx("div", __assign({ style: { maxWidth: limitWidth ? '500px' : undefined } }, { children: _jsxs(FlexColumn, { children: [_jsx(CaptionText, __assign({ size: 2, variation: "gray" }, { children: caption })), _jsx(BodyText, __assign({ size: 3, monotype: monotype, lineHeight: lineHeight, scale: scale }, { children: title }))] }) })) }))] }));
});
export default Tooltip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFDTCxPQUFPLElBQUksYUFBYSxFQUN4QixnQkFBZ0IsRUFDaEIsZUFBZSxHQUNoQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBRXZDLE9BQU8sUUFBUSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZELE9BQU8sVUFBVSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQWlCakQsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQTBCLFVBQUMsRUFBNEQ7UUFBMUQsS0FBSyxXQUFBLEVBQUUsa0JBQWlCLEVBQWpCLFVBQVUsbUJBQUcsSUFBSSxLQUFBLEVBQUUsYUFBWSxFQUFaLEtBQUssbUJBQUcsSUFBSSxLQUFBLEVBQUUsb0JBQWdCLEVBQWhCLFlBQVksbUJBQUcsQ0FBQyxLQUFBO0lBQU8sT0FBQSxDQUFDO1FBQzNJLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU87UUFDNUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjO1FBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCO1FBQ3pELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDckMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87UUFFbEMsVUFBVSxFQUFFLDJCQUEyQjtRQUN2QyxPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxTQUFTLENBQ2hCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsV0FBVztTQUNsQixFQUNBLEtBQUssQ0FDUjtRQUNELFVBQVUsRUFBRSxTQUFTLENBQ2pCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsU0FBUztTQUNoQixFQUNELFVBQVUsQ0FDYjtRQUNELGVBQWUsRUFBRTtZQUNmLE9BQU8sRUFBRSxDQUFDO1NBQ1g7S0FDRixDQUFDO0FBM0IwSSxDQTJCMUksQ0FBQyxDQUFDO0FBRUosTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQ3JDLFVBQUMsRUFBK0csRUFBRSxHQUFHO0lBQWxILElBQUEsUUFBUSxjQUFBLEVBQUUsVUFBVSxnQkFBQSxFQUFFLEtBQUssV0FBQSxFQUFFLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLGtCQUFpQixFQUFqQixVQUFVLG1CQUFHLElBQUksS0FBQSxFQUFFLGFBQVksRUFBWixLQUFLLG1CQUFHLElBQUksS0FBQSxFQUFFLG9CQUFnQixFQUFoQixZQUFZLG1CQUFHLENBQUMsS0FBQSxFQUFLLEtBQUssY0FBN0csaUdBQStHLENBQUY7SUFDNUcsSUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFbkQsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDakIsT0FBTyw0QkFBRyxRQUFRLEdBQUksQ0FBQztLQUN4QjtJQUVELE9BQU8sQ0FDTCw4QkFDRSxLQUFDLGdCQUFnQixlQUFLLE9BQU8sSUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsSUFBTSxRQUFRLENBQUMsS0FBSyxjQUNqRSxVQUFDLGNBQWMsSUFBSyxPQUFBLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxFQUE1QyxDQUE0QyxJQUNoRCxFQUNuQixLQUFDLGtCQUFrQixhQUFDLFlBQVksRUFBRSxZQUFZLElBQU0sT0FBTyxFQUFNLEtBQUssY0FDcEUsdUJBQUssS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsZ0JBQ3hELE1BQUMsVUFBVSxlQUNULEtBQUMsV0FBVyxhQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQ25DLE9BQU8sSUFDSSxFQUNkLEtBQUMsUUFBUSxhQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxLQUFLLGdCQUN4RSxLQUFLLElBQ0csSUFDQSxJQUNULElBQ2EsSUFDcEIsQ0FDSixDQUFDO0FBQ0osQ0FBQyxDQUNGLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7XHJcbiAgVG9vbHRpcCBhcyBSZWFraXRUb29sdGlwLFxyXG4gIFRvb2x0aXBSZWZlcmVuY2UsXHJcbiAgdXNlVG9vbHRpcFN0YXRlLFxyXG59IGZyb20gJ3JlYWtpdC9Ub29sdGlwJztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IEJhc2VQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcclxuaW1wb3J0IEJvZHlUZXh0IGZyb20gJy4uL2JvZHktdGV4dC9ib2R5LXRleHQnO1xyXG5pbXBvcnQgQ2FwdGlvblRleHQgZnJvbSAnLi4vY2FwdGlvbi10ZXh0L2NhcHRpb24tdGV4dCc7XHJcbmltcG9ydCBGbGV4Q29sdW1uIGZyb20gJy4uL2ZsZXgtY29sdW1uL2ZsZXgtY29sdW1uJztcclxuaW1wb3J0IHttYXRjaFNpemV9IGZyb20gXCIuLi8uLi91dGlscy9tYXRjaC1zaXplXCI7XHJcblxyXG50eXBlIFJlZiA9IEhUTUxEaXZFbGVtZW50O1xyXG5cclxudHlwZSBTdHlsZWRSZWFjdFRvb2x0aXBQcm9wcyA9IHtcclxuICAgIGxpbmVIZWlnaHQ/OiAneHMnIHwgJ3NtJztcclxuICAgIHNjYWxlPzogJ3hzJyB8ICdzbSc7XHJcbiAgICBwYWRkaW5nU2NhbGU/OiAxIHwgMjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUb29sdGlwUHJvcHMgZXh0ZW5kcyBCYXNlUHJvcHMge1xyXG4gIHRpdGxlPzogSlNYLkVsZW1lbnQgfCBzdHJpbmcgfCBudWxsO1xyXG4gIGNhcHRpb24/OiBzdHJpbmcgfCBudWxsO1xyXG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3RFbGVtZW50PGFueT4gJiBhbnk7XHJcbiAgbW9ub3R5cGU/OiBib29sZWFuO1xyXG4gIGxpbWl0V2lkdGg/OiBib29sZWFuO1xyXG59XHJcbmNvbnN0IFN0eWxlZFJlYWN0VG9vbHRpcCA9IHN0eWxlZChSZWFraXRUb29sdGlwKTxTdHlsZWRSZWFjdFRvb2x0aXBQcm9wcz4oKHsgdGhlbWUsIGxpbmVIZWlnaHQgPSAnc20nLCBzY2FsZSA9ICdzbScsIHBhZGRpbmdTY2FsZSA9IDIgfSkgPT4gKHtcclxuICB6SW5kZXg6IHRoZW1lLnpJbmRleC50b29sdGlwLFxyXG4gIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRQcmltYXJ5LFxyXG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kUHJpbWFyeSxcclxuICBib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5iYXNlLFxyXG4gIHBhZGRpbmc6IHRoZW1lLnBhZGRpbmdbcGFkZGluZ1NjYWxlXSxcclxuICBib3hTaGFkb3c6IHRoZW1lLmJveFNoYWRvdy50b29sdGlwLFxyXG5cclxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAyNTBtcyBlYXNlLWluLW91dCcsXHJcbiAgb3BhY2l0eTogMCxcclxuICBmb250U2l6ZTogbWF0Y2hTaXplKFxyXG4gICAgIHtcclxuICAgICAgICAgc206ICcxLjNyZW0nLFxyXG4gICAgICAgICB4czogJzAuODEyNXJlbScsXHJcbiAgICAgfSxcclxuICAgICAgc2NhbGVcclxuICApLFxyXG4gIGxpbmVIZWlnaHQ6IG1hdGNoU2l6ZShcclxuICAgICAge1xyXG4gICAgICAgICAgc206ICcxLjVyZW0nLFxyXG4gICAgICAgICAgeHM6ICcxLjI1cmVtJyxcclxuICAgICAgfSxcclxuICAgICAgbGluZUhlaWdodFxyXG4gICksXHJcbiAgJyZbZGF0YS1lbnRlcl0nOiB7XHJcbiAgICBvcGFjaXR5OiAxLFxyXG4gIH0sXHJcbn0pKTtcclxuXHJcbmV4cG9ydCBjb25zdCBUb29sdGlwID0gUmVhY3QuZm9yd2FyZFJlZjxSZWYsIFRvb2x0aXBQcm9wcyAmIFN0eWxlZFJlYWN0VG9vbHRpcFByb3BzPihcclxuICAoeyBjaGlsZHJlbiwgbGltaXRXaWR0aCwgdGl0bGUsIGNhcHRpb24sIG1vbm90eXBlLCBsaW5lSGVpZ2h0ID0gJ3NtJywgc2NhbGUgPSAnc20nLCBwYWRkaW5nU2NhbGUgPSAyLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcclxuICAgIGNvbnN0IHRvb2x0aXAgPSB1c2VUb29sdGlwU3RhdGUoeyBhbmltYXRlZDogMjUwIH0pO1xyXG5cclxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aXRsZSA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiA8PntjaGlsZHJlbn08Lz47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPD5cclxuICAgICAgICA8VG9vbHRpcFJlZmVyZW5jZSB7Li4udG9vbHRpcH0gcmVmPXtjaGlsZHJlbi5yZWZ9IHsuLi5jaGlsZHJlbi5wcm9wc30+XHJcbiAgICAgICAgICB7KHJlZmVyZW5jZVByb3BzKSA9PiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHJlZmVyZW5jZVByb3BzKX1cclxuICAgICAgICA8L1Rvb2x0aXBSZWZlcmVuY2U+XHJcbiAgICAgICAgPFN0eWxlZFJlYWN0VG9vbHRpcCBwYWRkaW5nU2NhbGU9e3BhZGRpbmdTY2FsZX0gey4uLnRvb2x0aXB9IHsuLi5wcm9wc30+XHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1heFdpZHRoOiBsaW1pdFdpZHRoID8gJzUwMHB4JyA6IHVuZGVmaW5lZCB9fT5cclxuICAgICAgICAgICAgPEZsZXhDb2x1bW4+XHJcbiAgICAgICAgICAgICAgPENhcHRpb25UZXh0IHNpemU9ezJ9IHZhcmlhdGlvbj1cImdyYXlcIj5cclxuICAgICAgICAgICAgICAgIHtjYXB0aW9ufVxyXG4gICAgICAgICAgICAgIDwvQ2FwdGlvblRleHQ+XHJcbiAgICAgICAgICAgICAgPEJvZHlUZXh0IHNpemU9ezN9IG1vbm90eXBlPXttb25vdHlwZX0gbGluZUhlaWdodD17bGluZUhlaWdodH0gc2NhbGU9e3NjYWxlfT5cclxuICAgICAgICAgICAgICAgIHt0aXRsZX1cclxuICAgICAgICAgICAgICA8L0JvZHlUZXh0PlxyXG4gICAgICAgICAgICA8L0ZsZXhDb2x1bW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1N0eWxlZFJlYWN0VG9vbHRpcD5cclxuICAgICAgPC8+XHJcbiAgICApO1xyXG4gIH1cclxuKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7XHJcbiJdfQ==