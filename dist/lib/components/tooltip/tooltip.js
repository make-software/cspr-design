import { __assign, __rest } from "tslib";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Tooltip as ReakitTooltip, TooltipReference, useTooltipState, } from 'reakit/Tooltip';
import styled from 'styled-components';
import BodyText from '../body-text/body-text';
import CaptionText from '../caption-text/caption-text';
import FlexColumn from '../flex-column/flex-column';
import { matchSize } from "../../utils/match-size";
var StyledReactTooltip = styled(ReakitTooltip)(function (_a) {
    var theme = _a.theme, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d;
    return ({
        zIndex: theme.zIndex.tooltip,
        color: theme.styleguideColors.contentPrimary,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        borderRadius: theme.borderRadius.base,
        padding: theme.padding[paddingScale],
        boxShadow: theme.boxShadow.tooltip,
        transition: 'opacity 250ms ease-in-out',
        opacity: 0,
        fontSize: matchSize({
            sm: '1.3rem',
            xs: '0.8125rem',
        }, scale),
        lineHeight: matchSize({
            sm: '1.5rem',
            xs: '1.25rem',
        }, lineHeight),
        '&[data-enter]': {
            opacity: 1,
        },
    });
});
export var Tooltip = React.forwardRef(function (_a, ref) {
    var children = _a.children, limitWidth = _a.limitWidth, title = _a.title, caption = _a.caption, monotype = _a.monotype, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d, props = __rest(_a, ["children", "limitWidth", "title", "caption", "monotype", "lineHeight", "scale", "paddingScale"]);
    var tooltip = useTooltipState({ animated: 250 });
    var maxWidth = limitWidth
        ? (typeof limitWidth === 'string' ? limitWidth : '500px')
        : undefined;
    if (children == null) {
        return null;
    }
    if (title == null) {
        return _jsx(_Fragment, { children: children });
    }
    return (_jsxs(_Fragment, { children: [_jsx(TooltipReference, __assign({}, tooltip, { ref: children.ref }, children.props, { children: function (referenceProps) { return React.cloneElement(children, referenceProps); } })), _jsx(StyledReactTooltip, __assign({ paddingScale: paddingScale }, tooltip, props, { children: _jsx("div", __assign({ style: { maxWidth: maxWidth } }, { children: _jsxs(FlexColumn, { children: [_jsx(CaptionText, __assign({ size: 2, variation: "gray" }, { children: caption })), _jsx(BodyText, __assign({ size: 3, monotype: monotype, lineHeight: lineHeight, scale: scale }, { children: title }))] }) })) }))] }));
});
export default Tooltip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFDTCxPQUFPLElBQUksYUFBYSxFQUN4QixnQkFBZ0IsRUFDaEIsZUFBZSxHQUNoQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBRXZDLE9BQU8sUUFBUSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZELE9BQU8sVUFBVSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQWlCakQsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQTBCLFVBQUMsRUFBNEQ7UUFBMUQsS0FBSyxXQUFBLEVBQUUsa0JBQWlCLEVBQWpCLFVBQVUsbUJBQUcsSUFBSSxLQUFBLEVBQUUsYUFBWSxFQUFaLEtBQUssbUJBQUcsSUFBSSxLQUFBLEVBQUUsb0JBQWdCLEVBQWhCLFlBQVksbUJBQUcsQ0FBQyxLQUFBO0lBQU8sT0FBQSxDQUFDO1FBQzNJLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU87UUFDNUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjO1FBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCO1FBQ3pELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDckMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87UUFFbEMsVUFBVSxFQUFFLDJCQUEyQjtRQUN2QyxPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxTQUFTLENBQ2hCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsV0FBVztTQUNsQixFQUNBLEtBQUssQ0FDUjtRQUNELFVBQVUsRUFBRSxTQUFTLENBQ2pCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsU0FBUztTQUNoQixFQUNELFVBQVUsQ0FDYjtRQUNELGVBQWUsRUFBRTtZQUNmLE9BQU8sRUFBRSxDQUFDO1NBQ1g7S0FDRixDQUFDO0FBM0IwSSxDQTJCMUksQ0FBQyxDQUFDO0FBRUosTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQ3JDLFVBQUMsRUFBK0csRUFBRSxHQUFHO0lBQWxILElBQUEsUUFBUSxjQUFBLEVBQUUsVUFBVSxnQkFBQSxFQUFFLEtBQUssV0FBQSxFQUFFLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLGtCQUFpQixFQUFqQixVQUFVLG1CQUFHLElBQUksS0FBQSxFQUFFLGFBQVksRUFBWixLQUFLLG1CQUFHLElBQUksS0FBQSxFQUFFLG9CQUFnQixFQUFoQixZQUFZLG1CQUFHLENBQUMsS0FBQSxFQUFLLEtBQUssY0FBN0csaUdBQStHLENBQUY7SUFDNUcsSUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbkQsSUFBTSxRQUFRLEdBQUcsVUFBVTtRQUN6QixDQUFDLENBQUMsQ0FBQyxPQUFPLFVBQVUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFZCxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtRQUNqQixPQUFPLDRCQUFHLFFBQVEsR0FBSSxDQUFDO0tBQ3hCO0lBRUQsT0FBTyxDQUNMLDhCQUNFLEtBQUMsZ0JBQWdCLGVBQUssT0FBTyxJQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyxJQUFNLFFBQVEsQ0FBQyxLQUFLLGNBQ2pFLFVBQUMsY0FBYyxJQUFLLE9BQUEsS0FBSyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLEVBQTVDLENBQTRDLElBQ2hELEVBQ25CLEtBQUMsa0JBQWtCLGFBQUMsWUFBWSxFQUFFLFlBQVksSUFBTSxPQUFPLEVBQU0sS0FBSyxjQUNwRSx1QkFBSyxLQUFLLEVBQUUsRUFBRSxRQUFRLFVBQUEsRUFBRSxnQkFDdEIsTUFBQyxVQUFVLGVBQ1QsS0FBQyxXQUFXLGFBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFDbkMsT0FBTyxJQUNJLEVBQ2QsS0FBQyxRQUFRLGFBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEtBQUssZ0JBQ3hFLEtBQUssSUFDRyxJQUNBLElBQ1QsSUFDYSxJQUNwQixDQUNKLENBQUM7QUFDSixDQUFDLENBQ0YsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFRvb2x0aXAgYXMgUmVha2l0VG9vbHRpcCxcbiAgVG9vbHRpcFJlZmVyZW5jZSxcbiAgdXNlVG9vbHRpcFN0YXRlLFxufSBmcm9tICdyZWFraXQvVG9vbHRpcCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJhc2VQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCBCb2R5VGV4dCBmcm9tICcuLi9ib2R5LXRleHQvYm9keS10ZXh0JztcbmltcG9ydCBDYXB0aW9uVGV4dCBmcm9tICcuLi9jYXB0aW9uLXRleHQvY2FwdGlvbi10ZXh0JztcbmltcG9ydCBGbGV4Q29sdW1uIGZyb20gJy4uL2ZsZXgtY29sdW1uL2ZsZXgtY29sdW1uJztcbmltcG9ydCB7bWF0Y2hTaXplfSBmcm9tIFwiLi4vLi4vdXRpbHMvbWF0Y2gtc2l6ZVwiO1xuXG50eXBlIFJlZiA9IEhUTUxEaXZFbGVtZW50O1xuXG50eXBlIFN0eWxlZFJlYWN0VG9vbHRpcFByb3BzID0ge1xuICAgIGxpbmVIZWlnaHQ/OiAneHMnIHwgJ3NtJztcbiAgICBzY2FsZT86ICd4cycgfCAnc20nO1xuICAgIHBhZGRpbmdTY2FsZT86IDEgfCAyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvb2x0aXBQcm9wcyBleHRlbmRzIEJhc2VQcm9wcyB7XG4gIHRpdGxlPzogSlNYLkVsZW1lbnQgfCBzdHJpbmcgfCBudWxsO1xuICBjYXB0aW9uPzogc3RyaW5nIHwgbnVsbDtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdEVsZW1lbnQ8YW55PiAmIGFueTtcbiAgbW9ub3R5cGU/OiBib29sZWFuO1xuICBsaW1pdFdpZHRoPzogYm9vbGVhbiB8IHN0cmluZztcbn1cbmNvbnN0IFN0eWxlZFJlYWN0VG9vbHRpcCA9IHN0eWxlZChSZWFraXRUb29sdGlwKTxTdHlsZWRSZWFjdFRvb2x0aXBQcm9wcz4oKHsgdGhlbWUsIGxpbmVIZWlnaHQgPSAnc20nLCBzY2FsZSA9ICdzbScsIHBhZGRpbmdTY2FsZSA9IDIgfSkgPT4gKHtcbiAgekluZGV4OiB0aGVtZS56SW5kZXgudG9vbHRpcCxcbiAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFByaW1hcnksXG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kUHJpbWFyeSxcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuYmFzZSxcbiAgcGFkZGluZzogdGhlbWUucGFkZGluZ1twYWRkaW5nU2NhbGVdLFxuICBib3hTaGFkb3c6IHRoZW1lLmJveFNoYWRvdy50b29sdGlwLFxuXG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IDI1MG1zIGVhc2UtaW4tb3V0JyxcbiAgb3BhY2l0eTogMCxcbiAgZm9udFNpemU6IG1hdGNoU2l6ZShcbiAgICAge1xuICAgICAgICAgc206ICcxLjNyZW0nLFxuICAgICAgICAgeHM6ICcwLjgxMjVyZW0nLFxuICAgICB9LFxuICAgICAgc2NhbGVcbiAgKSxcbiAgbGluZUhlaWdodDogbWF0Y2hTaXplKFxuICAgICAge1xuICAgICAgICAgIHNtOiAnMS41cmVtJyxcbiAgICAgICAgICB4czogJzEuMjVyZW0nLFxuICAgICAgfSxcbiAgICAgIGxpbmVIZWlnaHRcbiAgKSxcbiAgJyZbZGF0YS1lbnRlcl0nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgfSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFRvb2x0aXAgPSBSZWFjdC5mb3J3YXJkUmVmPFJlZiwgVG9vbHRpcFByb3BzICYgU3R5bGVkUmVhY3RUb29sdGlwUHJvcHM+KFxuICAoeyBjaGlsZHJlbiwgbGltaXRXaWR0aCwgdGl0bGUsIGNhcHRpb24sIG1vbm90eXBlLCBsaW5lSGVpZ2h0ID0gJ3NtJywgc2NhbGUgPSAnc20nLCBwYWRkaW5nU2NhbGUgPSAyLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgICBjb25zdCB0b29sdGlwID0gdXNlVG9vbHRpcFN0YXRlKHsgYW5pbWF0ZWQ6IDI1MCB9KTtcbiAgICBjb25zdCBtYXhXaWR0aCA9IGxpbWl0V2lkdGggXG4gICAgICA/ICh0eXBlb2YgbGltaXRXaWR0aCA9PT0gJ3N0cmluZycgPyBsaW1pdFdpZHRoIDogJzUwMHB4JylcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aXRsZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8VG9vbHRpcFJlZmVyZW5jZSB7Li4udG9vbHRpcH0gcmVmPXtjaGlsZHJlbi5yZWZ9IHsuLi5jaGlsZHJlbi5wcm9wc30+XG4gICAgICAgICAgeyhyZWZlcmVuY2VQcm9wcykgPT4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCByZWZlcmVuY2VQcm9wcyl9XG4gICAgICAgIDwvVG9vbHRpcFJlZmVyZW5jZT5cbiAgICAgICAgPFN0eWxlZFJlYWN0VG9vbHRpcCBwYWRkaW5nU2NhbGU9e3BhZGRpbmdTY2FsZX0gey4uLnRvb2x0aXB9IHsuLi5wcm9wc30+XG4gICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXhXaWR0aCB9fT5cbiAgICAgICAgICAgIDxGbGV4Q29sdW1uPlxuICAgICAgICAgICAgICA8Q2FwdGlvblRleHQgc2l6ZT17Mn0gdmFyaWF0aW9uPVwiZ3JheVwiPlxuICAgICAgICAgICAgICAgIHtjYXB0aW9ufVxuICAgICAgICAgICAgICA8L0NhcHRpb25UZXh0PlxuICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30gbW9ub3R5cGU9e21vbm90eXBlfSBsaW5lSGVpZ2h0PXtsaW5lSGVpZ2h0fSBzY2FsZT17c2NhbGV9PlxuICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgPC9Cb2R5VGV4dD5cbiAgICAgICAgICAgIDwvRmxleENvbHVtbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRSZWFjdFRvb2x0aXA+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwO1xuIl19