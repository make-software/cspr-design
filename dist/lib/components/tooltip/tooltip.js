import { __assign, __rest } from "tslib";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Tooltip as ReakitTooltip, TooltipReference, useTooltipState, } from 'reakit/Tooltip';
import styled from 'styled-components';
import BodyText from '../body-text/body-text';
import CaptionText from '../caption-text/caption-text';
import FlexColumn from '../flex-column/flex-column';
import { matchSize } from "../../utils/match-size";
var StyledReactTooltip = styled(ReakitTooltip)(function (_a) {
    var theme = _a.theme, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d;
    return ({
        zIndex: theme.zIndex.tooltip,
        color: theme.styleguideColors.contentPrimary,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        borderRadius: theme.borderRadius.base,
        padding: theme.padding[paddingScale],
        boxShadow: theme.boxShadow.tooltip,
        transition: 'opacity 250ms ease-in-out',
        opacity: 0,
        fontSize: matchSize({
            sm: '1.3rem',
            xs: '0.8125rem',
        }, scale),
        lineHeight: matchSize({
            sm: '1.5rem',
            xs: '1.25rem',
        }, lineHeight),
        '&[data-enter]': {
            opacity: 1,
        },
    });
});
export var Tooltip = React.forwardRef(function (_a, ref) {
    var children = _a.children, limitWidth = _a.limitWidth, title = _a.title, caption = _a.caption, monotype = _a.monotype, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d, props = __rest(_a, ["children", "limitWidth", "title", "caption", "monotype", "lineHeight", "scale", "paddingScale"]);
    var tooltip = useTooltipState({ animated: 250 });
    if (children == null) {
        return null;
    }
    if (title == null) {
        return _jsx(_Fragment, { children: children });
    }
    return (_jsxs(_Fragment, { children: [_jsx(TooltipReference, __assign({}, tooltip, { ref: children.ref }, children.props, { children: function (referenceProps) { return React.cloneElement(children, referenceProps); } })), _jsx(StyledReactTooltip, __assign({ paddingScale: paddingScale }, tooltip, props, { children: _jsx("div", __assign({ style: { maxWidth: limitWidth ? '500px' : undefined } }, { children: _jsxs(FlexColumn, { children: [_jsx(CaptionText, __assign({ size: 2, variation: "gray" }, { children: caption })), _jsx(BodyText, __assign({ size: 3, monotype: monotype, lineHeight: lineHeight, scale: scale }, { children: title }))] }) })) }))] }));
});
export default Tooltip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFDTCxPQUFPLElBQUksYUFBYSxFQUN4QixnQkFBZ0IsRUFDaEIsZUFBZSxHQUNoQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBRXZDLE9BQU8sUUFBUSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZELE9BQU8sVUFBVSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQWlCakQsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQTBCLFVBQUMsRUFBNEQ7UUFBMUQsS0FBSyxXQUFBLEVBQUUsa0JBQWlCLEVBQWpCLFVBQVUsbUJBQUcsSUFBSSxLQUFBLEVBQUUsYUFBWSxFQUFaLEtBQUssbUJBQUcsSUFBSSxLQUFBLEVBQUUsb0JBQWdCLEVBQWhCLFlBQVksbUJBQUcsQ0FBQyxLQUFBO0lBQU8sT0FBQSxDQUFDO1FBQzNJLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU87UUFDNUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjO1FBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCO1FBQ3pELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDckMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87UUFFbEMsVUFBVSxFQUFFLDJCQUEyQjtRQUN2QyxPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxTQUFTLENBQ2hCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsV0FBVztTQUNsQixFQUNBLEtBQUssQ0FDUjtRQUNELFVBQVUsRUFBRSxTQUFTLENBQ2pCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsU0FBUztTQUNoQixFQUNELFVBQVUsQ0FDYjtRQUNELGVBQWUsRUFBRTtZQUNmLE9BQU8sRUFBRSxDQUFDO1NBQ1g7S0FDRixDQUFDO0FBM0IwSSxDQTJCMUksQ0FBQyxDQUFDO0FBRUosTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQ3JDLFVBQUMsRUFBK0csRUFBRSxHQUFHO0lBQWxILElBQUEsUUFBUSxjQUFBLEVBQUUsVUFBVSxnQkFBQSxFQUFFLEtBQUssV0FBQSxFQUFFLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLGtCQUFpQixFQUFqQixVQUFVLG1CQUFHLElBQUksS0FBQSxFQUFFLGFBQVksRUFBWixLQUFLLG1CQUFHLElBQUksS0FBQSxFQUFFLG9CQUFnQixFQUFoQixZQUFZLG1CQUFHLENBQUMsS0FBQSxFQUFLLEtBQUssY0FBN0csaUdBQStHLENBQUY7SUFDNUcsSUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFbkQsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDakIsT0FBTyw0QkFBRyxRQUFRLEdBQUksQ0FBQztLQUN4QjtJQUVELE9BQU8sQ0FDTCw4QkFDRSxLQUFDLGdCQUFnQixlQUFLLE9BQU8sSUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsSUFBTSxRQUFRLENBQUMsS0FBSyxjQUNqRSxVQUFDLGNBQWMsSUFBSyxPQUFBLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxFQUE1QyxDQUE0QyxJQUNoRCxFQUNuQixLQUFDLGtCQUFrQixhQUFDLFlBQVksRUFBRSxZQUFZLElBQU0sT0FBTyxFQUFNLEtBQUssY0FDcEUsdUJBQUssS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsZ0JBQ3hELE1BQUMsVUFBVSxlQUNULEtBQUMsV0FBVyxhQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQ25DLE9BQU8sSUFDSSxFQUNkLEtBQUMsUUFBUSxhQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxLQUFLLGdCQUN4RSxLQUFLLElBQ0csSUFDQSxJQUNULElBQ2EsSUFDcEIsQ0FDSixDQUFDO0FBQ0osQ0FBQyxDQUNGLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBUb29sdGlwIGFzIFJlYWtpdFRvb2x0aXAsXG4gIFRvb2x0aXBSZWZlcmVuY2UsXG4gIHVzZVRvb2x0aXBTdGF0ZSxcbn0gZnJvbSAncmVha2l0L1Rvb2x0aXAnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCYXNlUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgQm9keVRleHQgZnJvbSAnLi4vYm9keS10ZXh0L2JvZHktdGV4dCc7XG5pbXBvcnQgQ2FwdGlvblRleHQgZnJvbSAnLi4vY2FwdGlvbi10ZXh0L2NhcHRpb24tdGV4dCc7XG5pbXBvcnQgRmxleENvbHVtbiBmcm9tICcuLi9mbGV4LWNvbHVtbi9mbGV4LWNvbHVtbic7XG5pbXBvcnQge21hdGNoU2l6ZX0gZnJvbSBcIi4uLy4uL3V0aWxzL21hdGNoLXNpemVcIjtcblxudHlwZSBSZWYgPSBIVE1MRGl2RWxlbWVudDtcblxudHlwZSBTdHlsZWRSZWFjdFRvb2x0aXBQcm9wcyA9IHtcbiAgICBsaW5lSGVpZ2h0PzogJ3hzJyB8ICdzbSc7XG4gICAgc2NhbGU/OiAneHMnIHwgJ3NtJztcbiAgICBwYWRkaW5nU2NhbGU/OiAxIHwgMjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb29sdGlwUHJvcHMgZXh0ZW5kcyBCYXNlUHJvcHMge1xuICB0aXRsZT86IEpTWC5FbGVtZW50IHwgc3RyaW5nIHwgbnVsbDtcbiAgY2FwdGlvbj86IHN0cmluZyB8IG51bGw7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3RFbGVtZW50PGFueT4gJiBhbnk7XG4gIG1vbm90eXBlPzogYm9vbGVhbjtcbiAgbGltaXRXaWR0aD86IGJvb2xlYW47XG59XG5jb25zdCBTdHlsZWRSZWFjdFRvb2x0aXAgPSBzdHlsZWQoUmVha2l0VG9vbHRpcCk8U3R5bGVkUmVhY3RUb29sdGlwUHJvcHM+KCh7IHRoZW1lLCBsaW5lSGVpZ2h0ID0gJ3NtJywgc2NhbGUgPSAnc20nLCBwYWRkaW5nU2NhbGUgPSAyIH0pID0+ICh7XG4gIHpJbmRleDogdGhlbWUuekluZGV4LnRvb2x0aXAsXG4gIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRQcmltYXJ5LFxuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuYmFja2dyb3VuZFByaW1hcnksXG4gIGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmJhc2UsXG4gIHBhZGRpbmc6IHRoZW1lLnBhZGRpbmdbcGFkZGluZ1NjYWxlXSxcbiAgYm94U2hhZG93OiB0aGVtZS5ib3hTaGFkb3cudG9vbHRpcCxcblxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAyNTBtcyBlYXNlLWluLW91dCcsXG4gIG9wYWNpdHk6IDAsXG4gIGZvbnRTaXplOiBtYXRjaFNpemUoXG4gICAgIHtcbiAgICAgICAgIHNtOiAnMS4zcmVtJyxcbiAgICAgICAgIHhzOiAnMC44MTI1cmVtJyxcbiAgICAgfSxcbiAgICAgIHNjYWxlXG4gICksXG4gIGxpbmVIZWlnaHQ6IG1hdGNoU2l6ZShcbiAgICAgIHtcbiAgICAgICAgICBzbTogJzEuNXJlbScsXG4gICAgICAgICAgeHM6ICcxLjI1cmVtJyxcbiAgICAgIH0sXG4gICAgICBsaW5lSGVpZ2h0XG4gICksXG4gICcmW2RhdGEtZW50ZXJdJzoge1xuICAgIG9wYWNpdHk6IDEsXG4gIH0sXG59KSk7XG5cbmV4cG9ydCBjb25zdCBUb29sdGlwID0gUmVhY3QuZm9yd2FyZFJlZjxSZWYsIFRvb2x0aXBQcm9wcyAmIFN0eWxlZFJlYWN0VG9vbHRpcFByb3BzPihcbiAgKHsgY2hpbGRyZW4sIGxpbWl0V2lkdGgsIHRpdGxlLCBjYXB0aW9uLCBtb25vdHlwZSwgbGluZUhlaWdodCA9ICdzbScsIHNjYWxlID0gJ3NtJywgcGFkZGluZ1NjYWxlID0gMiwgLi4ucHJvcHMgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgdG9vbHRpcCA9IHVzZVRvb2x0aXBTdGF0ZSh7IGFuaW1hdGVkOiAyNTAgfSk7XG5cbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRpdGxlID09IG51bGwpIHtcbiAgICAgIHJldHVybiA8PntjaGlsZHJlbn08Lz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sdGlwUmVmZXJlbmNlIHsuLi50b29sdGlwfSByZWY9e2NoaWxkcmVuLnJlZn0gey4uLmNoaWxkcmVuLnByb3BzfT5cbiAgICAgICAgICB7KHJlZmVyZW5jZVByb3BzKSA9PiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHJlZmVyZW5jZVByb3BzKX1cbiAgICAgICAgPC9Ub29sdGlwUmVmZXJlbmNlPlxuICAgICAgICA8U3R5bGVkUmVhY3RUb29sdGlwIHBhZGRpbmdTY2FsZT17cGFkZGluZ1NjYWxlfSB7Li4udG9vbHRpcH0gey4uLnByb3BzfT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1heFdpZHRoOiBsaW1pdFdpZHRoID8gJzUwMHB4JyA6IHVuZGVmaW5lZCB9fT5cbiAgICAgICAgICAgIDxGbGV4Q29sdW1uPlxuICAgICAgICAgICAgICA8Q2FwdGlvblRleHQgc2l6ZT17Mn0gdmFyaWF0aW9uPVwiZ3JheVwiPlxuICAgICAgICAgICAgICAgIHtjYXB0aW9ufVxuICAgICAgICAgICAgICA8L0NhcHRpb25UZXh0PlxuICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30gbW9ub3R5cGU9e21vbm90eXBlfSBsaW5lSGVpZ2h0PXtsaW5lSGVpZ2h0fSBzY2FsZT17c2NhbGV9PlxuICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgPC9Cb2R5VGV4dD5cbiAgICAgICAgICAgIDwvRmxleENvbHVtbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRSZWFjdFRvb2x0aXA+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwO1xuIl19