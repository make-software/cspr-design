import { __assign, __rest } from "tslib";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Tooltip as ReakitTooltip, TooltipReference, useTooltipState, } from 'reakit/Tooltip';
import styled from 'styled-components';
import BodyText from '../body-text/body-text';
import CaptionText from '../caption-text/caption-text';
import FlexColumn from '../flex-column/flex-column';
import { matchSize } from "../../utils/match-size";
var StyledReactTooltip = styled(ReakitTooltip)(function (_a) {
    var theme = _a.theme, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, _d = _a.paddingScale, paddingScale = _d === void 0 ? 2 : _d;
    return ({
        zIndex: theme.zIndex.tooltip,
        color: theme.styleguideColors.contentPrimary,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        borderRadius: theme.borderRadius.base,
        padding: theme.padding[paddingScale],
        boxShadow: theme.boxShadow.tooltip,
        transition: 'opacity 250ms ease-in-out',
        opacity: 0,
        fontSize: matchSize({
            sm: '1.3rem',
            xs: '0.8125rem',
        }, scale),
        lineHeight: matchSize({
            sm: '1.5rem',
            xs: '1.25rem',
        }, lineHeight),
        '&[data-enter]': {
            opacity: 1,
        },
    });
});
export var Tooltip = React.forwardRef(function (_a, ref) {
    var children = _a.children, limitWidth = _a.limitWidth, title = _a.title, caption = _a.caption, monotype = _a.monotype, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c, props = __rest(_a, ["children", "limitWidth", "title", "caption", "monotype", "lineHeight", "scale"]);
    var tooltip = useTooltipState({ animated: 250 });
    if (children == null) {
        return null;
    }
    if (title == null) {
        return _jsx(_Fragment, { children: children });
    }
    return (_jsxs(_Fragment, { children: [_jsx(TooltipReference, __assign({}, tooltip, { ref: children.ref }, children.props, { children: function (referenceProps) { return React.cloneElement(children, referenceProps); } })), _jsx(StyledReactTooltip, __assign({}, tooltip, props, { children: _jsx("div", __assign({ style: { maxWidth: limitWidth ? '500px' : undefined } }, { children: _jsxs(FlexColumn, { children: [_jsx(CaptionText, __assign({ size: 2, variation: "gray" }, { children: caption })), _jsx(BodyText, __assign({ size: 3, monotype: monotype, lineHeight: lineHeight, scale: scale }, { children: title }))] }) })) }))] }));
});
export default Tooltip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFDTCxPQUFPLElBQUksYUFBYSxFQUN4QixnQkFBZ0IsRUFDaEIsZUFBZSxHQUNoQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBRXZDLE9BQU8sUUFBUSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZELE9BQU8sVUFBVSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQWlCakQsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQTBCLFVBQUMsRUFBNEQ7UUFBMUQsS0FBSyxXQUFBLEVBQUUsa0JBQWlCLEVBQWpCLFVBQVUsbUJBQUcsSUFBSSxLQUFBLEVBQUUsYUFBWSxFQUFaLEtBQUssbUJBQUcsSUFBSSxLQUFBLEVBQUUsb0JBQWdCLEVBQWhCLFlBQVksbUJBQUcsQ0FBQyxLQUFBO0lBQU8sT0FBQSxDQUFDO1FBQzNJLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU87UUFDNUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjO1FBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCO1FBQ3pELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDckMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87UUFFbEMsVUFBVSxFQUFFLDJCQUEyQjtRQUN2QyxPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxTQUFTLENBQ2hCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsV0FBVztTQUNsQixFQUNBLEtBQUssQ0FDUjtRQUNELFVBQVUsRUFBRSxTQUFTLENBQ2pCO1lBQ0ksRUFBRSxFQUFFLFFBQVE7WUFDWixFQUFFLEVBQUUsU0FBUztTQUNoQixFQUNELFVBQVUsQ0FDYjtRQUNELGVBQWUsRUFBRTtZQUNmLE9BQU8sRUFBRSxDQUFDO1NBQ1g7S0FDRixDQUFDO0FBM0IwSSxDQTJCMUksQ0FBQyxDQUFDO0FBRUosTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQ3JDLFVBQUMsRUFBNkYsRUFBRSxHQUFHO0lBQWhHLElBQUEsUUFBUSxjQUFBLEVBQUUsVUFBVSxnQkFBQSxFQUFFLEtBQUssV0FBQSxFQUFFLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLGtCQUFpQixFQUFqQixVQUFVLG1CQUFHLElBQUksS0FBQSxFQUFFLGFBQVksRUFBWixLQUFLLG1CQUFHLElBQUksS0FBQSxFQUFLLEtBQUssY0FBM0YsaUZBQTZGLENBQUY7SUFDMUYsSUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFbkQsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDakIsT0FBTyw0QkFBRyxRQUFRLEdBQUksQ0FBQztLQUN4QjtJQUVELE9BQU8sQ0FDTCw4QkFDRSxLQUFDLGdCQUFnQixlQUFLLE9BQU8sSUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsSUFBTSxRQUFRLENBQUMsS0FBSyxjQUNqRSxVQUFDLGNBQWMsSUFBSyxPQUFBLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxFQUE1QyxDQUE0QyxJQUNoRCxFQUNuQixLQUFDLGtCQUFrQixlQUFLLE9BQU8sRUFBTSxLQUFLLGNBQ3hDLHVCQUFLLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLGdCQUN4RCxNQUFDLFVBQVUsZUFDVCxLQUFDLFdBQVcsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUNuQyxPQUFPLElBQ0ksRUFDZCxLQUFDLFFBQVEsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxnQkFDeEUsS0FBSyxJQUNHLElBQ0EsSUFDVCxJQUNhLElBQ3BCLENBQ0osQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgVG9vbHRpcCBhcyBSZWFraXRUb29sdGlwLFxuICBUb29sdGlwUmVmZXJlbmNlLFxuICB1c2VUb29sdGlwU3RhdGUsXG59IGZyb20gJ3JlYWtpdC9Ub29sdGlwJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQmFzZVByb3BzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IEJvZHlUZXh0IGZyb20gJy4uL2JvZHktdGV4dC9ib2R5LXRleHQnO1xuaW1wb3J0IENhcHRpb25UZXh0IGZyb20gJy4uL2NhcHRpb24tdGV4dC9jYXB0aW9uLXRleHQnO1xuaW1wb3J0IEZsZXhDb2x1bW4gZnJvbSAnLi4vZmxleC1jb2x1bW4vZmxleC1jb2x1bW4nO1xuaW1wb3J0IHttYXRjaFNpemV9IGZyb20gXCIuLi8uLi91dGlscy9tYXRjaC1zaXplXCI7XG5cbnR5cGUgUmVmID0gSFRNTERpdkVsZW1lbnQ7XG5cbnR5cGUgU3R5bGVkUmVhY3RUb29sdGlwUHJvcHMgPSB7XG4gICAgbGluZUhlaWdodD86ICd4cycgfCAnc20nO1xuICAgIHNjYWxlPzogJ3hzJyB8ICdzbSc7XG4gICAgcGFkZGluZ1NjYWxlPzogMSB8IDI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbHRpcFByb3BzIGV4dGVuZHMgQmFzZVByb3BzIHtcbiAgdGl0bGU/OiBKU1guRWxlbWVudCB8IHN0cmluZyB8IG51bGw7XG4gIGNhcHRpb24/OiBzdHJpbmcgfCBudWxsO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+ICYgYW55O1xuICBtb25vdHlwZT86IGJvb2xlYW47XG4gIGxpbWl0V2lkdGg/OiBib29sZWFuO1xufVxuY29uc3QgU3R5bGVkUmVhY3RUb29sdGlwID0gc3R5bGVkKFJlYWtpdFRvb2x0aXApPFN0eWxlZFJlYWN0VG9vbHRpcFByb3BzPigoeyB0aGVtZSwgbGluZUhlaWdodCA9ICdzbScsIHNjYWxlID0gJ3NtJywgcGFkZGluZ1NjYWxlID0gMiB9KSA9PiAoe1xuICB6SW5kZXg6IHRoZW1lLnpJbmRleC50b29sdGlwLFxuICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50UHJpbWFyeSxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmJhY2tncm91bmRQcmltYXJ5LFxuICBib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5iYXNlLFxuICBwYWRkaW5nOiB0aGVtZS5wYWRkaW5nW3BhZGRpbmdTY2FsZV0sXG4gIGJveFNoYWRvdzogdGhlbWUuYm94U2hhZG93LnRvb2x0aXAsXG5cbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjUwbXMgZWFzZS1pbi1vdXQnLFxuICBvcGFjaXR5OiAwLFxuICBmb250U2l6ZTogbWF0Y2hTaXplKFxuICAgICB7XG4gICAgICAgICBzbTogJzEuM3JlbScsXG4gICAgICAgICB4czogJzAuODEyNXJlbScsXG4gICAgIH0sXG4gICAgICBzY2FsZVxuICApLFxuICBsaW5lSGVpZ2h0OiBtYXRjaFNpemUoXG4gICAgICB7XG4gICAgICAgICAgc206ICcxLjVyZW0nLFxuICAgICAgICAgIHhzOiAnMS4yNXJlbScsXG4gICAgICB9LFxuICAgICAgbGluZUhlaWdodFxuICApLFxuICAnJltkYXRhLWVudGVyXSc6IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufSkpO1xuXG5leHBvcnQgY29uc3QgVG9vbHRpcCA9IFJlYWN0LmZvcndhcmRSZWY8UmVmLCBUb29sdGlwUHJvcHMgJiBTdHlsZWRSZWFjdFRvb2x0aXBQcm9wcz4oXG4gICh7IGNoaWxkcmVuLCBsaW1pdFdpZHRoLCB0aXRsZSwgY2FwdGlvbiwgbW9ub3R5cGUsIGxpbmVIZWlnaHQgPSAnc20nLCBzY2FsZSA9ICdzbScsIC4uLnByb3BzIH0sIHJlZikgPT4ge1xuICAgIGNvbnN0IHRvb2x0aXAgPSB1c2VUb29sdGlwU3RhdGUoeyBhbmltYXRlZDogMjUwIH0pO1xuXG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aXRsZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8VG9vbHRpcFJlZmVyZW5jZSB7Li4udG9vbHRpcH0gcmVmPXtjaGlsZHJlbi5yZWZ9IHsuLi5jaGlsZHJlbi5wcm9wc30+XG4gICAgICAgICAgeyhyZWZlcmVuY2VQcm9wcykgPT4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCByZWZlcmVuY2VQcm9wcyl9XG4gICAgICAgIDwvVG9vbHRpcFJlZmVyZW5jZT5cbiAgICAgICAgPFN0eWxlZFJlYWN0VG9vbHRpcCB7Li4udG9vbHRpcH0gey4uLnByb3BzfT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1heFdpZHRoOiBsaW1pdFdpZHRoID8gJzUwMHB4JyA6IHVuZGVmaW5lZCB9fT5cbiAgICAgICAgICAgIDxGbGV4Q29sdW1uPlxuICAgICAgICAgICAgICA8Q2FwdGlvblRleHQgc2l6ZT17Mn0gdmFyaWF0aW9uPVwiZ3JheVwiPlxuICAgICAgICAgICAgICAgIHtjYXB0aW9ufVxuICAgICAgICAgICAgICA8L0NhcHRpb25UZXh0PlxuICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30gbW9ub3R5cGU9e21vbm90eXBlfSBsaW5lSGVpZ2h0PXtsaW5lSGVpZ2h0fSBzY2FsZT17c2NhbGV9PlxuICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgPC9Cb2R5VGV4dD5cbiAgICAgICAgICAgIDwvRmxleENvbHVtbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRSZWFjdFRvb2x0aXA+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwO1xuIl19