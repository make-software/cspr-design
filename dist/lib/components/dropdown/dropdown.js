import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect } from 'react';
import Downshift, { useMultipleSelection, useSelect } from 'downshift';
import styled from 'styled-components';
import isEqual from 'fast-deep-equal';
import BodyText from '../body-text/body-text';
import FlexRow from '../flex-row/flex-row';
import SvgIcon from '../svg-icon/svg-icon';
import FlexColumn from '../flex-column/flex-column';
import { InputInteractionType, useGetInputInteractionType } from "../../utils/input-interaction-type";
import UpIcon from '../../assets/icons/ic-arrow-up.svg';
import DownIcon from '../../assets/icons/ic-arrow-down.svg';
import CheckmarkIcon from '../../assets/icons/ic-checkmark.svg';
import DeleteIcon from '../../assets/icons/ic-delete.svg';
var StyledDropdown = styled.div(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, isFixedDropdown = _a.isFixedDropdown;
    return (__assign({ outline: 'none', position: isFixedDropdown ? 'relative' : 'unset' }, (disabled && {
        opacity: '0.5',
        pointerEvents: 'none',
    })));
});
var Container = styled(FlexRow)(function (_a) {
    var theme = _a.theme, isOpen = _a.isOpen;
    return ({
        borderRadius: theme.borderRadius.base,
        border: 'none',
        height: 36,
        padding: '0 16px',
        background: theme.styleguideColors.fillSecondary,
        ':hover, :active': {
            background: theme.styleguideColors.fillSecondary,
            svg: {
                color: theme.styleguideColors.fillPrimaryRed,
            },
        },
    });
});
var ItemsContainer = styled.div(function (_a) {
    var theme = _a.theme, isOpen = _a.isOpen, isFixedDropdown = _a.isFixedDropdown;
    return (__assign({ display: isOpen ? 'inherit' : 'none', marginTop: 4, borderRadius: theme.borderRadius.base, background: theme.styleguideColors.fillSecondary }, (isFixedDropdown && {
        position: 'absolute',
        top: '60px',
        width: '100%',
        zIndex: 1,
    })));
});
var ItemContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme, isHighlighted = _a.isHighlighted;
    return (__assign({ cursor: 'pointer', minHeight: 36, padding: '8px 16px', ':hover, :active': {
            background: theme.styleguideColors.fillSecondaryBlueHover,
            fontWeight: 600,
        } }, (isHighlighted && {
        '&:not(:hover)': {
            border: "1px solid ".concat(theme.styleguideColors.contentBlue),
            borderRadius: theme.borderRadius.base,
        },
    })));
});
var DeleteSvgIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentSecondary,
        },
        ':hover, :active': {
            path: {
                stroke: theme.styleguideColors.fillPrimaryRed,
            },
        },
    });
});
var ClearSvgIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentPrimary,
        },
    });
});
var MultiSelectContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        borderRadius: theme.borderRadius.base,
        padding: '8px',
        background: theme.styleguideColors.fillSecondary,
        ':hover, :active': {
            svg: {
                color: theme.styleguideColors.fillPrimaryRed,
            },
        },
    });
});
var PlaceholderWrapper = styled.span(function (_a) {
    var theme = _a.theme;
    return ({
        padding: '0 8px',
    });
});
var ChipItemContainer = styled.span(function (_a) {
    var theme = _a.theme;
    return ({
        borderRadius: theme.borderRadius.base,
        cursor: 'pointer',
        padding: '2px 8px',
        background: theme.styleguideColors.fillTertriary,
        color: theme.styleguideColors.contentPrimary,
    });
});
var OverflowWrapper = styled.span(function (_a) {
    var theme = _a.theme;
    return ({
        overflow: 'hidden',
        whiteSpace: 'nowrap',
        textOverflow: 'ellipsis',
    });
});
var DropdownIconWrapper = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        paddingRight: '8px',
        marginLeft: '8px',
    });
});
var CheckIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            fill: theme.styleguideColors.contentBlue,
        },
    });
});
var MultiSelectDeleteIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentBlue,
        },
        ':hover, :active': {
            path: {
                stroke: theme.styleguideColors.contentRed,
            },
        },
    });
});
var getChangeEvent = function (value) {
    return {
        target: {
            name: undefined,
            value: value,
        },
    };
};
export function Dropdown(props) {
    var id = props.id, items = props.items, placeholder = props.placeholder, label = props.label, areItemsRemovable = props.areItemsRemovable, value = props.value, style = props.style, onSelect = props.onSelect, onRemove = props.onRemove, _a = props.noItemsMessage, noItemsMessage = _a === void 0 ? 'No Options!' : _a, _b = props.isFixedDropdown, isFixedDropdown = _b === void 0 ? false : _b;
    var getChangeEvent = function (value) {
        return {
            target: {
                name: undefined,
                value: value,
            },
        };
    };
    var handleRemoveItem = function (item, ev, downshift) {
        ev.preventDefault();
        ev.stopPropagation();
        var value = item && itemValueGetter(item);
        onRemove && onRemove(getChangeEvent(value));
    };
    var itemValueGetter = function (item) { return item.value; };
    var itemNameGetter = function (item) { return item.label; };
    var handleItemSelect = function (item) {
        onSelect && onSelect(item);
    };
    var getItemToString = function (item) {
        if (item === null)
            return '';
        return typeof item === 'string' ? item : item.label;
    };
    var inputInteractionTypeRef = useGetInputInteractionType();
    return (_jsx(Downshift, __assign({ itemToString: getItemToString, onSelect: handleItemSelect, selectedItem: value, selectedItemChanged: function (prevItem, item) { return !isEqual(prevItem, item); } }, { children: function (downshift) {
            var getItemProps = downshift.getItemProps, getMenuProps = downshift.getMenuProps, isOpen = downshift.isOpen, selectedItem = downshift.selectedItem, getRootProps = downshift.getRootProps, getToggleButtonProps = downshift.getToggleButtonProps, highlightedIndex = downshift.highlightedIndex;
            var noItems = !(items && items.length);
            var handleFocus = function (ev) {
                !isOpen && downshift.openMenu();
            };
            return (_jsxs(StyledDropdown, __assign({}, getRootProps({ refKey: 'innerRef' }), { style: style, isFixedDropdown: isFixedDropdown }, { children: [label && (_jsx(BodyText, __assign({ lineHeight: 'xs', size: 1, "aria-label": label, id: id, tabIndex: 0 }, { children: label }))), _jsxs(Container, __assign({ align: "center", justify: "space-between" }, getToggleButtonProps(), { isOpen: isOpen, itemsSpacing: 10, tabIndex: 0 }, { children: [_jsx(BodyText, __assign({ size: 3, lineHeight: 'xs', variation: selectedItem ? 'inherit' : 'darkGray', style: {
                                    overflow: 'hidden',
                                    whiteSpace: 'nowrap',
                                    textOverflow: 'ellipsis',
                                } }, { children: itemNameGetter(selectedItem) || placeholder })), _jsx(SvgIcon, { src: isOpen ? UpIcon : DownIcon, rotate: isOpen, onKeyDown: function (ev) {
                                    if (ev.key === 'Enter') {
                                        handleFocus(ev);
                                    }
                                }, tabIndex: 0, alt: 'Arrow icon', role: 'img', "aria-labelledby": id, "aria-haspopup": "listbox", "aria-expanded": isOpen })] })), _jsx(ItemsContainer, __assign({}, getMenuProps(), { isOpen: isOpen, isFixedDropdown: isFixedDropdown, "aria-labelledby": id }, { children: isOpen &&
                            (noItems ? (_jsx("div", __assign({ style: { padding: '8px 16px', pointerEvents: 'none' } }, { children: _jsx(BodyText, __assign({ size: 3, scale: 'xs', lineHeight: 'xs', variation: "darkGray" }, { children: noItemsMessage })) }))) : (items.map(function (item, idx) {
                                var isSelected = isEqual(item, selectedItem);
                                var isHighlighted = inputInteractionTypeRef.current === InputInteractionType.keyboard &&
                                    highlightedIndex !== null &&
                                    highlightedIndex === idx;
                                return (_jsxs(ItemContainer, __assign({ align: "center", justify: "space-between", itemsSpacing: 10 }, getItemProps({ item: item, index: idx }), { isHighlighted: isHighlighted }, { children: [_jsx(BodyText, __assign({ size: isSelected ? 1 : 3, style: {
                                                overflow: 'hidden',
                                                whiteSpace: 'nowrap',
                                                textOverflow: 'ellipsis',
                                            }, scale: 'xs', lineHeight: 'xs' }, { children: itemNameGetter(item) })), areItemsRemovable && (_jsx(DeleteSvgIcon, { src: DeleteIcon, onClick: function (ev) {
                                                return handleRemoveItem(item, ev, downshift);
                                            } }))] }), "".concat(item, "-").concat(idx)));
                            }))) }))] })));
        } })));
}
export function MultiSelectDropdown(props) {
    var id = props.id, items = props.items, value = props.value, label = props.label, placeholder = props.placeholder, disabled = props.disabled, onSelect = props.onSelect, onChange = props.onChange, onRemove = props.onRemove, onClearAllItems = props.onClearAllItems, _a = props.isFixedDropdown, isFixedDropdown = _a === void 0 ? false : _a;
    var _b = useMultipleSelection({
        initialSelectedItems: value,
        onSelectedItemsChange: function (changes) {
            onSelect && onSelect(getChangeEvent(changes.selectedItems));
        },
    }), getSelectedItemProps = _b.getSelectedItemProps, getDropdownProps = _b.getDropdownProps, addSelectedItem = _b.addSelectedItem, removeSelectedItem = _b.removeSelectedItem, selectedItems = _b.selectedItems, setSelectedItems = _b.setSelectedItems, reset = _b.reset;
    var _c = useSelect({
        selectedItem: null,
        defaultHighlightedIndex: 0,
        items: items,
        stateReducer: function (state, actionAndChanges) {
            var changes = actionAndChanges.changes, type = actionAndChanges.type;
            switch (type) {
                case useSelect.stateChangeTypes.ToggleButtonKeyDownEnter:
                case useSelect.stateChangeTypes.ToggleButtonKeyDownSpaceButton:
                case useSelect.stateChangeTypes.ItemClick:
                    return __assign(__assign({}, changes), { isOpen: true });
                default:
                    return changes;
            }
        },
        onStateChange: function (_a) {
            var type = _a.type, newSelectedItem = _a.selectedItem;
            switch (type) {
                case useSelect.stateChangeTypes.ToggleButtonKeyDownEnter:
                case useSelect.stateChangeTypes.ToggleButtonKeyDownSpaceButton:
                case useSelect.stateChangeTypes.ItemClick:
                    {
                        var isAlreadySelected = selectedItems.some(function (i) { return i.value === (newSelectedItem === null || newSelectedItem === void 0 ? void 0 : newSelectedItem.value); });
                        if (newSelectedItem) {
                            if (isAlreadySelected) {
                                setSelectedItems(selectedItems.filter(function (i) { return i.value !== newSelectedItem.value; }));
                                onRemove && onRemove(getChangeEvent(newSelectedItem));
                            }
                            else {
                                addSelectedItem(newSelectedItem);
                                onChange && onChange(getChangeEvent(newSelectedItem));
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
        },
    }), isOpen = _c.isOpen, selectedItem = _c.selectedItem, getToggleButtonProps = _c.getToggleButtonProps, getLabelProps = _c.getLabelProps, getMenuProps = _c.getMenuProps, getItemProps = _c.getItemProps, openMenu = _c.openMenu, highlightedIndex = _c.highlightedIndex;
    //Align resetting selected values if they were reset in parent
    useEffect(function () {
        if (!value || value.length < 1) {
            reset();
        }
    }, [value]);
    var handleClearAll = function () {
        onClearAllItems && onClearAllItems(getChangeEvent(null));
        reset();
    };
    var handleFocus = function (ev) {
        ev.stopPropagation();
        if (disabled) {
            return;
        }
        !isOpen && openMenu();
    };
    var inputInteractionTypeRef = useGetInputInteractionType();
    return (_jsx(StyledDropdown, __assign({ disabled: disabled, isFixedDropdown: isFixedDropdown }, { children: _jsxs(FlexColumn, __assign({ itemsSpacing: 4 }, { children: [label && (_jsx(BodyText, __assign({ lineHeight: 'xs' }, getLabelProps(), { size: 1, id: id }, { children: label }))), _jsxs("div", { children: [_jsxs(MultiSelectContainer, __assign({ align: "center", justify: "space-between" }, getToggleButtonProps(__assign(__assign({}, getDropdownProps({ preventKeyAction: isOpen })), { onClick: function (e) { return e.stopPropagation(); }, isOpen: isOpen })), { children: [_jsx("span", { children: _jsx(BodyText, __assign({ lineHeight: 'xs', size: 3, variation: selectedItem ? 'inherit' : 'darkGray' }, { children: _jsx(OverflowWrapper, { children: _jsx(FlexRow, __assign({ gap: 8, wrap: 'wrap' }, { children: selectedItems.length === 0 ? (_jsx(PlaceholderWrapper, { children: placeholder })) : (selectedItems.map(function (selectedItem, index) { return (_jsx(ChipItemContainer, __assign({}, getSelectedItemProps({ selectedItem: selectedItem, index: index }), { children: _jsxs(FlexRow, __assign({ align: 'center', gap: 4 }, { children: [(selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.chipName) && (_jsx(BodyText, __assign({ lineHeight: 'xs', size: 1, variation: 'black' }, { children: selectedItem.chipName }))), (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.chipLabel) || (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.label), _jsx(MultiSelectDeleteIcon, { onClick: function (event) {
                                                                    event.preventDefault();
                                                                    event.stopPropagation();
                                                                    removeSelectedItem(selectedItem);
                                                                    onRemove &&
                                                                        onRemove(getChangeEvent(selectedItem));
                                                                }, size: 14, src: "assets/icons/ic-cross.svg", alt: 'Cross icon to clear', role: 'img' })] })) }), "selected-item-".concat(index))); })) })) }) })) }), _jsxs(DropdownIconWrapper, { children: [onClearAllItems && !!selectedItems.length && (_jsx(ClearSvgIcon, { src: DeleteIcon, onClick: handleClearAll, marginRight: true, role: 'img', alt: 'Cross icon to clear items' })), _jsx(SvgIcon, { size: 16, src: isOpen ? UpIcon : DownIcon, rotate: isOpen, onKeyDown: function (ev) {
                                                if (ev.key === 'Enter') {
                                                    handleFocus(ev);
                                                }
                                            }, tabIndex: 0, alt: 'Arrow icon', "aria-labelledby": id, "aria-haspopup": "listbox", "aria-expanded": isOpen, role: 'button' })] })] })), _jsx(ItemsContainer, __assign({}, getMenuProps(), { isOpen: isOpen, isFixedDropdown: isFixedDropdown }, { children: isOpen &&
                                items.map(function (item, index) {
                                    var isSelected = selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.some(function (i) { return i.value === item.value; });
                                    var isHighlighted = inputInteractionTypeRef.current === InputInteractionType.keyboard &&
                                        highlightedIndex !== null &&
                                        highlightedIndex === index;
                                    return (_jsxs(ItemContainer, __assign({ align: "center", justify: "space-between", itemsSpacing: 10 }, getItemProps({ item: item, index: index }), { isHighlighted: isHighlighted }, { children: [_jsx(BodyText, __assign({ size: isSelected ? 1 : 3, lineHeight: 'xs', scale: 'xs' }, { children: item.label })), isSelected && _jsx(CheckIcon, { size: 14, src: CheckmarkIcon })] }), "".concat(item.value).concat(index)));
                                }) }))] })] })) })));
}
export default Dropdown;
//# sourceMappingURL=data:application/json;base64,