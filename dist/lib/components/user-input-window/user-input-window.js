import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import styled, { useTheme } from 'styled-components';
import FlexRow from '../flex-row/flex-row';
import FlexColumn from '../flex-column/flex-column';
import Button from '../button/button';
import Input from '../input/input';
import BodyText from '../body-text/body-text';
import ReactModal from 'react-modal';
import { useClickAway } from '../../hooks/use-click-away';
import { useEscapeKey } from '../../hooks/use-escape-key';
import ModalHeader from '../modal-header/modal-header';
import SubtitleText from '../subtitle-text/subtitle-text';
import { ModalPosition, } from '../confirmation-window/confirmation-window';
import Checkbox, { CheckboxFontSize } from '../checkbox/checkbox';
import WarningMessage from '../warning-message/warning-message';
export var DismissOrigin;
(function (DismissOrigin) {
    DismissOrigin[DismissOrigin["HeaderCloseButton"] = 0] = "HeaderCloseButton";
    DismissOrigin[DismissOrigin["DismissButton"] = 1] = "DismissButton";
    DismissOrigin[DismissOrigin["Overlay"] = 2] = "Overlay";
    DismissOrigin[DismissOrigin["ESC"] = 3] = "ESC";
})(DismissOrigin || (DismissOrigin = {}));
var centerModalStyles = {
    left: '50%',
    right: 'auto',
    bottom: 'auto',
    border: 'none',
    borderRadius: '12px',
    padding: '32px 24px 24px 24px',
    top: '50%',
    transform: 'translate(-50%, -50%)',
};
var topModalStyles = {
    top: '40px',
    left: 'auto',
    right: '40px',
    border: 'none',
    bottom: 'auto',
    borderRadius: '12px',
    padding: '16px 24px 24px 24px',
};
var ModalContainer = styled(FlexColumn)(function (_a) {
    var theme = _a.theme, position = _a.position;
    return theme.withMedia({
        width: position === ModalPosition.TopRight
            ? ['300px', '350px', '350px']
            : ['300px', '440px', '496px'],
        background: theme.styleguideColors.backgroundPrimary,
        borderColor: theme.styleguideColors.backgroundPrimary,
    });
});
var ImageWrapper = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return theme.withMedia({
        margin: '15px 0 24px 0',
    });
});
var StyledCaption = styled.div(function (_a) {
    var theme = _a.theme, position = _a.position;
    return theme.withMedia({
        textAlign: 'left',
        marginBottom: '16px',
    });
});
var StyledCaptionText = styled(SubtitleText)(function (_a) {
    var theme = _a.theme;
    return theme.withMedia({
        fontWeight: [600, 600, 700],
        fontSize: ['20px', '24px', '24px'],
        color: theme.styleguideColors.contentPrimary,
    });
});
var StyledInformationText = styled(BodyText)(function (_a) {
    var theme = _a.theme, position = _a.position;
    return theme.withMedia({
        color: theme.styleguideColors.contentSecondary,
    });
});
var ButtonsContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme, position = _a.position;
    return theme.withMedia({
        marginTop: position === ModalPosition.TopRight ? '40px' : ['32px', '32px', '56px'],
        flexDirection: ['column', 'row', 'row'],
    });
});
var StyledInput = styled(Input)(function (_a) {
    var theme = _a.theme, margin = _a.margin;
    return theme.withMedia({
        width: '100%',
        margin: margin,
        ':focus': {
            outline: 'none',
        },
    });
});
var CheckBoxContainer = styled.div(function (_a) {
    var theme = _a.theme, position = _a.position;
    return theme.withMedia({
        margin: position === ModalPosition.TopRight
            ? '40px 0 -20px 0'
            : ['40px 0 -20px 0', '40px 0 -20px 0', '72px 0 -40px 0'],
    });
});
var handleTheme = function (theme, position) {
    var modalStyle = {
        overlay: {
            backgroundColor: theme.styleguideColors.backgroundOverlay,
            zIndex: 15,
        },
        content: position === ModalPosition.TopRight
            ? __assign(__assign({}, topModalStyles), {
                backgroundColor: theme.styleguideColors.backgroundPrimary,
                borderColor: theme.styleguideColors.backgroundPrimary,
            }) : __assign(__assign({}, centerModalStyles), {
            backgroundColor: theme.styleguideColors.backgroundPrimary,
            borderColor: theme.styleguideColors.backgroundPrimary,
        }),
    };
    return modalStyle;
};
export var UserInputWindow = function (_a) {
    var isOpen = _a.isOpen, position = _a.position, title = _a.title, withHeader = _a.withHeader, headerLogo = _a.headerLogo, bodyImg = _a.bodyImg, information = _a.information, confirmLabel = _a.confirmLabel, confirmDisabled = _a.confirmDisabled, confirmColor = _a.confirmColor, onConfirm = _a.onConfirm, dismissLabel = _a.dismissLabel, dismissDisabled = _a.dismissDisabled, shouldCloseOnEsc = _a.shouldCloseOnEsc, shouldCloseOnOverlayClick = _a.shouldCloseOnOverlayClick, onDismiss = _a.onDismiss, themeMode = _a.themeMode, inputType = _a.inputType, placeholder = _a.placeholder, _b = _a.required, required = _b === void 0 ? false : _b, inputLabel = _a.inputLabel, checkboxLabel = _a.checkboxLabel, validationSetting = _a.validationSetting, repeatInput = _a.repeatInput, warningMessage = _a.warningMessage, informationOnlyMode = _a.informationOnlyMode, isMandatoryCheckBox = _a.isMandatoryCheckBox, hideXButton = _a.hideXButton, resetForm = _a.resetForm, _c = _a.portalClass, portalClass = _c === void 0 ? 'portal' : _c;
    var theme = useTheme();
    var _d = useState(''), value = _d[0], setValue = _d[1];
    var _e = useState(''), repeatValue = _e[0], setRepeatValue = _e[1];
    var _f = useState(false), isChecked = _f[0], setIsChecked = _f[1];
    var _g = useState(null), formError = _g[0], setFormError = _g[1];
    var _h = useState(null), repeatInputError = _h[0], setRepeatInputError = _h[1];
    var _j = useState(isOpen), showModal = _j[0], setShowModal = _j[1];
    useEscapeKey(function () {
        if (shouldCloseOnEsc) {
            setShowModal(false);
            onDismiss && onDismiss(DismissOrigin.ESC);
        }
    });
    useEffect(function () {
        resetForm && setValue('');
    }, [resetForm]);
    var ref = useClickAway({
        callback: function () {
            if (shouldCloseOnOverlayClick) {
                setShowModal(false);
                onDismiss && onDismiss(DismissOrigin.Overlay);
            }
        },
    }).ref;
    var regexMatched = function (val) {
        return !!val && (validationSetting === null || validationSetting === void 0 ? void 0 : validationSetting.regexpPattern.test(val));
    };
    var isValueEqual = function (firstVal, secondVal) {
        return firstVal && secondVal && firstVal === secondVal;
    };
    var handleEnterKeyDown = function (e) {
        var val = e.target.value;
        if (val && !formError) {
            if (e.key === 'Enter') {
                onConfirm(val, isChecked);
            }
        }
        else
            return;
    };
    var handleOnSubmit = function () {
        onConfirm(value, isChecked);
    };
    var handleInputChange = function (e) {
        var passVal = e.target.value;
        repeatInput && repeatValue && setRepeatValue('');
        if ((validationSetting === null || validationSetting === void 0 ? void 0 : validationSetting.regexpPattern) &&
            (validationSetting === null || validationSetting === void 0 ? void 0 : validationSetting.validationMessage)) {
            !!passVal && regexMatched(passVal)
                ? setFormError(null)
                : setFormError("".concat(validationSetting === null || validationSetting === void 0 ? void 0 : validationSetting.validationMessage));
        }
        setValue(passVal);
    };
    var handleRepeatInputChange = function (e) {
        var repeatVal = e.target.value;
        if (repeatInput === null || repeatInput === void 0 ? void 0 : repeatInput.validationMessage) {
            !!repeatVal && isValueEqual(value, repeatVal)
                ? setRepeatInputError(null)
                : setRepeatInputError("".concat(repeatInput === null || repeatInput === void 0 ? void 0 : repeatInput.validationMessage));
        }
        setRepeatValue(repeatVal);
    };
    var handleDisableButton = function () {
        if (confirmDisabled)
            return true;
        if (isMandatoryCheckBox && !isChecked)
            return true;
        if (informationOnlyMode)
            return false;
        if (repeatInput) {
            return repeatValue ? !!repeatInputError : true;
        }
        else {
            return value ? !!formError : true;
        }
    };
    var handleCheckBox = function () {
        setIsChecked(!isChecked);
    };
    return (_jsx(_Fragment, { children: showModal && (_jsx(ReactModal, __assign({ isOpen: showModal, style: handleTheme(theme, position), shouldCloseOnEsc: true, shouldCloseOnOverlayClick: true, portalClassName: portalClass }, { children: _jsxs(ModalContainer, __assign({ position: position, ref: ref }, { children: [withHeader && (_jsx(ModalHeader, { themeMode: themeMode, headerLogo: headerLogo, onClose: hideXButton
                            ? undefined
                            : function () {
                                return onDismiss && onDismiss(DismissOrigin.HeaderCloseButton);
                            } })), bodyImg && _jsx(ImageWrapper, { children: bodyImg }), _jsx(StyledCaption, __assign({ position: position }, { children: _jsx(StyledCaptionText, __assign({ size: 1, scale: "lg" }, { children: title })) })), _jsx(FlexRow, __assign({ justify: "left" }, { children: _jsx(StyledInformationText, __assign({ position: position, size: 3, scale: "sm" }, { children: information })) })), !informationOnlyMode && (_jsx(FlexRow, { children: _jsx(StyledInput, { required: required, value: value, onChange: handleInputChange, onKeyDown: handleEnterKeyDown, label: _jsx(BodyText, __assign({ size: 2 }, { children: inputLabel })), placeholder: placeholder, margin: '16px 0', error: !!formError, validationType: inputType, validationText: formError }) })), !informationOnlyMode && repeatInput && (_jsx(FlexRow, { children: _jsx(StyledInput, { required: required, value: repeatValue, onChange: handleRepeatInputChange, onKeyDown: handleEnterKeyDown, label: _jsx(BodyText, __assign({ size: 2 }, { children: repeatInput === null || repeatInput === void 0 ? void 0 : repeatInput.label })), placeholder: repeatInput === null || repeatInput === void 0 ? void 0 : repeatInput.placeholder, error: !!repeatInputError, validationType: inputType, validationText: repeatInputError }) })), warningMessage && (_jsx(WarningMessage, { title: warningMessage.title, message: warningMessage.message, margin: warningMessage.margin, iconSrc: warningMessage.iconSrc })), checkboxLabel && (_jsx(CheckBoxContainer, __assign({ position: position }, { children: _jsx(Checkbox, { checked: isChecked, label: checkboxLabel, onChange: handleCheckBox, checkboxFontSize: CheckboxFontSize.small }) }))), _jsxs(ButtonsContainer, __assign({ position: position, gap: '16px', justify: 'space-between' }, { children: [dismissLabel && (_jsx(Button, __assign({ color: 'secondaryBlue', onClick: function () {
                                    return onDismiss && onDismiss(DismissOrigin.DismissButton);
                                }, disabled: !!dismissDisabled }, { children: dismissLabel }))), _jsx(Button, __assign({ color: confirmColor === 'red' ? 'primaryRed' : 'primaryBlue', onClick: handleOnSubmit, disabled: handleDisableButton() }, { children: confirmLabel }))] }))] })) }))) }));
};
export default UserInputWindow;
//# sourceMappingURL=data:application/json;base64,