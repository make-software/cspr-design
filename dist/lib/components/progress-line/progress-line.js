import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import styled from 'styled-components';
import { FlexColumn } from '../flex-column/flex-column';
import { FlexRow } from '../flex-row/flex-row';
import { CaptionText } from '../caption-text/caption-text';
import { SvgIcon } from '../svg-icon/svg-icon';
import CheckIcon from '../../assets/icons/ic-check.svg';
var StepWrapper = styled(FlexColumn)(function (_a) { return ({
    position: 'relative',
}); });
var StepText = styled(CaptionText)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, isFirstStep = _a.isFirstStep, isLastStep = _a.isLastStep, isCheckedStep = _a.isCheckedStep;
    return theme.withMedia(__assign(__assign(__assign({ color: disabled
            ? theme.styleguideColors.contentTertiary
            : theme.styleguideColors.contentBlue, position: 'absolute', bottom: 30, whiteSpace: ['inherit', 'nowrap', 'nowrap'] }, (isCheckedStep &&
        !isLastStep && {
        color: theme.styleguideColors.contentTertiary,
    })), (isFirstStep && {
        left: 0,
    })), (isLastStep && {
        right: 0,
    })));
});
var StepContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, checked = _a.checked;
    return ({
        borderRadius: '50%',
        border: "2px solid ".concat(disabled
            ? theme.styleguideColors.contentQuaternary
            : theme.styleguideColors.contentBlue),
        background: checked
            ? disabled
                ? theme.styleguideColors.contentQuaternary
                : theme.styleguideColors.contentBlue
            : theme.styleguideColors.backgroundPrimary,
        width: 24,
        height: 24,
        '& svg': {
            path: {
                fill: theme.styleguideColors.backgroundPrimary,
            },
        },
    });
});
var Circle = styled.div(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return ({
        borderRadius: '50%',
        background: disabled
            ? theme.styleguideColors.contentQuaternary
            : theme.styleguideColors.contentBlue,
        width: 12,
        height: 12,
    });
});
var Line = styled.div(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return ({
        height: 2,
        background: disabled
            ? theme.styleguideColors.contentQuaternary
            : theme.styleguideColors.contentBlue,
        width: '100%',
    });
});
var renderStep = function (label, idx, currentIdx, totalSteps) {
    var isCurrentStep = idx === currentIdx;
    var isFirstStep = idx === 0;
    var isLastStep = idx === totalSteps - 1;
    var isCompletedStep = idx < currentIdx;
    var isDisabledStep = !isCompletedStep && !isCurrentStep;
    var isCheckedStep = isCompletedStep || isLastStep;
    return (_jsxs(React.Fragment, { children: [!isFirstStep && _jsx(Line, { disabled: isDisabledStep }), _jsxs(StepWrapper, __assign({ align: "center" }, { children: [_jsx(StepText, __assign({ disabled: isDisabledStep, size: 1, isFirstStep: isFirstStep, isLastStep: isLastStep, isCheckedStep: isCheckedStep }, { children: label })), _jsx(StepContainer, __assign({ disabled: isDisabledStep, checked: isCheckedStep, align: "center", justify: "center" }, { children: isCheckedStep ? (_jsx(SvgIcon, { height: 7, width: 10, src: CheckIcon })) : (_jsx(Circle, { disabled: isDisabledStep })) }))] })), !isLastStep && _jsx(Line, { disabled: !isFirstStep && !isCompletedStep })] }, "".concat(idx, "-").concat(label)));
};
export function ProgressLine(_a) {
    var steps = _a.steps, currentIdx = _a.currentIdx;
    return (_jsx(FlexRow, __assign({ align: "center" }, { children: steps.map(function (label, idx) {
            return renderStep(label, idx, currentIdx, steps.length);
        }) })));
}
export default ProgressLine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtbGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9wcm9ncmVzcy1saW5lL3Byb2dyZXNzLWxpbmUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvQyxPQUFPLFNBQVMsTUFBTSxpQ0FBaUMsQ0FBQztBQU94RCxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBQyxFQUFFLElBQUssT0FBQSxDQUFDO0lBQzlDLFFBQVEsRUFBRSxVQUFVO0NBQ3JCLENBQUMsRUFGNkMsQ0FFN0MsQ0FBQyxDQUFDO0FBRUosSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUtqQyxVQUFDLEVBQTJEO1FBQXpELEtBQUssV0FBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLFdBQVcsaUJBQUEsRUFBRSxVQUFVLGdCQUFBLEVBQUUsYUFBYSxtQkFBQTtJQUMzRCxPQUFBLEtBQUssQ0FBQyxTQUFTLDhCQUNiLEtBQUssRUFBRSxRQUFRO1lBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1lBQ3hDLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUN0QyxRQUFRLEVBQUUsVUFBVSxFQUNwQixNQUFNLEVBQUUsRUFBRSxFQUNWLFVBQVUsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUs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QVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IEZsZXhDb2x1bW4gfSBmcm9tICcuLi9mbGV4LWNvbHVtbi9mbGV4LWNvbHVtbic7XG5pbXBvcnQgeyBGbGV4Um93IH0gZnJvbSAnLi4vZmxleC1yb3cvZmxleC1yb3cnO1xuaW1wb3J0IHsgQ2FwdGlvblRleHQgfSBmcm9tICcuLi9jYXB0aW9uLXRleHQvY2FwdGlvbi10ZXh0JztcbmltcG9ydCB7IFN2Z0ljb24gfSBmcm9tICcuLi9zdmctaWNvbi9zdmctaWNvbic7XG5pbXBvcnQgQ2hlY2tJY29uIGZyb20gJy4uLy4uL2Fzc2V0cy9pY29ucy9pYy1jaGVjay5zdmcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb2dyZXNzTGluZVByb3BzIHtcbiAgc3RlcHM6IHN0cmluZ1tdO1xuICBjdXJyZW50SWR4OiBudW1iZXI7XG59XG5cbmNvbnN0IFN0ZXBXcmFwcGVyID0gc3R5bGVkKEZsZXhDb2x1bW4pKCh7fSkgPT4gKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG59KSk7XG5cbmNvbnN0IFN0ZXBUZXh0ID0gc3R5bGVkKENhcHRpb25UZXh0KTx7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgaXNGaXJzdFN0ZXA6IGJvb2xlYW47XG4gIGlzTGFzdFN0ZXA6IGJvb2xlYW47XG4gIGlzQ2hlY2tlZFN0ZXA6IGJvb2xlYW47XG59PigoeyB0aGVtZSwgZGlzYWJsZWQsIGlzRmlyc3RTdGVwLCBpc0xhc3RTdGVwLCBpc0NoZWNrZWRTdGVwIH0pID0+XG4gIHRoZW1lLndpdGhNZWRpYSh7XG4gICAgY29sb3I6IGRpc2FibGVkXG4gICAgICA/IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFRlcnRpYXJ5XG4gICAgICA6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudEJsdWUsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgYm90dG9tOiAzMCxcbiAgICB3aGl0ZVNwYWNlOiBbJ2luaGVyaXQnLCAnbm93cmFwJywgJ25vd3JhcCddLFxuICAgIC4uLihpc0NoZWNrZWRTdGVwICYmXG4gICAgICAhaXNMYXN0U3RlcCAmJiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRUZXJ0aWFyeSxcbiAgICAgIH0pLFxuICAgIC4uLihpc0ZpcnN0U3RlcCAmJiB7XG4gICAgICBsZWZ0OiAwLFxuICAgIH0pLFxuICAgIC4uLihpc0xhc3RTdGVwICYmIHtcbiAgICAgIHJpZ2h0OiAwLFxuICAgIH0pLFxuICB9KVxuKTtcblxuY29uc3QgU3RlcENvbnRhaW5lciA9IHN0eWxlZChGbGV4Um93KTx7IGRpc2FibGVkOiBib29sZWFuOyBjaGVja2VkOiBib29sZWFuIH0+KFxuICAoeyB0aGVtZSwgZGlzYWJsZWQsIGNoZWNrZWQgfSkgPT4gKHtcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgIGJvcmRlcjogYDJweCBzb2xpZCAke1xuICAgICAgZGlzYWJsZWRcbiAgICAgICAgPyB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRRdWF0ZXJuYXJ5XG4gICAgICAgIDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50Qmx1ZVxuICAgIH1gLFxuICAgIGJhY2tncm91bmQ6IGNoZWNrZWRcbiAgICAgID8gZGlzYWJsZWRcbiAgICAgICAgPyB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRRdWF0ZXJuYXJ5XG4gICAgICAgIDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50Qmx1ZVxuICAgICAgOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmJhY2tncm91bmRQcmltYXJ5LFxuICAgIHdpZHRoOiAyNCxcbiAgICBoZWlnaHQ6IDI0LFxuICAgICcmIHN2Zyc6IHtcbiAgICAgIHBhdGg6IHtcbiAgICAgICAgZmlsbDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kUHJpbWFyeSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbik7XG5cbmNvbnN0IENpcmNsZSA9IHN0eWxlZC5kaXY8eyBkaXNhYmxlZD86IGJvb2xlYW4gfT4oKHsgdGhlbWUsIGRpc2FibGVkIH0pID0+ICh7XG4gIGJvcmRlclJhZGl1czogJzUwJScsXG4gIGJhY2tncm91bmQ6IGRpc2FibGVkXG4gICAgPyB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRRdWF0ZXJuYXJ5XG4gICAgOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRCbHVlLFxuICB3aWR0aDogMTIsXG4gIGhlaWdodDogMTIsXG59KSk7XG5cbmNvbnN0IExpbmUgPSBzdHlsZWQuZGl2PHsgZGlzYWJsZWQ/OiBib29sZWFuIH0+KCh7IHRoZW1lLCBkaXNhYmxlZCB9KSA9PiAoe1xuICBoZWlnaHQ6IDIsXG4gIGJhY2tncm91bmQ6IGRpc2FibGVkXG4gICAgPyB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRRdWF0ZXJuYXJ5XG4gICAgOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRCbHVlLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuXG5jb25zdCByZW5kZXJTdGVwID0gKFxuICBsYWJlbDogc3RyaW5nLFxuICBpZHg6IG51bWJlcixcbiAgY3VycmVudElkeDogbnVtYmVyLFxuICB0b3RhbFN0ZXBzOiBudW1iZXJcbikgPT4ge1xuICBjb25zdCBpc0N1cnJlbnRTdGVwID0gaWR4ID09PSBjdXJyZW50SWR4O1xuICBjb25zdCBpc0ZpcnN0U3RlcCA9IGlkeCA9PT0gMDtcbiAgY29uc3QgaXNMYXN0U3RlcCA9IGlkeCA9PT0gdG90YWxTdGVwcyAtIDE7XG5cbiAgY29uc3QgaXNDb21wbGV0ZWRTdGVwID0gaWR4IDwgY3VycmVudElkeDtcblxuICBjb25zdCBpc0Rpc2FibGVkU3RlcCA9ICFpc0NvbXBsZXRlZFN0ZXAgJiYgIWlzQ3VycmVudFN0ZXA7XG4gIGNvbnN0IGlzQ2hlY2tlZFN0ZXAgPSBpc0NvbXBsZXRlZFN0ZXAgfHwgaXNMYXN0U3RlcDtcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2Ake2lkeH0tJHtsYWJlbH1gfT5cbiAgICAgIHshaXNGaXJzdFN0ZXAgJiYgPExpbmUgZGlzYWJsZWQ9e2lzRGlzYWJsZWRTdGVwfSAvPn1cblxuICAgICAgPFN0ZXBXcmFwcGVyIGFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgIDxTdGVwVGV4dFxuICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkU3RlcH1cbiAgICAgICAgICBzaXplPXsxfVxuICAgICAgICAgIGlzRmlyc3RTdGVwPXtpc0ZpcnN0U3RlcH1cbiAgICAgICAgICBpc0xhc3RTdGVwPXtpc0xhc3RTdGVwfVxuICAgICAgICAgIGlzQ2hlY2tlZFN0ZXA9e2lzQ2hlY2tlZFN0ZXB9XG4gICAgICAgID5cbiAgICAgICAgICB7bGFiZWx9XG4gICAgICAgIDwvU3RlcFRleHQ+XG4gICAgICAgIDxTdGVwQ29udGFpbmVyXG4gICAgICAgICAgZGlzYWJsZWQ9e2lzRGlzYWJsZWRTdGVwfVxuICAgICAgICAgIGNoZWNrZWQ9e2lzQ2hlY2tlZFN0ZXB9XG4gICAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICAgIGp1c3RpZnk9XCJjZW50ZXJcIlxuICAgICAgICA+XG4gICAgICAgICAge2lzQ2hlY2tlZFN0ZXAgPyAoXG4gICAgICAgICAgICA8U3ZnSWNvbiBoZWlnaHQ9ezd9IHdpZHRoPXsxMH0gc3JjPXtDaGVja0ljb259IC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxDaXJjbGUgZGlzYWJsZWQ9e2lzRGlzYWJsZWRTdGVwfSAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU3RlcENvbnRhaW5lcj5cbiAgICAgIDwvU3RlcFdyYXBwZXI+XG4gICAgICB7IWlzTGFzdFN0ZXAgJiYgPExpbmUgZGlzYWJsZWQ9eyFpc0ZpcnN0U3RlcCAmJiAhaXNDb21wbGV0ZWRTdGVwfSAvPn1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFByb2dyZXNzTGluZSh7IHN0ZXBzLCBjdXJyZW50SWR4IH06IFByb2dyZXNzTGluZVByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEZsZXhSb3cgYWxpZ249XCJjZW50ZXJcIj5cbiAgICAgIHtzdGVwcy5tYXAoKGxhYmVsLCBpZHgpID0+XG4gICAgICAgIHJlbmRlclN0ZXAobGFiZWwsIGlkeCwgY3VycmVudElkeCwgc3RlcHMubGVuZ3RoKVxuICAgICAgKX1cbiAgICA8L0ZsZXhSb3c+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2dyZXNzTGluZTtcbiJdfQ==