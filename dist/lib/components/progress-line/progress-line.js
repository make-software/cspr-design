import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import styled from 'styled-components';
import { FlexColumn } from '../flex-column/flex-column';
import { FlexRow } from '../flex-row/flex-row';
import { CaptionText } from '../caption-text/caption-text';
import { SvgIcon } from '../svg-icon/svg-icon';
import CheckIcon from '../../assets/icons/ic-check.svg';
var StepWrapper = styled(FlexColumn)(function (_a) { return ({
    position: 'relative',
}); });
var StepText = styled(CaptionText)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, isFirstStep = _a.isFirstStep, isLastStep = _a.isLastStep, isCheckedStep = _a.isCheckedStep;
    return theme.withMedia(__assign(__assign(__assign({ color: disabled
            ? theme.styleguideColors.contentTertiary
            : theme.styleguideColors.contentBlue, position: 'absolute', bottom: 30, whiteSpace: ['inherit', 'nowrap', 'nowrap'] }, (isCheckedStep &&
        !isLastStep && {
        color: theme.styleguideColors.contentTertiary,
    })), (isFirstStep && {
        left: 0,
    })), (isLastStep && {
        right: 0,
    })));
});
var StepContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, checked = _a.checked;
    return ({
        borderRadius: '50%',
        border: "2px solid ".concat(disabled
            ? theme.styleguideColors.contentQuaternary
            : theme.styleguideColors.contentBlue),
        background: checked
            ? disabled
                ? theme.styleguideColors.contentQuaternary
                : theme.styleguideColors.contentBlue
            : theme.styleguideColors.backgroundPrimary,
        width: 24,
        height: 24,
        '& svg': {
            path: {
                fill: theme.styleguideColors.backgroundPrimary,
            },
        },
    });
});
var Circle = styled.div(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return ({
        borderRadius: '50%',
        background: disabled
            ? theme.styleguideColors.contentQuaternary
            : theme.styleguideColors.contentBlue,
        width: 12,
        height: 12,
    });
});
var Line = styled.div(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return ({
        height: 2,
        background: disabled
            ? theme.styleguideColors.contentQuaternary
            : theme.styleguideColors.contentBlue,
        width: '100%',
    });
});
var renderStep = function (label, idx, currentIdx, totalSteps) {
    var isCurrentStep = idx === currentIdx;
    var isFirstStep = idx === 0;
    var isLastStep = idx === totalSteps - 1;
    var isCompletedStep = idx < currentIdx;
    var isDisabledStep = !isCompletedStep && !isCurrentStep;
    var isCheckedStep = isCompletedStep || isLastStep;
    return (_jsxs(React.Fragment, { children: [!isFirstStep && _jsx(Line, { disabled: isDisabledStep }), _jsxs(StepWrapper, __assign({ align: "center" }, { children: [_jsx(StepText, __assign({ disabled: isDisabledStep, size: 1, isFirstStep: isFirstStep, isLastStep: isLastStep, isCheckedStep: isCheckedStep }, { children: label })), _jsx(StepContainer, __assign({ disabled: isDisabledStep, checked: isCheckedStep, align: "center", justify: "center" }, { children: isCheckedStep ? (_jsx(SvgIcon, { height: 7, width: 10, src: CheckIcon })) : (_jsx(Circle, { disabled: isDisabledStep })) }))] })), !isLastStep && _jsx(Line, { disabled: !isFirstStep && !isCompletedStep })] }, "".concat(idx, "-").concat(label)));
};
export function ProgressLine(_a) {
    var steps = _a.steps, currentIdx = _a.currentIdx;
    return (_jsx(FlexRow, __assign({ align: "center" }, { children: steps.map(function (label, idx) {
            return renderStep(label, idx, currentIdx, steps.length);
        }) })));
}
export default ProgressLine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtbGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9wcm9ncmVzcy1saW5lL3Byb2dyZXNzLWxpbmUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvQyxPQUFPLFNBQVMsTUFBTSxpQ0FBaUMsQ0FBQztBQU94RCxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBQyxFQUFFLElBQUssT0FBQSxDQUFDO0lBQzlDLFFBQVEsRUFBRSxVQUFVO0NBQ3JCLENBQUMsRUFGNkMsQ0FFN0MsQ0FBQyxDQUFDO0FBRUosSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUtqQyxVQUFDLEVBQTJEO1FBQXpELEtBQUssV0FBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLFdBQVcsaUJBQUEsRUFBRSxVQUFVLGdCQUFBLEVBQUUsYUFBYSxtQkFBQTtJQUMzRCxPQUFBLEtBQUssQ0FBQyxTQUFTLDhCQUNiLEtBQUssRUFBRSxRQUFRO1lBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1lBQ3hDLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUN0QyxRQUFRLEVBQUUsVUFBVSxFQUNwQixNQUFNLEVBQUUsRUFBRSxFQUNWLFVBQVUsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUs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QVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xyXG5pbXBvcnQgeyBGbGV4Q29sdW1uIH0gZnJvbSAnLi4vZmxleC1jb2x1bW4vZmxleC1jb2x1bW4nO1xyXG5pbXBvcnQgeyBGbGV4Um93IH0gZnJvbSAnLi4vZmxleC1yb3cvZmxleC1yb3cnO1xyXG5pbXBvcnQgeyBDYXB0aW9uVGV4dCB9IGZyb20gJy4uL2NhcHRpb24tdGV4dC9jYXB0aW9uLXRleHQnO1xyXG5pbXBvcnQgeyBTdmdJY29uIH0gZnJvbSAnLi4vc3ZnLWljb24vc3ZnLWljb24nO1xyXG5pbXBvcnQgQ2hlY2tJY29uIGZyb20gJy4uLy4uL2Fzc2V0cy9pY29ucy9pYy1jaGVjay5zdmcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQcm9ncmVzc0xpbmVQcm9wcyB7XHJcbiAgc3RlcHM6IHN0cmluZ1tdO1xyXG4gIGN1cnJlbnRJZHg6IG51bWJlcjtcclxufVxyXG5cclxuY29uc3QgU3RlcFdyYXBwZXIgPSBzdHlsZWQoRmxleENvbHVtbikoKHt9KSA9PiAoe1xyXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG59KSk7XHJcblxyXG5jb25zdCBTdGVwVGV4dCA9IHN0eWxlZChDYXB0aW9uVGV4dCk8e1xyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICBpc0ZpcnN0U3RlcDogYm9vbGVhbjtcclxuICBpc0xhc3RTdGVwOiBib29sZWFuO1xyXG4gIGlzQ2hlY2tlZFN0ZXA6IGJvb2xlYW47XHJcbn0+KCh7IHRoZW1lLCBkaXNhYmxlZCwgaXNGaXJzdFN0ZXAsIGlzTGFzdFN0ZXAsIGlzQ2hlY2tlZFN0ZXAgfSkgPT5cclxuICB0aGVtZS53aXRoTWVkaWEoe1xyXG4gICAgY29sb3I6IGRpc2FibGVkXHJcbiAgICAgID8gdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50VGVydGlhcnlcclxuICAgICAgOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRCbHVlLFxyXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICBib3R0b206IDMwLFxyXG4gICAgd2hpdGVTcGFjZTogWydpbmhlcml0JywgJ25vd3JhcCcsICdub3dyYXAnXSxcclxuICAgIC4uLihpc0NoZWNrZWRTdGVwICYmXHJcbiAgICAgICFpc0xhc3RTdGVwICYmIHtcclxuICAgICAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50VGVydGlhcnksXHJcbiAgICAgIH0pLFxyXG4gICAgLi4uKGlzRmlyc3RTdGVwICYmIHtcclxuICAgICAgbGVmdDogMCxcclxuICAgIH0pLFxyXG4gICAgLi4uKGlzTGFzdFN0ZXAgJiYge1xyXG4gICAgICByaWdodDogMCxcclxuICAgIH0pLFxyXG4gIH0pXHJcbik7XHJcblxyXG5jb25zdCBTdGVwQ29udGFpbmVyID0gc3R5bGVkKEZsZXhSb3cpPHsgZGlzYWJsZWQ6IGJvb2xlYW47IGNoZWNrZWQ6IGJvb2xlYW4gfT4oXHJcbiAgKHsgdGhlbWUsIGRpc2FibGVkLCBjaGVja2VkIH0pID0+ICh7XHJcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxyXG4gICAgYm9yZGVyOiBgMnB4IHNvbGlkICR7XHJcbiAgICAgIGRpc2FibGVkXHJcbiAgICAgICAgPyB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRRdWF0ZXJuYXJ5XHJcbiAgICAgICAgOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRCbHVlXHJcbiAgICB9YCxcclxuICAgIGJhY2tncm91bmQ6IGNoZWNrZWRcclxuICAgICAgPyBkaXNhYmxlZFxyXG4gICAgICAgID8gdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50UXVhdGVybmFyeVxyXG4gICAgICAgIDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50Qmx1ZVxyXG4gICAgICA6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuYmFja2dyb3VuZFByaW1hcnksXHJcbiAgICB3aWR0aDogMjQsXHJcbiAgICBoZWlnaHQ6IDI0LFxyXG4gICAgJyYgc3ZnJzoge1xyXG4gICAgICBwYXRoOiB7XHJcbiAgICAgICAgZmlsbDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kUHJpbWFyeSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSlcclxuKTtcclxuXHJcbmNvbnN0IENpcmNsZSA9IHN0eWxlZC5kaXY8eyBkaXNhYmxlZD86IGJvb2xlYW4gfT4oKHsgdGhlbWUsIGRpc2FibGVkIH0pID0+ICh7XHJcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcclxuICBiYWNrZ3JvdW5kOiBkaXNhYmxlZFxyXG4gICAgPyB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRRdWF0ZXJuYXJ5XHJcbiAgICA6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudEJsdWUsXHJcbiAgd2lkdGg6IDEyLFxyXG4gIGhlaWdodDogMTIsXHJcbn0pKTtcclxuXHJcbmNvbnN0IExpbmUgPSBzdHlsZWQuZGl2PHsgZGlzYWJsZWQ/OiBib29sZWFuIH0+KCh7IHRoZW1lLCBkaXNhYmxlZCB9KSA9PiAoe1xyXG4gIGhlaWdodDogMixcclxuICBiYWNrZ3JvdW5kOiBkaXNhYmxlZFxyXG4gICAgPyB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRRdWF0ZXJuYXJ5XHJcbiAgICA6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudEJsdWUsXHJcbiAgd2lkdGg6ICcxMDAlJyxcclxufSkpO1xyXG5cclxuY29uc3QgcmVuZGVyU3RlcCA9IChcclxuICBsYWJlbDogc3RyaW5nLFxyXG4gIGlkeDogbnVtYmVyLFxyXG4gIGN1cnJlbnRJZHg6IG51bWJlcixcclxuICB0b3RhbFN0ZXBzOiBudW1iZXJcclxuKSA9PiB7XHJcbiAgY29uc3QgaXNDdXJyZW50U3RlcCA9IGlkeCA9PT0gY3VycmVudElkeDtcclxuICBjb25zdCBpc0ZpcnN0U3RlcCA9IGlkeCA9PT0gMDtcclxuICBjb25zdCBpc0xhc3RTdGVwID0gaWR4ID09PSB0b3RhbFN0ZXBzIC0gMTtcclxuXHJcbiAgY29uc3QgaXNDb21wbGV0ZWRTdGVwID0gaWR4IDwgY3VycmVudElkeDtcclxuXHJcbiAgY29uc3QgaXNEaXNhYmxlZFN0ZXAgPSAhaXNDb21wbGV0ZWRTdGVwICYmICFpc0N1cnJlbnRTdGVwO1xyXG4gIGNvbnN0IGlzQ2hlY2tlZFN0ZXAgPSBpc0NvbXBsZXRlZFN0ZXAgfHwgaXNMYXN0U3RlcDtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2Ake2lkeH0tJHtsYWJlbH1gfT5cclxuICAgICAgeyFpc0ZpcnN0U3RlcCAmJiA8TGluZSBkaXNhYmxlZD17aXNEaXNhYmxlZFN0ZXB9IC8+fVxyXG5cclxuICAgICAgPFN0ZXBXcmFwcGVyIGFsaWduPVwiY2VudGVyXCI+XHJcbiAgICAgICAgPFN0ZXBUZXh0XHJcbiAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZFN0ZXB9XHJcbiAgICAgICAgICBzaXplPXsxfVxyXG4gICAgICAgICAgaXNGaXJzdFN0ZXA9e2lzRmlyc3RTdGVwfVxyXG4gICAgICAgICAgaXNMYXN0U3RlcD17aXNMYXN0U3RlcH1cclxuICAgICAgICAgIGlzQ2hlY2tlZFN0ZXA9e2lzQ2hlY2tlZFN0ZXB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge2xhYmVsfVxyXG4gICAgICAgIDwvU3RlcFRleHQ+XHJcbiAgICAgICAgPFN0ZXBDb250YWluZXJcclxuICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkU3RlcH1cclxuICAgICAgICAgIGNoZWNrZWQ9e2lzQ2hlY2tlZFN0ZXB9XHJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiXHJcbiAgICAgICAgICBqdXN0aWZ5PVwiY2VudGVyXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICB7aXNDaGVja2VkU3RlcCA/IChcclxuICAgICAgICAgICAgPFN2Z0ljb24gaGVpZ2h0PXs3fSB3aWR0aD17MTB9IHNyYz17Q2hlY2tJY29ufSAvPlxyXG4gICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgPENpcmNsZSBkaXNhYmxlZD17aXNEaXNhYmxlZFN0ZXB9IC8+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvU3RlcENvbnRhaW5lcj5cclxuICAgICAgPC9TdGVwV3JhcHBlcj5cclxuICAgICAgeyFpc0xhc3RTdGVwICYmIDxMaW5lIGRpc2FibGVkPXshaXNGaXJzdFN0ZXAgJiYgIWlzQ29tcGxldGVkU3RlcH0gLz59XHJcbiAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUHJvZ3Jlc3NMaW5lKHsgc3RlcHMsIGN1cnJlbnRJZHggfTogUHJvZ3Jlc3NMaW5lUHJvcHMpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPEZsZXhSb3cgYWxpZ249XCJjZW50ZXJcIj5cclxuICAgICAge3N0ZXBzLm1hcCgobGFiZWwsIGlkeCkgPT5cclxuICAgICAgICByZW5kZXJTdGVwKGxhYmVsLCBpZHgsIGN1cnJlbnRJZHgsIHN0ZXBzLmxlbmd0aClcclxuICAgICAgKX1cclxuICAgIDwvRmxleFJvdz5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc0xpbmU7XHJcbiJdfQ==