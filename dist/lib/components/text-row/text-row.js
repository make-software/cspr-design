import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from 'styled-components';
import { BodyText } from '../body-text/body-text';
import { FlexRow } from '../flex-row/flex-row';
import { SubtitleText } from '../subtitle-text/subtitle-text';
import { TruncateBox } from '../truncate-box/truncate-box';
import { formatHash } from '../../utils/formatters';
import { Tooltip } from '../tooltip/tooltip';
import { useMatchMedia } from '../../utils/match-media';
import { CopyHash } from '../copy-hash/copy-hash';
import { HashLength } from '../../utils/formatters';
var StyledWrapper = styled('div')(function (_a) { return ({
    display: 'flex',
    flexDirection: 'column',
}); });
var LabelContainer = styled('div')(function (_a) { return ({
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 4,
}); });
var InputContainer = styled('div')(function (_a) {
    var theme = _a.theme;
    return ({
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '0 16px',
        height: 36,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        border: theme.border.base,
        borderRadius: theme.borderRadius.base,
    });
});
var SuffixContainer = styled('div')(function (_a) { return ({
    marginLeft: 16,
}); });
var SuffixTextContainer = styled(SuffixContainer)(function (_a) {
    var theme = _a.theme;
    return ({
        color: theme.styleguideColors.contentSecondary,
    });
});
var PrefixContainer = styled('div')(function (_a) { return ({
    marginRight: 16,
}); });
export var TextRowType;
(function (TextRowType) {
    TextRowType["Text"] = "text";
    TextRowType["Hash"] = "hash";
    TextRowType["Number"] = "number";
})(TextRowType || (TextRowType = {}));
export function TextRow(props) {
    var label = props.label, rightLabel = props.rightLabel, text = props.text, prefixIcon = props.prefixIcon, suffixText = props.suffixText, suffixIcon = props.suffixIcon, type = props.type, labelIcon = props.labelIcon, labelTooltipText = props.labelTooltipText;
    var responsiveHashSize = useMatchMedia([HashLength.SMALL, HashLength.MEDIUM, HashLength.LARGE, HashLength.FULL], []);
    var responsiveTruncateSize = useMatchMedia([2, 3, 4, 5], []);
    return (_jsxs(StyledWrapper, { children: [_jsxs(LabelContainer, { children: [label && (_jsx(Tooltip, __assign({ title: labelTooltipText, limitWidth: true }, { children: _jsxs(FlexRow, __assign({ gap: 3, align: 'center' }, { children: [_jsx(SubtitleText, __assign({ size: 1 }, { children: label })), labelIcon] })) }))), rightLabel && _jsx(SubtitleText, __assign({ size: 1 }, { children: rightLabel }))] }), _jsxs(InputContainer, { children: [prefixIcon && _jsx(PrefixContainer, { children: prefixIcon }), _jsxs(FlexRow, __assign({ itemsSpacing: 4 }, { children: [type === TextRowType.Hash ? (_jsx(Tooltip, __assign({ title: text }, { children: _jsx(BodyText, __assign({ size: 3, monotype: true }, { children: formatHash(text || '', responsiveHashSize) })) }))) : (_jsx(TruncateBox, __assign({ size: responsiveTruncateSize }, { children: _jsx(Tooltip, __assign({ title: text }, { children: _jsx(BodyText, __assign({ size: 3, monotype: type === TextRowType.Number }, { children: text })) })) }))), _jsx(CopyHash, { value: text ? text : '', minified: true, variation: "gray" })] })), suffixIcon && _jsx(SuffixContainer, { children: suffixIcon }), suffixText && (_jsx(SuffixTextContainer, { children: _jsx(BodyText, __assign({ size: 3 }, { children: suffixText })) }))] })] }));
}
export default TextRow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1yb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvdGV4dC1yb3cvdGV4dC1yb3cudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUM7QUFDdkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHcEQsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsQ0FBQztJQUMzQyxPQUFPLEVBQUUsTUFBTTtJQUNmLGFBQWEsRUFBRSxRQUFRO0NBQ3hCLENBQUMsRUFIMEMsQ0FHMUMsQ0FBQyxDQUFDO0FBRUosSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsQ0FBQztJQUM1QyxPQUFPLEVBQUUsTUFBTTtJQUNmLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLFVBQVUsRUFBRSxRQUFRO0lBQ3BCLGNBQWMsRUFBRSxlQUFlO0lBQy9CLFlBQVksRUFBRSxDQUFDO0NBQ2hCLENBQUMsRUFOMkMsQ0FN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QUMsT0FBTyxhQUFDLFlBQVksRUFBRSxDQUFDLGlCQUNyQixJQUFJLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDM0IsS0FBQyxPQUFPLGFBQUMsS0FBSyxFQUFFLElBQUksZ0JBQ2xCLEtBQUMsUUFBUSxhQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksZ0JBQzlCLFVBQVUsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLGtCQUFrQixDQUFDLElBQ2xDLElBQ0gsQ0FDWCxDQUFDLENBQUMsQ0FBQyxDQUNGLEtBQUMsV0FBVyxhQUFDLElBQUksRUFBRSxzQkFBc0IsZ0JBQ3ZDLEtBQUMsT0FBTyxhQUFDLEtBQUssRUFBRSxJQUFJLGdCQUNsQixLQUFDLFFBQVEsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEtBQUssV0FBVyxDQUFDLE1BQU0sZ0JBQ3JELElBQUksSUFDSSxJQUNILElBQ0UsQ0FDZixFQUNELEtBQUMsUUFBUSxJQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLFFBQVEsUUFBQyxTQUFTLEVBQUMsTUFBTSxHQUFHLEtBQ3ZELEVBQ1QsVUFBVSxJQUFJLEtBQUMsZUFBZSxjQUFFLFVBQVUsR0FBbUIsRUFDN0QsVUFBVSxJQUFJLENBQ2IsS0FBQyxtQkFBbUIsY0FDbEIsS0FBQyxRQUFRLGFBQUMsSUFBSSxFQUFFLENBQUMsZ0JBQUcsVUFBVSxJQUFZLEdBQ3RCLENBQ3ZCLElBQ2MsSUFDSCxDQUNqQixDQUFDO0FBQ0osQ0FBQztBQUVELGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQm9keVRleHQgfSBmcm9tICcuLi9ib2R5LXRleHQvYm9keS10ZXh0JztcbmltcG9ydCB7IEZsZXhSb3cgfSBmcm9tICcuLi9mbGV4LXJvdy9mbGV4LXJvdyc7XG5pbXBvcnQgeyBTdWJ0aXRsZVRleHQgfSBmcm9tICcuLi9zdWJ0aXRsZS10ZXh0L3N1YnRpdGxlLXRleHQnO1xuaW1wb3J0IHsgVHJ1bmNhdGVCb3ggfSBmcm9tICcuLi90cnVuY2F0ZS1ib3gvdHJ1bmNhdGUtYm94JztcbmltcG9ydCB7IGZvcm1hdEhhc2ggfSBmcm9tICcuLi8uLi91dGlscy9mb3JtYXR0ZXJzJztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICcuLi90b29sdGlwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgdXNlTWF0Y2hNZWRpYSB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGNoLW1lZGlhJztcbmltcG9ydCB7IENvcHlIYXNoIH0gZnJvbSAnLi4vY29weS1oYXNoL2NvcHktaGFzaCc7XG5pbXBvcnQgeyBIYXNoTGVuZ3RoIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0dGVycyc7XG5pbXBvcnQgeyBTaXplIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5jb25zdCBTdHlsZWRXcmFwcGVyID0gc3R5bGVkKCdkaXYnKSgoe30pID0+ICh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG59KSk7XG5cbmNvbnN0IExhYmVsQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSgoe30pID0+ICh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICBtYXJnaW5Cb3R0b206IDQsXG59KSk7XG5cbmNvbnN0IElucHV0Q29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSgoeyB0aGVtZSB9KSA9PiAoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgcGFkZGluZzogJzAgMTZweCcsXG4gIGhlaWdodDogMzYsXG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kUHJpbWFyeSxcbiAgYm9yZGVyOiB0aGVtZS5ib3JkZXIuYmFzZSxcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuYmFzZSxcbn0pKTtcblxuY29uc3QgU3VmZml4Q29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSgoe30pID0+ICh7XG4gIG1hcmdpbkxlZnQ6IDE2LFxufSkpO1xuXG5jb25zdCBTdWZmaXhUZXh0Q29udGFpbmVyID0gc3R5bGVkKFN1ZmZpeENvbnRhaW5lcikoKHsgdGhlbWUgfSkgPT4gKHtcbiAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFNlY29uZGFyeSxcbn0pKTtcblxuY29uc3QgUHJlZml4Q29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSgoe30pID0+ICh7XG4gIG1hcmdpblJpZ2h0OiAxNixcbn0pKTtcblxuZXhwb3J0IGVudW0gVGV4dFJvd1R5cGUge1xuICAnVGV4dCcgPSAndGV4dCcsXG4gICdIYXNoJyA9ICdoYXNoJyxcbiAgJ051bWJlcicgPSAnbnVtYmVyJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0Um93UHJvcHMge1xuICBsYWJlbD86IHN0cmluZztcbiAgcmlnaHRMYWJlbD86IHN0cmluZztcbiAgdGV4dD86IHN0cmluZyB8IG51bGw7XG4gIHByZWZpeEljb24/OiBSZWFjdE5vZGU7XG4gIHN1ZmZpeEljb24/OiBSZWFjdE5vZGU7XG4gIHN1ZmZpeFRleHQ/OiBzdHJpbmc7XG4gIHR5cGU6IFRleHRSb3dUeXBlO1xuICBsYWJlbEljb24/OiBSZWFjdE5vZGU7XG4gIGxhYmVsVG9vbHRpcFRleHQ/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gVGV4dFJvdyhwcm9wczogVGV4dFJvd1Byb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBsYWJlbCxcbiAgICByaWdodExhYmVsLFxuICAgIHRleHQsXG4gICAgcHJlZml4SWNvbixcbiAgICBzdWZmaXhUZXh0LFxuICAgIHN1ZmZpeEljb24sXG4gICAgdHlwZSxcbiAgICBsYWJlbEljb24sXG4gICAgbGFiZWxUb29sdGlwVGV4dCxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IHJlc3BvbnNpdmVIYXNoU2l6ZSA9IHVzZU1hdGNoTWVkaWEoXG4gICAgW0hhc2hMZW5ndGguU01BTEwsIEhhc2hMZW5ndGguTUVESVVNLCBIYXNoTGVuZ3RoLkxBUkdFLCBIYXNoTGVuZ3RoLkZVTExdLFxuICAgIFtdXG4gICk7XG4gIGNvbnN0IHJlc3BvbnNpdmVUcnVuY2F0ZVNpemUgPSB1c2VNYXRjaE1lZGlhPFNpemU+KFsyLCAzLCA0LCA1XSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZFdyYXBwZXI+XG4gICAgICA8TGFiZWxDb250YWluZXI+XG4gICAgICAgIHtsYWJlbCAmJiAoXG4gICAgICAgICAgPFRvb2x0aXAgdGl0bGU9e2xhYmVsVG9vbHRpcFRleHR9IGxpbWl0V2lkdGg+XG4gICAgICAgICAgICA8RmxleFJvdyBnYXA9ezN9IGFsaWduPXsnY2VudGVyJ30+XG4gICAgICAgICAgICAgIDxTdWJ0aXRsZVRleHQgc2l6ZT17MX0+e2xhYmVsfTwvU3VidGl0bGVUZXh0PlxuICAgICAgICAgICAgICB7bGFiZWxJY29ufVxuICAgICAgICAgICAgPC9GbGV4Um93PlxuICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgKX1cbiAgICAgICAge3JpZ2h0TGFiZWwgJiYgPFN1YnRpdGxlVGV4dCBzaXplPXsxfT57cmlnaHRMYWJlbH08L1N1YnRpdGxlVGV4dD59XG4gICAgICA8L0xhYmVsQ29udGFpbmVyPlxuICAgICAgPElucHV0Q29udGFpbmVyPlxuICAgICAgICB7cHJlZml4SWNvbiAmJiA8UHJlZml4Q29udGFpbmVyPntwcmVmaXhJY29ufTwvUHJlZml4Q29udGFpbmVyPn1cbiAgICAgICAgPEZsZXhSb3cgaXRlbXNTcGFjaW5nPXs0fT5cbiAgICAgICAgICB7dHlwZSA9PT0gVGV4dFJvd1R5cGUuSGFzaCA/IChcbiAgICAgICAgICAgIDxUb29sdGlwIHRpdGxlPXt0ZXh0fT5cbiAgICAgICAgICAgICAgPEJvZHlUZXh0IHNpemU9ezN9IG1vbm90eXBlPXt0cnVlfT5cbiAgICAgICAgICAgICAgICB7Zm9ybWF0SGFzaCh0ZXh0IHx8ICcnLCByZXNwb25zaXZlSGFzaFNpemUpfVxuICAgICAgICAgICAgICA8L0JvZHlUZXh0PlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8VHJ1bmNhdGVCb3ggc2l6ZT17cmVzcG9uc2l2ZVRydW5jYXRlU2l6ZX0+XG4gICAgICAgICAgICAgIDxUb29sdGlwIHRpdGxlPXt0ZXh0fT5cbiAgICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30gbW9ub3R5cGU9e3R5cGUgPT09IFRleHRSb3dUeXBlLk51bWJlcn0+XG4gICAgICAgICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICAgICAgICA8L0JvZHlUZXh0PlxuICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICA8L1RydW5jYXRlQm94PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPENvcHlIYXNoIHZhbHVlPXt0ZXh0ID8gdGV4dCA6ICcnfSBtaW5pZmllZCB2YXJpYXRpb249XCJncmF5XCIgLz5cbiAgICAgICAgPC9GbGV4Um93PlxuICAgICAgICB7c3VmZml4SWNvbiAmJiA8U3VmZml4Q29udGFpbmVyPntzdWZmaXhJY29ufTwvU3VmZml4Q29udGFpbmVyPn1cbiAgICAgICAge3N1ZmZpeFRleHQgJiYgKFxuICAgICAgICAgIDxTdWZmaXhUZXh0Q29udGFpbmVyPlxuICAgICAgICAgICAgPEJvZHlUZXh0IHNpemU9ezN9PntzdWZmaXhUZXh0fTwvQm9keVRleHQ+XG4gICAgICAgICAgPC9TdWZmaXhUZXh0Q29udGFpbmVyPlxuICAgICAgICApfVxuICAgICAgPC9JbnB1dENvbnRhaW5lcj5cbiAgICA8L1N0eWxlZFdyYXBwZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRSb3c7XG4iXX0=