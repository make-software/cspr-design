import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from 'styled-components';
import { BodyText } from '../body-text/body-text';
import { FlexRow } from '../flex-row/flex-row';
import { TruncateBox } from '../truncate-box/truncate-box';
import { formatHash } from '../../utils/formatters';
import { Tooltip } from '../tooltip/tooltip';
import { useMatchMedia } from '../../utils/match-media';
import { CopyHash } from '../copy-hash/copy-hash';
import { HashLength } from '../../utils/formatters';
var StyledWrapper = styled('div')(function (_a) { return ({
    display: 'flex',
    flexDirection: 'column',
}); });
var LabelContainer = styled('div')(function (_a) { return ({
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 4,
}); });
var InputContainer = styled('div')(function (_a) {
    var theme = _a.theme;
    return ({
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '0 16px',
        height: 36,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        border: theme.border.base,
        borderRadius: theme.borderRadius.base,
    });
});
var SuffixContainer = styled('div')(function (_a) { return ({
    marginLeft: 16,
}); });
var SuffixTextContainer = styled(SuffixContainer)(function (_a) {
    var theme = _a.theme;
    return ({
        color: theme.styleguideColors.contentSecondary,
    });
});
var PrefixContainer = styled('div')(function (_a) { return ({
    marginRight: 16,
}); });
export var TextRowType;
(function (TextRowType) {
    TextRowType["Text"] = "text";
    TextRowType["Hash"] = "hash";
    TextRowType["Number"] = "number";
})(TextRowType || (TextRowType = {}));
export function TextRow(props) {
    var label = props.label, rightLabel = props.rightLabel, text = props.text, prefixIcon = props.prefixIcon, suffixText = props.suffixText, suffixIcon = props.suffixIcon, type = props.type, labelIcon = props.labelIcon, labelTooltipText = props.labelTooltipText;
    var responsiveHashSize = useMatchMedia([HashLength.SMALL, HashLength.MEDIUM, HashLength.LARGE], []);
    var responsiveTruncateSize = useMatchMedia([2, 3, 4, 5], []);
    return (_jsxs(StyledWrapper, { children: [_jsxs(LabelContainer, { children: [label && (_jsx(Tooltip, __assign({ title: labelTooltipText, limitWidth: true }, { children: _jsxs(FlexRow, __assign({ gap: 3, align: 'center' }, { children: [_jsx(BodyText, __assign({ size: 1 }, { children: label })), labelIcon] })) }))), rightLabel && _jsx(BodyText, __assign({ size: 1 }, { children: rightLabel }))] }), _jsxs(InputContainer, { children: [prefixIcon && _jsx(PrefixContainer, { children: prefixIcon }), _jsxs(FlexRow, __assign({ itemsSpacing: 4 }, { children: [type === TextRowType.Hash ? (_jsx(Tooltip, __assign({ title: text }, { children: _jsx(BodyText, __assign({ size: 3, monotype: true, scale: "xs" }, { children: formatHash(text || '', responsiveHashSize) })) }))) : (_jsx(TruncateBox, __assign({ size: responsiveTruncateSize }, { children: _jsx(Tooltip, __assign({ title: text }, { children: _jsx(BodyText, __assign({ size: 3, monotype: type === TextRowType.Number }, { children: text })) })) }))), _jsx(CopyHash, { value: text ? text : '', minified: true, variation: "gray" })] })), suffixIcon && _jsx(SuffixContainer, { children: suffixIcon }), suffixText && (_jsx(SuffixTextContainer, { children: _jsx(BodyText, __assign({ size: 3 }, { children: suffixText })) }))] })] }));
}
export default TextRow;
//# sourceMappingURL=data:application/json;base64,