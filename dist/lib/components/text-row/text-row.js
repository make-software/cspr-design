import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from 'styled-components';
import { BodyText } from '../body-text/body-text';
import { FlexRow } from '../flex-row/flex-row';
import { TruncateBox } from '../truncate-box/truncate-box';
import { formatHash } from '../../utils/formatters';
import { Tooltip } from '../tooltip/tooltip';
import { useMatchMedia } from '../../utils/match-media';
import { CopyHash } from '../copy-hash/copy-hash';
import { HashLength } from '../../utils/formatters';
var StyledWrapper = styled('div')(function (_a) { return ({
    display: 'flex',
    flexDirection: 'column',
}); });
var LabelContainer = styled('div')(function (_a) { return ({
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 4,
}); });
var InputContainer = styled('div')(function (_a) {
    var theme = _a.theme;
    return ({
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '0 16px',
        height: 36,
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        border: theme.border.base,
        borderRadius: theme.borderRadius.base,
    });
});
var SuffixContainer = styled('div')(function (_a) { return ({
    marginLeft: 16,
}); });
var SuffixTextContainer = styled(SuffixContainer)(function (_a) {
    var theme = _a.theme;
    return ({
        color: theme.styleguideColors.contentSecondary,
    });
});
var PrefixContainer = styled('div')(function (_a) { return ({
    marginRight: 16,
}); });
export var TextRowType;
(function (TextRowType) {
    TextRowType["Text"] = "text";
    TextRowType["Hash"] = "hash";
    TextRowType["Number"] = "number";
})(TextRowType || (TextRowType = {}));
export function TextRow(props) {
    var label = props.label, rightLabel = props.rightLabel, text = props.text, prefixIcon = props.prefixIcon, suffixText = props.suffixText, suffixIcon = props.suffixIcon, type = props.type, labelIcon = props.labelIcon, labelTooltipText = props.labelTooltipText;
    var responsiveHashSize = useMatchMedia([HashLength.SMALL, HashLength.MEDIUM, HashLength.LARGE], []);
    var responsiveTruncateSize = useMatchMedia([2, 3, 4, 5], []);
    return (_jsxs(StyledWrapper, { children: [_jsxs(LabelContainer, { children: [label && (_jsx(Tooltip, __assign({ title: labelTooltipText, limitWidth: true }, { children: _jsxs(FlexRow, __assign({ gap: 3, align: 'center' }, { children: [_jsx(BodyText, __assign({ size: 1 }, { children: label })), labelIcon] })) }))), rightLabel && _jsx(BodyText, __assign({ size: 1 }, { children: rightLabel }))] }), _jsxs(InputContainer, { children: [prefixIcon && _jsx(PrefixContainer, { children: prefixIcon }), _jsxs(FlexRow, __assign({ itemsSpacing: 4 }, { children: [type === TextRowType.Hash ? (_jsx(Tooltip, __assign({ title: text }, { children: _jsx(BodyText, __assign({ size: 3, monotype: true, scale: "xs" }, { children: formatHash(text || '', responsiveHashSize) })) }))) : (_jsx(TruncateBox, __assign({ size: responsiveTruncateSize }, { children: _jsx(Tooltip, __assign({ title: text }, { children: _jsx(BodyText, __assign({ size: 3, monotype: type === TextRowType.Number }, { children: text })) })) }))), _jsx(CopyHash, { value: text ? text : '', minified: true, variation: "gray" })] })), suffixIcon && _jsx(SuffixContainer, { children: suffixIcon }), suffixText && (_jsx(SuffixTextContainer, { children: _jsx(BodyText, __assign({ size: 3 }, { children: suffixText })) }))] })] }));
}
export default TextRow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1yb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvdGV4dC1yb3cvdGV4dC1yb3cudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUM7QUFDdkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUdwRCxJQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBQyxFQUFFLElBQUssT0FBQSxDQUFDO0lBQzNDLE9BQU8sRUFBRSxNQUFNO0lBQ2YsYUFBYSxFQUFFLFFBQVE7Q0FDeEIsQ0FBQyxFQUgwQyxDQUcxQyxDQUFDLENBQUM7QUFFSixJQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBQyxFQUFFLElBQUssT0FBQSxDQUFDO0lBQzVDLE9BQU8sRUFBRSxNQUFNO0lBQ2YsYUFBYSxFQUFFLEtBQUs7SUFDcEIsVUFBVSxFQUFFLFFBQVE7SUFDcEIsY0FBYyxFQUFFLGVBQWU7SUFDL0IsWUFBWSxFQUFFLENBQUM7Q0FDaEIsQ0FBQyxFQU4yQyxDQU0zQyxDQUFDLENBQUM7QUFFSixJQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMs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Q0FBQyxDQUFDLENBQzNCLEtBQUMsT0FBTyxhQUFDLEtBQUssRUFBRSxJQUFJLGdCQUNsQixLQUFDLFFBQVEsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsUUFBQyxLQUFLLEVBQUUsSUFBSSxnQkFDcEMsVUFBVSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsa0JBQWtCLENBQUMsSUFDbEMsSUFDSCxDQUNYLENBQUMsQ0FBQyxDQUFDLENBQ0YsS0FBQyxXQUFXLGFBQUMsSUFBSSxFQUFFLHNCQUFzQixnQkFDdkMsS0FBQyxPQUFPLGFBQUMsS0FBSyxFQUFFLElBQUksZ0JBQ2xCLEtBQUMsUUFBUSxhQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksS0FBSyxXQUFXLENBQUMsTUFBTSxnQkFDckQsSUFBSSxJQUNJLElBQ0gsSUFDRSxDQUNmLEVBQ0QsS0FBQyxRQUFRLElBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxRQUFDLFNBQVMsRUFBQyxNQUFNLEdBQUcsS0FDdkQsRUFDVCxVQUFVLElBQUksS0FBQyxlQUFlLGNBQUUsVUFBVSxHQUFtQixFQUM3RCxVQUFVLElBQUksQ0FDYixLQUFDLG1CQUFtQixjQUNsQixLQUFDLFFBQVEsYUFBQyxJQUFJLEVBQUUsQ0FBQyxnQkFBRyxVQUFVLElBQVksR0FDdEIsQ0FDdkIsSUFDYyxJQUNILENBQ2pCLENBQUM7QUFDSixDQUFDO0FBRUQsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcclxuaW1wb3J0IHsgQm9keVRleHQgfSBmcm9tICcuLi9ib2R5LXRleHQvYm9keS10ZXh0JztcclxuaW1wb3J0IHsgRmxleFJvdyB9IGZyb20gJy4uL2ZsZXgtcm93L2ZsZXgtcm93JztcclxuaW1wb3J0IHsgU3VidGl0bGVUZXh0IH0gZnJvbSAnLi4vc3VidGl0bGUtdGV4dC9zdWJ0aXRsZS10ZXh0JztcclxuaW1wb3J0IHsgVHJ1bmNhdGVCb3ggfSBmcm9tICcuLi90cnVuY2F0ZS1ib3gvdHJ1bmNhdGUtYm94JztcclxuaW1wb3J0IHsgZm9ybWF0SGFzaCB9IGZyb20gJy4uLy4uL3V0aWxzL2Zvcm1hdHRlcnMnO1xyXG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnLi4vdG9vbHRpcC90b29sdGlwJztcclxuaW1wb3J0IHsgdXNlTWF0Y2hNZWRpYSB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGNoLW1lZGlhJztcclxuaW1wb3J0IHsgQ29weUhhc2ggfSBmcm9tICcuLi9jb3B5LWhhc2gvY29weS1oYXNoJztcclxuaW1wb3J0IHsgSGFzaExlbmd0aCB9IGZyb20gJy4uLy4uL3V0aWxzL2Zvcm1hdHRlcnMnO1xyXG5pbXBvcnQgeyBTaXplIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xyXG5cclxuY29uc3QgU3R5bGVkV3JhcHBlciA9IHN0eWxlZCgnZGl2JykoKHt9KSA9PiAoe1xyXG4gIGRpc3BsYXk6ICdmbGV4JyxcclxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcclxufSkpO1xyXG5cclxuY29uc3QgTGFiZWxDb250YWluZXIgPSBzdHlsZWQoJ2RpdicpKCh7fSkgPT4gKHtcclxuICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgZmxleERpcmVjdGlvbjogJ3JvdycsXHJcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcclxuICBtYXJnaW5Cb3R0b206IDQsXHJcbn0pKTtcclxuXHJcbmNvbnN0IElucHV0Q29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSgoeyB0aGVtZSB9KSA9PiAoe1xyXG4gIGRpc3BsYXk6ICdmbGV4JyxcclxuICBmbGV4RGlyZWN0aW9uOiAncm93JyxcclxuICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxyXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gIHBhZGRpbmc6ICcwIDE2cHgnLFxyXG4gIGhlaWdodDogMzYsXHJcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmJhY2tncm91bmRQcmltYXJ5LFxyXG4gIGJvcmRlcjogdGhlbWUuYm9yZGVyLmJhc2UsXHJcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuYmFzZSxcclxufSkpO1xyXG5cclxuY29uc3QgU3VmZml4Q29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSgoe30pID0+ICh7XHJcbiAgbWFyZ2luTGVmdDogMTYsXHJcbn0pKTtcclxuXHJcbmNvbnN0IFN1ZmZpeFRleHRDb250YWluZXIgPSBzdHlsZWQoU3VmZml4Q29udGFpbmVyKSgoeyB0aGVtZSB9KSA9PiAoe1xyXG4gIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRTZWNvbmRhcnksXHJcbn0pKTtcclxuXHJcbmNvbnN0IFByZWZpeENvbnRhaW5lciA9IHN0eWxlZCgnZGl2JykoKHt9KSA9PiAoe1xyXG4gIG1hcmdpblJpZ2h0OiAxNixcclxufSkpO1xyXG5cclxuZXhwb3J0IGVudW0gVGV4dFJvd1R5cGUge1xyXG4gICdUZXh0JyA9ICd0ZXh0JyxcclxuICAnSGFzaCcgPSAnaGFzaCcsXHJcbiAgJ051bWJlcicgPSAnbnVtYmVyJyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUZXh0Um93UHJvcHMge1xyXG4gIGxhYmVsPzogc3RyaW5nO1xyXG4gIHJpZ2h0TGFiZWw/OiBzdHJpbmc7XHJcbiAgdGV4dD86IHN0cmluZyB8IG51bGw7XHJcbiAgcHJlZml4SWNvbj86IFJlYWN0Tm9kZTtcclxuICBzdWZmaXhJY29uPzogUmVhY3ROb2RlO1xyXG4gIHN1ZmZpeFRleHQ/OiBzdHJpbmc7XHJcbiAgdHlwZTogVGV4dFJvd1R5cGU7XHJcbiAgbGFiZWxJY29uPzogUmVhY3ROb2RlO1xyXG4gIGxhYmVsVG9vbHRpcFRleHQ/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIFRleHRSb3cocHJvcHM6IFRleHRSb3dQcm9wcykge1xyXG4gIGNvbnN0IHtcclxuICAgIGxhYmVsLFxyXG4gICAgcmlnaHRMYWJlbCxcclxuICAgIHRleHQsXHJcbiAgICBwcmVmaXhJY29uLFxyXG4gICAgc3VmZml4VGV4dCxcclxuICAgIHN1ZmZpeEljb24sXHJcbiAgICB0eXBlLFxyXG4gICAgbGFiZWxJY29uLFxyXG4gICAgbGFiZWxUb29sdGlwVGV4dCxcclxuICB9ID0gcHJvcHM7XHJcblxyXG4gIGNvbnN0IHJlc3BvbnNpdmVIYXNoU2l6ZSA9IHVzZU1hdGNoTWVkaWEoXHJcbiAgICBbSGFzaExlbmd0aC5TTUFMTCwgSGFzaExlbmd0aC5NRURJVU0sIEhhc2hMZW5ndGguTEFSR0VdLFxyXG4gICAgW11cclxuICApO1xyXG4gIGNvbnN0IHJlc3BvbnNpdmVUcnVuY2F0ZVNpemUgPSB1c2VNYXRjaE1lZGlhPFNpemU+KFsyLCAzLCA0LCA1XSwgW10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFN0eWxlZFdyYXBwZXI+XHJcbiAgICAgIDxMYWJlbENvbnRhaW5lcj5cclxuICAgICAgICB7bGFiZWwgJiYgKFxyXG4gICAgICAgICAgPFRvb2x0aXAgdGl0bGU9e2xhYmVsVG9vbHRpcFRleHR9IGxpbWl0V2lkdGg+XHJcbiAgICAgICAgICAgIDxGbGV4Um93IGdhcD17M30gYWxpZ249eydjZW50ZXInfT5cclxuICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17MX0+e2xhYmVsfTwvQm9keVRleHQ+XHJcbiAgICAgICAgICAgICAge2xhYmVsSWNvbn1cclxuICAgICAgICAgICAgPC9GbGV4Um93PlxyXG4gICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICl9XHJcbiAgICAgICAge3JpZ2h0TGFiZWwgJiYgPEJvZHlUZXh0IHNpemU9ezF9PntyaWdodExhYmVsfTwvQm9keVRleHQ+fVxyXG4gICAgICA8L0xhYmVsQ29udGFpbmVyPlxyXG4gICAgICA8SW5wdXRDb250YWluZXI+XHJcbiAgICAgICAge3ByZWZpeEljb24gJiYgPFByZWZpeENvbnRhaW5lcj57cHJlZml4SWNvbn08L1ByZWZpeENvbnRhaW5lcj59XHJcbiAgICAgICAgPEZsZXhSb3cgaXRlbXNTcGFjaW5nPXs0fT5cclxuICAgICAgICAgIHt0eXBlID09PSBUZXh0Um93VHlwZS5IYXNoID8gKFxyXG4gICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dGV4dH0+XHJcbiAgICAgICAgICAgICAgPEJvZHlUZXh0IHNpemU9ezN9IG1vbm90eXBlIHNjYWxlPXtcInhzXCJ9PlxyXG4gICAgICAgICAgICAgICAge2Zvcm1hdEhhc2godGV4dCB8fCAnJywgcmVzcG9uc2l2ZUhhc2hTaXplKX1cclxuICAgICAgICAgICAgICA8L0JvZHlUZXh0PlxyXG4gICAgICAgICAgICA8L1Rvb2x0aXA+XHJcbiAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICA8VHJ1bmNhdGVCb3ggc2l6ZT17cmVzcG9uc2l2ZVRydW5jYXRlU2l6ZX0+XHJcbiAgICAgICAgICAgICAgPFRvb2x0aXAgdGl0bGU9e3RleHR9PlxyXG4gICAgICAgICAgICAgICAgPEJvZHlUZXh0IHNpemU9ezN9IG1vbm90eXBlPXt0eXBlID09PSBUZXh0Um93VHlwZS5OdW1iZXJ9PlxyXG4gICAgICAgICAgICAgICAgICB7dGV4dH1cclxuICAgICAgICAgICAgICAgIDwvQm9keVRleHQ+XHJcbiAgICAgICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICAgICA8L1RydW5jYXRlQm94PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICAgIDxDb3B5SGFzaCB2YWx1ZT17dGV4dCA/IHRleHQgOiAnJ30gbWluaWZpZWQgdmFyaWF0aW9uPVwiZ3JheVwiIC8+XHJcbiAgICAgICAgPC9GbGV4Um93PlxyXG4gICAgICAgIHtzdWZmaXhJY29uICYmIDxTdWZmaXhDb250YWluZXI+e3N1ZmZpeEljb259PC9TdWZmaXhDb250YWluZXI+fVxyXG4gICAgICAgIHtzdWZmaXhUZXh0ICYmIChcclxuICAgICAgICAgIDxTdWZmaXhUZXh0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30+e3N1ZmZpeFRleHR9PC9Cb2R5VGV4dD5cclxuICAgICAgICAgIDwvU3VmZml4VGV4dENvbnRhaW5lcj5cclxuICAgICAgICApfVxyXG4gICAgICA8L0lucHV0Q29udGFpbmVyPlxyXG4gICAgPC9TdHlsZWRXcmFwcGVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRSb3c7XHJcbiJdfQ==