import { __assign, __makeTemplateObject } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled from 'styled-components';
import Avatar from './avatar';
import FlexRow from '../flex-row/flex-row';
import FlexColumn from '../flex-column/flex-column';
import SubtitleText from '../subtitle-text/subtitle-text';
export default {
    component: Avatar,
    title: 'Avatar',
    args: {
        size: 'default',
        hash: '01f5f1fa995ab7e966428e5a1aed797526ad5b2454c50a63a7aaa2dfeae6a996c2',
    },
};
var StyledBlock = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: flex;\n  align-items: center;\n"], ["\n  display: flex;\n  align-items: center;\n"])));
var Template = function (args) { return (_jsx(FlexRow, __assign({ itemsSpacing: 10 }, { children: _jsx(FlexColumn, __assign({ itemsSpacing: 10 }, { children: _jsx(Avatar, __assign({}, args)) })) }))); };
var AvatarTypes = function (_a) {
    var size = _a.size;
    return (_jsxs(_Fragment, { children: [_jsx(SubtitleText, __assign({ size: 2 }, { children: size })), _jsxs(StyledBlock, { children: [_jsx(Avatar, { hash: '2132460a950062fd30ad8a54cda9d0bed7ee1571edeb65459f62f3562ed82884', size: size }), _jsx(Avatar, { hash: 'fhrse934-3400343!dede@frfrkrmbTFSDEFTH', size: size }), _jsx(Avatar, { isErc20: true, size: size }), _jsx(Avatar, { src: 'https://make.services/logo.svg', size: size })] })] }));
};
export var allOptions = function () { return (_jsx(FlexRow, __assign({ itemsSpacing: 10 }, { children: _jsxs(FlexColumn, __assign({ itemsSpacing: 10 }, { children: [_jsx(AvatarTypes, { size: 'small' }), _jsx(AvatarTypes, { size: 'default' }), _jsx(AvatarTypes, { size: 'average' }), _jsx(AvatarTypes, { size: 'medium' }), _jsx(AvatarTypes, { size: 'big' })] })) }))); };
export var Primary = Template.bind({});
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLnN0b3JpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvYXZhdGFyL2F2YXRhci5zdG9yaWVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZDLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQTtBQUM3QixPQUFPLE9BQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUMzQyxPQUFPLFVBQVUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLFlBQVksTUFBTSxnQ0FBZ0MsQ0FBQztBQUUxRCxlQUFlO0lBQ1gsU0FBUyxFQUFFLE1BQU07SUFDakIsS0FBSyxFQUFFLFFBQVE7SUFDZixJQUFJLEVBQUU7UUFDRixJQUFJLEVBQUUsU0FBUztRQUNmLElBQUksRUFBRSxvRUFBb0U7S0FDN0U7Q0FDNEIsQ0FBQztBQUVsQyxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsR0FBRyxpSEFBQSw4Q0FHN0IsSUFBQSxDQUFDO0FBRUYsSUFBTSxRQUFRLEdBQWtDLFVBQUMsSUFBSSxJQUFLLE9BQUEsQ0FDdEQsS0FBQyxPQUFPLGFBQUMsWUFBWSxFQUFFLEVBQUUsZ0JBQ3JCLEtBQUMsVUFBVSxhQUFDLFlBQVksRUFBRSxFQUFFLGdCQUN4QixLQUFDLE1BQU0sZUFBSyxJQUFJLEVBQUcsSUFDVixJQUNQLENBQ2IsRUFOeUQsQ0FNekQsQ0FBQztBQUNGLElBQU0sV0FBVyxHQUFHLFVBQUMsRUFBTTtRQUFMLElBQUksVUFBQTtJQUFNLE9BQUEsQ0FDNUIsOEJBQ0ksS0FBQyxZQUFZLGFBQUMsSUFBSSxFQUFFLENBQUMsZ0JBQUcsSUFBSSxJQUFnQixFQUM1QyxNQUFDLFdBQVcsZUFDUixLQUFDLE1BQU0sSUFDSCxJQUFJLEVBQUMsa0VBQWtFLEVBQ3ZFLElBQUksRUFBRSxJQUFJLEdBQUcsRUFDakIsS0FBQyxNQUFNLElBQUMsSUFBSSxFQUFDLHdDQUF3QyxFQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsRUFDbkUsS0FBQyxNQUFNLElBQUMsT0FBTyxRQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsRUFDN0IsS0FBQyxNQUFNLElBQUMsR0FBRyxFQUFDLGdDQUFnQyxFQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsSUFDaEQsSUFDZixDQUNOO0FBWitCLENBWS9CLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUcsY0FBTSxPQUFBLENBQzVCLEtBQUMsT0FBTyxhQUFDLFlBQVksRUFBRSxFQUFFLGdCQUNyQixNQUFDLFVBQVUsYUFBQyxZQUFZLEVBQUUsRUFBRSxpQkFDeEIsS0FBQyxXQUFXLElBQUMsSUFBSSxFQUFDLE9BQU8sR0FBRSxFQUMzQixLQUFDLFdBQVcsSUFBQyxJQUFJLEVBQUMsU0FBUyxHQUFFLEVBQzdCLEtBQUMsV0FBVyxJQUFDLElBQUksRUFBQyxTQUFTLEdBQUUsRUFDN0IsS0FBQyxXQUFXLElBQUMsSUFBSSxFQUFDLFFBQVEsR0FBRSxFQUM1QixLQUFDLFdBQVcsSUFBQyxJQUFJLEVBQUMsS0FBSyxHQUFFLEtBQ2hCLElBQ1AsQ0FDYixFQVYrQixDQVUvQixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29tcG9uZW50TWV0YSwgQ29tcG9uZW50U3RvcnkgfSBmcm9tICdAc3Rvcnlib29rL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IEF2YXRhciBmcm9tICcuL2F2YXRhcidcbmltcG9ydCBGbGV4Um93IGZyb20gJy4uL2ZsZXgtcm93L2ZsZXgtcm93JztcbmltcG9ydCBGbGV4Q29sdW1uIGZyb20gJy4uL2ZsZXgtY29sdW1uL2ZsZXgtY29sdW1uJztcbmltcG9ydCBTdWJ0aXRsZVRleHQgZnJvbSAnLi4vc3VidGl0bGUtdGV4dC9zdWJ0aXRsZS10ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudDogQXZhdGFyLFxuICAgIHRpdGxlOiAnQXZhdGFyJyxcbiAgICBhcmdzOiB7XG4gICAgICAgIHNpemU6ICdkZWZhdWx0JyxcbiAgICAgICAgaGFzaDogJzAxZjVmMWZhOTk1YWI3ZTk2NjQyOGU1YTFhZWQ3OTc1MjZhZDViMjQ1NGM1MGE2M2E3YWFhMmRmZWFlNmE5OTZjMicsXG4gICAgfSxcbn0gYXMgQ29tcG9uZW50TWV0YTx0eXBlb2YgQXZhdGFyPjtcblxuY29uc3QgU3R5bGVkQmxvY2sgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgVGVtcGxhdGU6IENvbXBvbmVudFN0b3J5PHR5cGVvZiBBdmF0YXI+ID0gKGFyZ3MpID0+IChcbiAgICA8RmxleFJvdyBpdGVtc1NwYWNpbmc9ezEwfT5cbiAgICAgICAgPEZsZXhDb2x1bW4gaXRlbXNTcGFjaW5nPXsxMH0+XG4gICAgICAgICAgICA8QXZhdGFyIHsuLi5hcmdzfS8+XG4gICAgICAgIDwvRmxleENvbHVtbj5cbiAgICA8L0ZsZXhSb3c+XG4pO1xuY29uc3QgQXZhdGFyVHlwZXMgPSAoe3NpemV9KSA9PiAoXG4gICAgPD5cbiAgICAgICAgPFN1YnRpdGxlVGV4dCBzaXplPXsyfT57c2l6ZX08L1N1YnRpdGxlVGV4dD5cbiAgICAgICAgPFN0eWxlZEJsb2NrPlxuICAgICAgICAgICAgPEF2YXRhclxuICAgICAgICAgICAgICAgIGhhc2g9JzIxMzI0NjBhOTUwMDYyZmQzMGFkOGE1NGNkYTlkMGJlZDdlZTE1NzFlZGViNjU0NTlmNjJmMzU2MmVkODI4ODQnXG4gICAgICAgICAgICAgICAgc2l6ZT17c2l6ZX0vPlxuICAgICAgICAgICAgPEF2YXRhciBoYXNoPSdmaHJzZTkzNC0zNDAwMzQzIWRlZGVAZnJmcmtybWJURlNERUZUSCcgc2l6ZT17c2l6ZX0vPlxuICAgICAgICAgICAgPEF2YXRhciBpc0VyYzIwIHNpemU9e3NpemV9Lz5cbiAgICAgICAgICAgIDxBdmF0YXIgc3JjPSdodHRwczovL21ha2Uuc2VydmljZXMvbG9nby5zdmcnIHNpemU9e3NpemV9Lz5cbiAgICAgICAgPC9TdHlsZWRCbG9jaz5cbiAgICA8Lz5cbik7XG5cbmV4cG9ydCBjb25zdCBhbGxPcHRpb25zID0gKCkgPT4gKFxuICAgIDxGbGV4Um93IGl0ZW1zU3BhY2luZz17MTB9PlxuICAgICAgICA8RmxleENvbHVtbiBpdGVtc1NwYWNpbmc9ezEwfT5cbiAgICAgICAgICAgIDxBdmF0YXJUeXBlcyBzaXplPSdzbWFsbCcvPlxuICAgICAgICAgICAgPEF2YXRhclR5cGVzIHNpemU9J2RlZmF1bHQnLz5cbiAgICAgICAgICAgIDxBdmF0YXJUeXBlcyBzaXplPSdhdmVyYWdlJy8+XG4gICAgICAgICAgICA8QXZhdGFyVHlwZXMgc2l6ZT0nbWVkaXVtJy8+XG4gICAgICAgICAgICA8QXZhdGFyVHlwZXMgc2l6ZT0nYmlnJy8+XG4gICAgICAgIDwvRmxleENvbHVtbj5cbiAgICA8L0ZsZXhSb3c+XG4pO1xuXG5leHBvcnQgY29uc3QgUHJpbWFyeSA9IFRlbXBsYXRlLmJpbmQoe30pO1xuXG4iXX0=