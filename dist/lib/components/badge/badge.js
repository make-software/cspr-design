import { __assign } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import styled from 'styled-components';
import Label from '../label/label';
var getBadgeBgColors = function (theme, color) {
    var bgColor = {
        green: theme.styleguideColors.fillGreen,
        violet: theme.styleguideColors.fillVioletGradient,
        blue: theme.colorSpecialCase.blueBanner2,
        gray: theme.styleguideColors.contentQuaternary,
        fillBlueGradient: theme.styleguideColors.fillBlueGradient,
        lightBlue: theme.styleguideColors.contentLightBlue,
    }[color];
    return bgColor || color;
};
var StyledBadge = styled.div(function (_a) {
    var theme = _a.theme, bgColor = _a.bgColor, textColor = _a.textColor;
    return ({
        display: 'flex',
        alignItems: 'center',
        width: 'fit-content',
        color: textColor ? textColor : theme.styleguideColors.contentOnFill,
        background: getBadgeBgColors(theme, bgColor),
        borderRadius: '40px',
        minHeight: '17px',
        padding: '0 6px 1px 6px',
    });
});
var StyledLabelContentWrapper = styled.div(function (_a) {
    var theme = _a.theme;
    return ({
        a: {
            cursor: 'pointer',
            color: theme.styleguideColors.contentOnFill,
        },
        'a:hover': {
            color: theme.styleguideColors.contentQuaternary,
        },
    });
});
export var Badge = React.forwardRef(function (props, ref) { return (_jsx(StyledBadge, __assign({ ref: ref, bgColor: props.variation || 'green', textColor: props.textColor }, { children: _jsx(Label, __assign({ size: 2, capitalize: props.capitalize || true, lineHeight: props.lineHeight || 'sm' }, { children: _jsx(StyledLabelContentWrapper, { children: props.label }) })) }))); });
export default Badge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvYmFkZ2UvYmFkZ2UudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZDLE9BQU8sS0FBSyxNQUFNLGdCQUFnQixDQUFDO0FBd0JuQyxJQUFNLGdCQUFnQixHQUFHLFVBQUMsS0FBSyxFQUFFLEtBQTJCO0lBQzFELElBQU0sT0FBTyxHQUFHO1FBQ2QsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTO1FBQ3ZDLE1BQU0sRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCO1FBQ2pELElBQUksRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBVztRQUN4QyxJQUFJLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQjtRQUM5QyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCO1FBQ3pELFNBQVMsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCO0tBQ25ELENBQUMsS0FBSyxDQUFDLENBQUM7SUFDVCxPQUFPLE9BQU8sSUFBSSxLQUFLLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FDNUIsVUFBQyxFQUE2QjtRQUEzQixLQUFLLFdBQUEsRUFBRSxPQUFPLGFBQUEsRUFBRSxTQUFTLGVBQUE7SUFBTyxPQUFBLENBQUM7UUFDbEMsT0FBTyxFQUFFLE1BQU07UUFDZixVQUFVLEVBQUUsUUFBUTtRQUNwQixLQUFLLEVBQUUsYUFBYTtRQUNwQixLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhO1FBQ25FLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQzVDLFlBQVksRUFBRSxNQUFNO1FBQ3BCLFNBQVMsRUFBRSxNQUFNO1FBQ2pCLE9BQU8sRUFBRSxlQUFlO0tBQ3pCLENBQUM7QUFUaUMsQ0FTakMsQ0FDSCxDQUFDO0FBRUYsSUFBTSx5QkFBeUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBUztRQUFQLEtBQUssV0FBQTtJQUFPLE9BQUEsQ0FBQztRQUMzRCxDQUFDLEVBQUU7WUFDRCxNQUFNLEVBQUUsU0FBUztZQUNqQixLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGFBQWE7U0FDNUM7UUFDRCxTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQjtTQUNoRDtLQUNGLENBQUM7QUFSMEQsQ0FRMUQsQ0FBQyxDQUFDO0FBRUosTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQ25DLFVBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSyxPQUFBLENBQ2QsS0FBQyxXQUFXLGFBQ1YsR0FBRyxFQUFFLEdBQUcsRUFDUixPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsSUFBSSxPQUFPLEVBQ25DLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxnQkFFMUIsS0FBQyxLQUFLLGFBQ0osSUFBSSxFQUFFLENBQUMsRUFDUCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQ3BDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxJQUFJLElBQUksZ0JBRXBDLEtBQUMseUJBQXlCLGNBQUUsS0FBSyxDQUFDLEtBQUssR0FBNkIsSUFDOUQsSUFDSSxDQUNmLEVBZGUsQ0FjZixDQUNGLENBQUM7QUFFRixlQUFlLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBMYWJlbCBmcm9tICcuLi9sYWJlbC9sYWJlbCc7XG5pbXBvcnQgeyBCYXNlUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbnR5cGUgQmFkZ2VCYWNrZ3JvdW5kQ29sb3IgPVxuICB8ICdncmVlbidcbiAgfCAndmlvbGV0J1xuICB8ICdibHVlJ1xuICB8ICdncmF5J1xuICB8ICdmaWxsQmx1ZUdyYWRpZW50J1xuICB8IHN0cmluZztcblxuaW50ZXJmYWNlIFN0eWxlZEJhZGdlUHJvcHMge1xuICBiZ0NvbG9yOiBCYWRnZUJhY2tncm91bmRDb2xvcjtcbiAgdGV4dENvbG9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhZGdlUHJvcHMgZXh0ZW5kcyBCYXNlUHJvcHMge1xuICBsYWJlbDogc3RyaW5nIHwgUmVhY3QuUmVhY3ROb2RlO1xuICB2YXJpYXRpb24/OiBCYWRnZUJhY2tncm91bmRDb2xvcjtcbiAgdGV4dENvbG9yPzogc3RyaW5nO1xuICBjYXBpdGFsaXplPzogYm9vbGVhbjtcbiAgbGluZUhlaWdodD86ICd4eHMnIHwgJ3hzJyB8ICdzbSc7XG59XG5cbmNvbnN0IGdldEJhZGdlQmdDb2xvcnMgPSAodGhlbWUsIGNvbG9yOiBCYWRnZUJhY2tncm91bmRDb2xvcikgPT4ge1xuICBjb25zdCBiZ0NvbG9yID0ge1xuICAgIGdyZWVuOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxHcmVlbixcbiAgICB2aW9sZXQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFZpb2xldEdyYWRpZW50LFxuICAgIGJsdWU6IHRoZW1lLmNvbG9yU3BlY2lhbENhc2UuYmx1ZUJhbm5lcjIsXG4gICAgZ3JheTogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50UXVhdGVybmFyeSxcbiAgICBmaWxsQmx1ZUdyYWRpZW50OiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxCbHVlR3JhZGllbnQsXG4gICAgbGlnaHRCbHVlOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRMaWdodEJsdWUsXG4gIH1bY29sb3JdO1xuICByZXR1cm4gYmdDb2xvciB8fCBjb2xvcjtcbn07XG5cbmNvbnN0IFN0eWxlZEJhZGdlID0gc3R5bGVkLmRpdjxTdHlsZWRCYWRnZVByb3BzPihcbiAgKHsgdGhlbWUsIGJnQ29sb3IsIHRleHRDb2xvciB9KSA9PiAoe1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICB3aWR0aDogJ2ZpdC1jb250ZW50JyxcbiAgICBjb2xvcjogdGV4dENvbG9yID8gdGV4dENvbG9yIDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50T25GaWxsLFxuICAgIGJhY2tncm91bmQ6IGdldEJhZGdlQmdDb2xvcnModGhlbWUsIGJnQ29sb3IpLFxuICAgIGJvcmRlclJhZGl1czogJzQwcHgnLFxuICAgIG1pbkhlaWdodDogJzE3cHgnLFxuICAgIHBhZGRpbmc6ICcwIDZweCAxcHggNnB4JyxcbiAgfSlcbik7XG5cbmNvbnN0IFN0eWxlZExhYmVsQ29udGVudFdyYXBwZXIgPSBzdHlsZWQuZGl2KCh7IHRoZW1lIH0pID0+ICh7XG4gIGE6IHtcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50T25GaWxsLFxuICB9LFxuICAnYTpob3Zlcic6IHtcbiAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50UXVhdGVybmFyeSxcbiAgfSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IEJhZGdlID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgQmFkZ2VQcm9wcz4oXG4gIChwcm9wcywgcmVmKSA9PiAoXG4gICAgPFN0eWxlZEJhZGdlXG4gICAgICByZWY9e3JlZn1cbiAgICAgIGJnQ29sb3I9e3Byb3BzLnZhcmlhdGlvbiB8fCAnZ3JlZW4nfVxuICAgICAgdGV4dENvbG9yPXtwcm9wcy50ZXh0Q29sb3J9XG4gICAgPlxuICAgICAgPExhYmVsXG4gICAgICAgIHNpemU9ezJ9XG4gICAgICAgIGNhcGl0YWxpemU9e3Byb3BzLmNhcGl0YWxpemUgfHwgdHJ1ZX1cbiAgICAgICAgbGluZUhlaWdodD17cHJvcHMubGluZUhlaWdodCB8fCAnc20nfVxuICAgICAgPlxuICAgICAgICA8U3R5bGVkTGFiZWxDb250ZW50V3JhcHBlcj57cHJvcHMubGFiZWx9PC9TdHlsZWRMYWJlbENvbnRlbnRXcmFwcGVyPlxuICAgICAgPC9MYWJlbD5cbiAgICA8L1N0eWxlZEJhZGdlPlxuICApXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBCYWRnZTtcbiJdfQ==