import { __assign, __rest } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import styled from 'styled-components';
import Link from '../link/link';
import SvgIcon from './svg-icon';
var getSocialMediaColor = function (type) {
    return {
        keybase: '#EA773A',
        telegram: '#0088CC',
        twitter: '#1DA1F2',
        github: '#333333',
        youtube: '#FF0000',
        facebook: '#4267B2',
        medium: '#00AB6C',
        reddit: '#FF4500',
        wechat: '#7BB32E',
    }[type];
};
var getSocialMediaUrl = function (type, userId) {
    return {
        keybase: 'https://keybase.io/' + userId.replace('@', ''),
        telegram: 'https://t.me/' + userId.replace('@', ''),
        twitter: 'https://twitter.com/' + userId.replace('@', ''),
        github: 'https://github.com/' + userId.replace('@', ''),
        youtube: 'https://youtube.com/channel/' + userId,
        facebook: 'https://facebook.com/' + userId,
        medium: 'https://medium.com/' + userId,
        reddit: 'https://reddit.com/' + userId,
        wechat: "weixin://dl/chat?".concat(userId, "/"),
    }[type];
};
var Container = styled(Link)(function (_a) {
    var theme = _a.theme, type = _a.socialMediaType;
    return ({
        color: theme.styleguideColors.contentSecondary,
        '&:hover': {
            color: getSocialMediaColor(type),
        },
        '&:active': {
            color: getSocialMediaColor(type),
        },
    });
});
export var SvgIconSocial = React.forwardRef(function (_a, ref) {
    var type = _a.socialMediaType, userId = _a.userId, props = __rest(_a, ["socialMediaType", "userId"]);
    return (_jsx(Container, __assign({ ref: ref, color: "inherit", socialMediaType: type, href: getSocialMediaUrl(type, userId) }, props, { children: _jsx(SvgIcon, { src: "assets/icons/ic-".concat(type, ".svg") }) })));
});
export default SvgIconSocial;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24tc29jaWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL3N2Zy1pY29uL3N2Zy1pY29uLXNvY2lhbC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUM7QUFFdkMsT0FBTyxJQUFJLE1BQU0sY0FBYyxDQUFDO0FBQ2hDLE9BQU8sT0FBTyxNQUFNLFlBQVksQ0FBQztBQUVqQyxJQUFNLG1CQUFtQixHQUFHLFVBQUMsSUFBcUI7SUFDaEQsT0FBTztRQUNMLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFFBQVEsRUFBRSxTQUFTO1FBQ25CLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFFBQVEsRUFBRSxTQUFTO1FBQ25CLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLE1BQU0sRUFBRSxTQUFTO0tBQ2xCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDVixDQUFDLENBQUM7QUFFRixJQUFNLGlCQUFpQixHQUFHLFVBQUMsSUFBcUIsRUFBRSxNQUFjO0lBQzlELE9BQU87UUFDTCxPQUFPLEVBQUUscUJBQXFCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ3hELFFBQVEsRUFBRSxlQUFlLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ25ELE9BQU8sRUFBRSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7UUFDekQsTUFBTSxFQUFFLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUN2RCxPQUFPLEVBQUUsOEJBQThCLEdBQUcsTUFBTTtRQUNoRCxRQUFRLEVBQUUsdUJBQXVCLEdBQUcsTUFBTTtRQUMxQyxNQUFNLEVBQUUscUJBQXFCLEdBQUcsTUFBTTtRQUN0QyxNQUFNLEVBQUUscUJBQXFCLEdBQUcsTUFBTTtRQUN0QyxNQUFNLEVBQUUsMkJBQW9CLE1BQU0sTUFBRztLQUN0QyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ1YsQ0FBQyxDQUFDO0FBbUJGLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDNUIsVUFBQyxFQUFnQztRQUE5QixLQUFLLFdBQUEsRUFBbUIsSUFBSSxxQkFBQTtJQUFPLE9BQUEsQ0FBQztRQUNyQyxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQjtRQUM5QyxTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsbUJBQW1CLENBQUMsSUFBSSxDQUFDO1NBQ2pDO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsS0FBSyxFQUFFLG1CQUFtQixDQUFDLElBQUksQ0FBQztTQUNqQztLQUNGLENBQUM7QUFSb0MsQ0FRcEMsQ0FDSCxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBRzNDLFVBQUMsRUFBK0QsRUFBRSxHQUFHO0lBQWxFLElBQWlCLElBQUkscUJBQUEsRUFBRSxNQUFNLFlBQUEsRUFBSyxLQUFLLGNBQXpDLDZCQUEyQyxDQUFGO0lBQzFDLE9BQU8sQ0FDTCxLQUFDLFNBQVMsYUFDUixHQUFHLEVBQUUsR0FBRyxFQUNSLEtBQUssRUFBQyxTQUFTLEVBQ2YsZUFBZSxFQUFFLElBQUksRUFDckIsSUFBSSxFQUFFLGlCQUFpQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFDakMsS0FBSyxjQUVULEtBQUMsT0FBTyxJQUFDLEdBQUcsRUFBRSwwQkFBbUIsSUFBSSxTQUFNLEdBQUksSUFDckMsQ0FDYixDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxlQUFlLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xyXG5pbXBvcnQgeyBCYXNlUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XHJcbmltcG9ydCBMaW5rIGZyb20gJy4uL2xpbmsvbGluayc7XHJcbmltcG9ydCBTdmdJY29uIGZyb20gJy4vc3ZnLWljb24nO1xyXG5cclxuY29uc3QgZ2V0U29jaWFsTWVkaWFDb2xvciA9ICh0eXBlOiBTb2NpYWxNZWRpYVR5cGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAga2V5YmFzZTogJyNFQTc3M0EnLFxyXG4gICAgdGVsZWdyYW06ICcjMDA4OENDJyxcclxuICAgIHR3aXR0ZXI6ICcjMURBMUYyJyxcclxuICAgIGdpdGh1YjogJyMzMzMzMzMnLFxyXG4gICAgeW91dHViZTogJyNGRjAwMDAnLFxyXG4gICAgZmFjZWJvb2s6ICcjNDI2N0IyJyxcclxuICAgIG1lZGl1bTogJyMwMEFCNkMnLFxyXG4gICAgcmVkZGl0OiAnI0ZGNDUwMCcsXHJcbiAgICB3ZWNoYXQ6ICcjN0JCMzJFJyxcclxuICB9W3R5cGVdO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0U29jaWFsTWVkaWFVcmwgPSAodHlwZTogU29jaWFsTWVkaWFUeXBlLCB1c2VySWQ6IHN0cmluZykgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBrZXliYXNlOiAnaHR0cHM6Ly9rZXliYXNlLmlvLycgKyB1c2VySWQucmVwbGFjZSgnQCcsICcnKSxcclxuICAgIHRlbGVncmFtOiAnaHR0cHM6Ly90Lm1lLycgKyB1c2VySWQucmVwbGFjZSgnQCcsICcnKSxcclxuICAgIHR3aXR0ZXI6ICdodHRwczovL3R3aXR0ZXIuY29tLycgKyB1c2VySWQucmVwbGFjZSgnQCcsICcnKSxcclxuICAgIGdpdGh1YjogJ2h0dHBzOi8vZ2l0aHViLmNvbS8nICsgdXNlcklkLnJlcGxhY2UoJ0AnLCAnJyksXHJcbiAgICB5b3V0dWJlOiAnaHR0cHM6Ly95b3V0dWJlLmNvbS9jaGFubmVsLycgKyB1c2VySWQsXHJcbiAgICBmYWNlYm9vazogJ2h0dHBzOi8vZmFjZWJvb2suY29tLycgKyB1c2VySWQsXHJcbiAgICBtZWRpdW06ICdodHRwczovL21lZGl1bS5jb20vJyArIHVzZXJJZCxcclxuICAgIHJlZGRpdDogJ2h0dHBzOi8vcmVkZGl0LmNvbS8nICsgdXNlcklkLFxyXG4gICAgd2VjaGF0OiBgd2VpeGluOi8vZGwvY2hhdD8ke3VzZXJJZH0vYCxcclxuICB9W3R5cGVdO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU29jaWFsTWVkaWFUeXBlID1cclxuICB8ICdrZXliYXNlJ1xyXG4gIHwgJ3RlbGVncmFtJ1xyXG4gIHwgJ3R3aXR0ZXInXHJcbiAgfCAnZ2l0aHViJ1xyXG4gIHwgJ3lvdXR1YmUnXHJcbiAgfCAnZmFjZWJvb2snXHJcbiAgfCAnbWVkaXVtJ1xyXG4gIHwgJ3JlZGRpdCdcclxuICB8ICd3ZWNoYXQnO1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3ZnSWNvblNvY2lhbFByb3BzIGV4dGVuZHMgQmFzZVByb3BzIHtcclxuICBzb2NpYWxNZWRpYVR5cGU6IFNvY2lhbE1lZGlhVHlwZTtcclxuICB1c2VySWQ6IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkKExpbmspPE9taXQ8U3ZnSWNvblNvY2lhbFByb3BzLCAndXNlcklkJz4+KFxyXG4gICh7IHRoZW1lLCBzb2NpYWxNZWRpYVR5cGU6IHR5cGUgfSkgPT4gKHtcclxuICAgIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRTZWNvbmRhcnksXHJcbiAgICAnJjpob3Zlcic6IHtcclxuICAgICAgY29sb3I6IGdldFNvY2lhbE1lZGlhQ29sb3IodHlwZSksXHJcbiAgICB9LFxyXG4gICAgJyY6YWN0aXZlJzoge1xyXG4gICAgICBjb2xvcjogZ2V0U29jaWFsTWVkaWFDb2xvcih0eXBlKSxcclxuICAgIH0sXHJcbiAgfSlcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBTdmdJY29uU29jaWFsID0gUmVhY3QuZm9yd2FyZFJlZjxcclxuICBIVE1MQW5jaG9yRWxlbWVudCxcclxuICBTdmdJY29uU29jaWFsUHJvcHNcclxuPigoeyBzb2NpYWxNZWRpYVR5cGU6IHR5cGUsIHVzZXJJZCwgLi4ucHJvcHMgfTogU3ZnSWNvblNvY2lhbFByb3BzLCByZWYpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPENvbnRhaW5lclxyXG4gICAgICByZWY9e3JlZn1cclxuICAgICAgY29sb3I9XCJpbmhlcml0XCJcclxuICAgICAgc29jaWFsTWVkaWFUeXBlPXt0eXBlfVxyXG4gICAgICBocmVmPXtnZXRTb2NpYWxNZWRpYVVybCh0eXBlLCB1c2VySWQpfVxyXG4gICAgICB7Li4ucHJvcHN9XHJcbiAgICA+XHJcbiAgICAgIDxTdmdJY29uIHNyYz17YGFzc2V0cy9pY29ucy9pYy0ke3R5cGV9LnN2Z2B9IC8+XHJcbiAgICA8L0NvbnRhaW5lcj5cclxuICApO1xyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN2Z0ljb25Tb2NpYWw7XHJcbiJdfQ==