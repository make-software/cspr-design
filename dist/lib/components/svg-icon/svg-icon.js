import { __assign, __rest } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import ReactSVG from 'react-inlinesvg';
import styled from 'styled-components';
var Container = styled('div').withConfig({
    shouldForwardProp: function (prop, defaultValidatorFn) {
        return !['rotate'].includes(prop) && defaultValidatorFn(prop);
    },
})(function (_a) {
    var theme = _a.theme, size = _a.size, width = _a.width, height = _a.height, color = _a.color, active = _a.active, rotate = _a.rotate, marginLeft = _a.marginLeft, marginRight = _a.marginRight;
    return ({
        display: 'inline-block',
        verticalAlign: 'middle',
        width: width != null ? width : size,
        height: height != null ? height : size,
        color: color || 'inherit',
        svg: {
            display: 'block',
            fill: 'currentColor',
            color: color || 'inherit',
            width: width != null ? width : size,
            height: height != null ? height : size,
        },
        transform: rotate ? 'rotateX(180deg)' : 'rotateX(0deg)',
        transition: 'transform 500ms ease',
        marginLeft: marginLeft ? 8 : 'initial',
        marginRight: marginRight ? 8 : 'initial',
    });
});
var StyledReactSVG = styled(ReactSVG)(function (_a) {
    var theme = _a.theme;
    return ({
        display: 'flex',
    });
});
export var SvgIcon = React.forwardRef(function (_a, ref) {
    var src = _a.src, alt = _a.alt, _b = _a.size, size = _b === void 0 ? 16 : _b, color = _a.color, onClick = _a.onClick, _c = _a.rotate, rotate = _c === void 0 ? false : _c, props = __rest(_a, ["src", "alt", "size", "color", "onClick", "rotate"]);
    var handleClick = function (ev) {
        onClick && onClick(ev);
    };
    var preProcessor = function (code) { return code; };
    // false ? code.replace(/fill=".*?"/g, 'fill="currentColor"') : code;
    return (_jsx(Container, __assign({ ref: ref, role: "img", "aria-label": alt, size: size, color: color, rotate: rotate, onClick: handleClick }, props, { children: _jsx(StyledReactSVG, { src: src, preProcessor: preProcessor, title: alt, "aria-hidden": "true", cacheRequests: true }) })));
});
export default SvgIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvc3ZnLWljb24vc3ZnLWljb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBdUJ2QyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3pDLGlCQUFpQixFQUFFLFVBQUMsSUFBSSxFQUFFLGtCQUFrQjtRQUMxQyxPQUFBLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDO0lBQXRELENBQXNEO0NBQ3pELENBQUMsQ0FVQSxVQUFDLEVBVUE7UUFUQyxLQUFLLFdBQUEsRUFDTCxJQUFJLFVBQUEsRUFDSixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixNQUFNLFlBQUEsRUFDTixVQUFVLGdCQUFBLEVBQ1YsV0FBVyxpQkFBQTtJQUNQLE9BQUEsQ0FBQztRQUNMLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUN0QyxLQUFLLEVBQUUsS0FBSyxJQUFJLFNBQVM7UUFDekIsR0FBRyxFQUFFO1lBQ0gsT0FBTyxFQUFFLE9BQU87WUFDaEIsSUFBSSxFQUFFLGNBQWM7WUFDcEIsS0FBSyxFQUFFLEtBQUssSUFBSSxTQUFTO1lBQ3pCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2QztRQUNELFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxlQUFlO1FBQ3ZELFVBQVUsRUFBRSxzQkFBc0I7UUFDbEMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ3RDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztLQUN6QyxDQUFDO0FBakJJLENBaUJKLENBQ0gsQ0FBQztBQUVGLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFDLEVBQVM7UUFBUCxLQUFLLFdBQUE7SUFBTyxPQUFBLENBQUM7UUFDdEQsT0FBTyxFQUFFLE1BQU07S0FDaEIsQ0FBQztBQUZxRCxDQUVyRCxDQUFDLENBQUM7QUFFSixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FDckMsVUFDRSxFQVFlLEVBQ2YsR0FBRztJQVJELElBQUEsR0FBRyxTQUFBLEVBQ0gsR0FBRyxTQUFBLEVBQ0gsWUFBUyxFQUFULElBQUksbUJBQUcsRUFBRSxLQUFBLEVBQ1QsS0FBSyxXQUFBLEVBQ0wsT0FBTyxhQUFBLEVBQ1AsY0FBYyxFQUFkLE1BQU0sbUJBQUcsS0FBSyxLQUFBLEVBQ1gsS0FBSyxjQVBWLG9EQVFDLENBRFM7SUFJVixJQUFNLFdBQVcsR0FBRyxVQUFDLEVBQU87UUFDMUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRixJQUFNLFlBQVksR0FBRyxVQUFDLElBQVksSUFBYSxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7SUFDcEQscUVBQXFFO0lBRXJFLE9BQU8sQ0FDTCxLQUFDLFNBQVMsYUFDUixHQUFHLEVBQUUsR0FBRyxFQUNSLElBQUksRUFBRSxLQUFLLGdCQUNDLEdBQUcsRUFDZixJQUFJLEVBQUUsSUFBSSxFQUNWLEtBQUssRUFBRSxLQUFLLEVBQ1osTUFBTSxFQUFFLE1BQU0sRUFDZCxPQUFPLEVBQUUsV0FBVyxJQUNoQixLQUFLLGNBRVQsS0FBQyxjQUFjLElBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLGlCQUFjLE1BQU0sRUFBQyxhQUFhLFNBQUcsSUFDM0YsQ0FDYixDQUFDO0FBQ0osQ0FBQyxDQUNGLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RTVkcgZnJvbSAncmVhY3QtaW5saW5lc3ZnJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG50eXBlIFJlZiA9IEhUTUxEaXZFbGVtZW50O1xuXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3ZnSWNvblByb3BzIGV4dGVuZHMgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8UmVmPiB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xuICBzaXplPzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlciB8IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuICBzcmM6IHN0cmluZztcbiAgYWx0Pzogc3RyaW5nO1xuICBvbkNsaWNrPzogKGV2OiBhbnkpID0+IHZvaWQ7XG4gIG9uTW91c2VEb3duPzogKGV2OiBhbnkpID0+IHZvaWQ7XG4gIGNvbG9yPzogc3RyaW5nO1xuICB0b29sdGlwPzogc3RyaW5nO1xuICBhY3RpdmU/OiBib29sZWFuO1xuICByb3RhdGU/OiBib29sZWFuO1xuICBtYXJnaW5MZWZ0PzogYm9vbGVhbjtcbiAgbWFyZ2luUmlnaHQ/OiBib29sZWFuO1xufVxuXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQoJ2RpdicpLndpdGhDb25maWcoe1xuICBzaG91bGRGb3J3YXJkUHJvcDogKHByb3AsIGRlZmF1bHRWYWxpZGF0b3JGbikgPT5cbiAgICAhWydyb3RhdGUnXS5pbmNsdWRlcyhwcm9wKSAmJiBkZWZhdWx0VmFsaWRhdG9yRm4ocHJvcCksXG59KTx7XG4gIHNpemU6IG51bWJlcjtcbiAgd2lkdGg/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGhlaWdodD86IHN0cmluZyB8IG51bWJlcjtcbiAgY29sb3I/OiBzdHJpbmc7XG4gIGFjdGl2ZT86IGJvb2xlYW47XG4gIHJvdGF0ZT86IGJvb2xlYW47XG4gIG1hcmdpbkxlZnQ/OiBib29sZWFuO1xuICBtYXJnaW5SaWdodD86IGJvb2xlYW47XG59PihcbiAgKHtcbiAgICB0aGVtZSxcbiAgICBzaXplLFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBjb2xvcixcbiAgICBhY3RpdmUsXG4gICAgcm90YXRlLFxuICAgIG1hcmdpbkxlZnQsXG4gICAgbWFyZ2luUmlnaHQsXG4gIH0pID0+ICh7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgd2lkdGg6IHdpZHRoICE9IG51bGwgPyB3aWR0aCA6IHNpemUsXG4gICAgaGVpZ2h0OiBoZWlnaHQgIT0gbnVsbCA/IGhlaWdodCA6IHNpemUsXG4gICAgY29sb3I6IGNvbG9yIHx8ICdpbmhlcml0JyxcbiAgICBzdmc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGNvbG9yOiBjb2xvciB8fCAnaW5oZXJpdCcsXG4gICAgICB3aWR0aDogd2lkdGggIT0gbnVsbCA/IHdpZHRoIDogc2l6ZSxcbiAgICAgIGhlaWdodDogaGVpZ2h0ICE9IG51bGwgPyBoZWlnaHQgOiBzaXplLFxuICAgIH0sXG4gICAgdHJhbnNmb3JtOiByb3RhdGUgPyAncm90YXRlWCgxODBkZWcpJyA6ICdyb3RhdGVYKDBkZWcpJyxcbiAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDUwMG1zIGVhc2UnLFxuICAgIG1hcmdpbkxlZnQ6IG1hcmdpbkxlZnQgPyA4IDogJ2luaXRpYWwnLFxuICAgIG1hcmdpblJpZ2h0OiBtYXJnaW5SaWdodCA/IDggOiAnaW5pdGlhbCcsXG4gIH0pXG4pO1xuXG5jb25zdCBTdHlsZWRSZWFjdFNWRyA9IHN0eWxlZChSZWFjdFNWRykoKHsgdGhlbWUgfSkgPT4gKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxufSkpO1xuXG5leHBvcnQgY29uc3QgU3ZnSWNvbiA9IFJlYWN0LmZvcndhcmRSZWY8UmVmLCBTdmdJY29uUHJvcHM+KFxuICAoXG4gICAge1xuICAgICAgc3JjLFxuICAgICAgYWx0LFxuICAgICAgc2l6ZSA9IDE2LFxuICAgICAgY29sb3IsXG4gICAgICBvbkNsaWNrLFxuICAgICAgcm90YXRlID0gZmFsc2UsXG4gICAgICAuLi5wcm9wc1xuICAgIH06IFN2Z0ljb25Qcm9wcyxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXY6IGFueSkgPT4ge1xuICAgICAgb25DbGljayAmJiBvbkNsaWNrKGV2KTtcbiAgICB9O1xuXG4gICAgY29uc3QgcHJlUHJvY2Vzc29yID0gKGNvZGU6IHN0cmluZyk6IHN0cmluZyA9PiBjb2RlO1xuICAgIC8vIGZhbHNlID8gY29kZS5yZXBsYWNlKC9maWxsPVwiLio/XCIvZywgJ2ZpbGw9XCJjdXJyZW50Q29sb3JcIicpIDogY29kZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29udGFpbmVyXG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICByb2xlPXtcImltZ1wifVxuICAgICAgICBhcmlhLWxhYmVsPXthbHR9XG4gICAgICAgIHNpemU9e3NpemV9XG4gICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgcm90YXRlPXtyb3RhdGV9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxTdHlsZWRSZWFjdFNWRyBzcmM9e3NyY30gcHJlUHJvY2Vzc29yPXtwcmVQcm9jZXNzb3J9IHRpdGxlPXthbHR9IGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNhY2hlUmVxdWVzdHMgLz5cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFN2Z0ljb247XG4iXX0=