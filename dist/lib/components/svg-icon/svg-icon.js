import { __assign, __rest } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import ReactSVG from 'react-inlinesvg';
import styled from 'styled-components';
var Container = styled('div').withConfig({
    shouldForwardProp: function (prop, defaultValidatorFn) {
        return !['rotate'].includes(prop) && defaultValidatorFn(prop);
    },
})(function (_a) {
    var theme = _a.theme, size = _a.size, width = _a.width, height = _a.height, color = _a.color, active = _a.active, rotate = _a.rotate, marginLeft = _a.marginLeft, marginRight = _a.marginRight;
    return ({
        display: 'inline-block',
        verticalAlign: 'middle',
        width: width != null ? width : size,
        height: height != null ? height : size,
        color: color || 'inherit',
        svg: {
            display: 'block',
            fill: 'currentColor',
            color: color || 'inherit',
            width: width != null ? width : size,
            height: height != null ? height : size,
        },
        transform: rotate ? 'rotateX(180deg)' : 'rotateX(0deg)',
        transition: 'transform 500ms ease',
        marginLeft: marginLeft ? 8 : 'initial',
        marginRight: marginRight ? 8 : 'initial',
    });
});
var StyledReactSVG = styled(ReactSVG)(function (_a) {
    var theme = _a.theme;
    return ({
        display: 'flex',
    });
});
export var SvgIcon = React.forwardRef(function (_a, ref) {
    var src = _a.src, alt = _a.alt, _b = _a.size, size = _b === void 0 ? 16 : _b, color = _a.color, onClick = _a.onClick, _c = _a.rotate, rotate = _c === void 0 ? false : _c, props = __rest(_a, ["src", "alt", "size", "color", "onClick", "rotate"]);
    var handleClick = function (ev) {
        onClick && onClick(ev);
    };
    var preProcessor = function (code) { return code; };
    // false ? code.replace(/fill=".*?"/g, 'fill="currentColor"') : code;
    return (_jsx(Container, __assign({ ref: ref, title: alt, size: size, color: color, rotate: rotate, onClick: handleClick }, props, { children: _jsx(StyledReactSVG, { src: src, preProcessor: preProcessor, cacheRequests: true }) })));
});
export default SvgIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvc3ZnLWljb24vc3ZnLWljb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBdUJ2QyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3pDLGlCQUFpQixFQUFFLFVBQUMsSUFBSSxFQUFFLGtCQUFrQjtRQUMxQyxPQUFBLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDO0lBQXRELENBQXNEO0NBQ3pELENBQUMsQ0FVQSxVQUFDLEVBVUE7UUFUQyxLQUFLLFdBQUEsRUFDTCxJQUFJLFVBQUEsRUFDSixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixNQUFNLFlBQUEsRUFDTixVQUFVLGdCQUFBLEVBQ1YsV0FBVyxpQkFBQTtJQUNQLE9BQUEsQ0FBQztRQUNMLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUN0QyxLQUFLLEVBQUUsS0FBSyxJQUFJLFNBQVM7UUFDekIsR0FBRyxFQUFFO1lBQ0gsT0FBTyxFQUFFLE9BQU87WUFDaEIsSUFBSSxFQUFFLGNBQWM7WUFDcEIsS0FBSyxFQUFFLEtBQUssSUFBSSxTQUFTO1lBQ3pCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2QztRQUNELFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxlQUFlO1FBQ3ZELFVBQVUsRUFBRSxzQkFBc0I7UUFDbEMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ3RDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztLQUN6QyxDQUFDO0FBakJJLENBaUJKLENBQ0gsQ0FBQztBQUVGLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFDLEVBQVM7UUFBUCxLQUFLLFdBQUE7SUFBTyxPQUFBLENBQUM7UUFDdEQsT0FBTyxFQUFFLE1BQU07S0FDaEIsQ0FBQztBQUZxRCxDQUVyRCxDQUFDLENBQUM7QUFFSixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FDckMsVUFDRSxFQVFlLEVBQ2YsR0FBRztJQVJELElBQUEsR0FBRyxTQUFBLEVBQ0gsR0FBRyxTQUFBLEVBQ0gsWUFBUyxFQUFULElBQUksbUJBQUcsRUFBRSxLQUFBLEVBQ1QsS0FBSyxXQUFBLEVBQ0wsT0FBTyxhQUFBLEVBQ1AsY0FBYyxFQUFkLE1BQU0sbUJBQUcsS0FBSyxLQUFBLEVBQ1gsS0FBSyxjQVBWLG9EQVFDLENBRFM7SUFJVixJQUFNLFdBQVcsR0FBRyxVQUFDLEVBQU87UUFDMUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRixJQUFNLFlBQVksR0FBRyxVQUFDLElBQVksSUFBYSxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7SUFDcEQscUVBQXFFO0lBRXJFLE9BQU8sQ0FDTCxLQUFDLFNBQVMsYUFDUixHQUFHLEVBQUUsR0FBRyxFQUNSLEtBQUssRUFBRSxHQUFHLEVBQ1YsSUFBSSxFQUFFLElBQUksRUFDVixLQUFLLEVBQUUsS0FBSyxFQUNaLE1BQU0sRUFBRSxNQUFNLEVBQ2QsT0FBTyxFQUFFLFdBQVcsSUFDaEIsS0FBSyxjQUVULEtBQUMsY0FBYyxJQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxhQUFhLFNBQUcsSUFDNUQsQ0FDYixDQUFDO0FBQ0osQ0FBQyxDQUNGLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdFNWRyBmcm9tICdyZWFjdC1pbmxpbmVzdmcnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcclxuXHJcbnR5cGUgUmVmID0gSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdmdJY29uUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxSZWY+IHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xyXG4gIHNpemU/OiBudW1iZXI7XHJcbiAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xyXG4gIHNyYzogc3RyaW5nO1xyXG4gIGFsdD86IHN0cmluZztcclxuICBvbkNsaWNrPzogKGV2OiBhbnkpID0+IHZvaWQ7XHJcbiAgb25Nb3VzZURvd24/OiAoZXY6IGFueSkgPT4gdm9pZDtcclxuICBjb2xvcj86IHN0cmluZztcclxuICB0b29sdGlwPzogc3RyaW5nO1xyXG4gIGFjdGl2ZT86IGJvb2xlYW47XHJcbiAgcm90YXRlPzogYm9vbGVhbjtcclxuICBtYXJnaW5MZWZ0PzogYm9vbGVhbjtcclxuICBtYXJnaW5SaWdodD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZGl2Jykud2l0aENvbmZpZyh7XHJcbiAgc2hvdWxkRm9yd2FyZFByb3A6IChwcm9wLCBkZWZhdWx0VmFsaWRhdG9yRm4pID0+XHJcbiAgICAhWydyb3RhdGUnXS5pbmNsdWRlcyhwcm9wKSAmJiBkZWZhdWx0VmFsaWRhdG9yRm4ocHJvcCksXHJcbn0pPHtcclxuICBzaXplOiBudW1iZXI7XHJcbiAgd2lkdGg/OiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgaGVpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyO1xyXG4gIGNvbG9yPzogc3RyaW5nO1xyXG4gIGFjdGl2ZT86IGJvb2xlYW47XHJcbiAgcm90YXRlPzogYm9vbGVhbjtcclxuICBtYXJnaW5MZWZ0PzogYm9vbGVhbjtcclxuICBtYXJnaW5SaWdodD86IGJvb2xlYW47XHJcbn0+KFxyXG4gICh7XHJcbiAgICB0aGVtZSxcclxuICAgIHNpemUsXHJcbiAgICB3aWR0aCxcclxuICAgIGhlaWdodCxcclxuICAgIGNvbG9yLFxyXG4gICAgYWN0aXZlLFxyXG4gICAgcm90YXRlLFxyXG4gICAgbWFyZ2luTGVmdCxcclxuICAgIG1hcmdpblJpZ2h0LFxyXG4gIH0pID0+ICh7XHJcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG4gICAgd2lkdGg6IHdpZHRoICE9IG51bGwgPyB3aWR0aCA6IHNpemUsXHJcbiAgICBoZWlnaHQ6IGhlaWdodCAhPSBudWxsID8gaGVpZ2h0IDogc2l6ZSxcclxuICAgIGNvbG9yOiBjb2xvciB8fCAnaW5oZXJpdCcsXHJcbiAgICBzdmc6IHtcclxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcclxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXHJcbiAgICAgIGNvbG9yOiBjb2xvciB8fCAnaW5oZXJpdCcsXHJcbiAgICAgIHdpZHRoOiB3aWR0aCAhPSBudWxsID8gd2lkdGggOiBzaXplLFxyXG4gICAgICBoZWlnaHQ6IGhlaWdodCAhPSBudWxsID8gaGVpZ2h0IDogc2l6ZSxcclxuICAgIH0sXHJcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSA/ICdyb3RhdGVYKDE4MGRlZyknIDogJ3JvdGF0ZVgoMGRlZyknLFxyXG4gICAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSA1MDBtcyBlYXNlJyxcclxuICAgIG1hcmdpbkxlZnQ6IG1hcmdpbkxlZnQgPyA4IDogJ2luaXRpYWwnLFxyXG4gICAgbWFyZ2luUmlnaHQ6IG1hcmdpblJpZ2h0ID8gOCA6ICdpbml0aWFsJyxcclxuICB9KVxyXG4pO1xyXG5cclxuY29uc3QgU3R5bGVkUmVhY3RTVkcgPSBzdHlsZWQoUmVhY3RTVkcpKCh7IHRoZW1lIH0pID0+ICh7XHJcbiAgZGlzcGxheTogJ2ZsZXgnLFxyXG59KSk7XHJcblxyXG5leHBvcnQgY29uc3QgU3ZnSWNvbiA9IFJlYWN0LmZvcndhcmRSZWY8UmVmLCBTdmdJY29uUHJvcHM+KFxyXG4gIChcclxuICAgIHtcclxuICAgICAgc3JjLFxyXG4gICAgICBhbHQsXHJcbiAgICAgIHNpemUgPSAxNixcclxuICAgICAgY29sb3IsXHJcbiAgICAgIG9uQ2xpY2ssXHJcbiAgICAgIHJvdGF0ZSA9IGZhbHNlLFxyXG4gICAgICAuLi5wcm9wc1xyXG4gICAgfTogU3ZnSWNvblByb3BzLFxyXG4gICAgcmVmXHJcbiAgKSA9PiB7XHJcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IChldjogYW55KSA9PiB7XHJcbiAgICAgIG9uQ2xpY2sgJiYgb25DbGljayhldik7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHByZVByb2Nlc3NvciA9IChjb2RlOiBzdHJpbmcpOiBzdHJpbmcgPT4gY29kZTtcclxuICAgIC8vIGZhbHNlID8gY29kZS5yZXBsYWNlKC9maWxsPVwiLio/XCIvZywgJ2ZpbGw9XCJjdXJyZW50Q29sb3JcIicpIDogY29kZTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Q29udGFpbmVyXHJcbiAgICAgICAgcmVmPXtyZWZ9XHJcbiAgICAgICAgdGl0bGU9e2FsdH1cclxuICAgICAgICBzaXplPXtzaXplfVxyXG4gICAgICAgIGNvbG9yPXtjb2xvcn1cclxuICAgICAgICByb3RhdGU9e3JvdGF0ZX1cclxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cclxuICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgID5cclxuICAgICAgICA8U3R5bGVkUmVhY3RTVkcgc3JjPXtzcmN9IHByZVByb2Nlc3Nvcj17cHJlUHJvY2Vzc29yfSBjYWNoZVJlcXVlc3RzIC8+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdmdJY29uO1xyXG4iXX0=