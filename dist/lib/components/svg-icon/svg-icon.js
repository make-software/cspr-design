import { __assign, __rest } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import ReactSVG from 'react-inlinesvg';
import styled from 'styled-components';
var Container = styled('div').withConfig({
    shouldForwardProp: function (prop, defaultValidatorFn) {
        return !['rotate'].includes(prop) && defaultValidatorFn(prop);
    },
})(function (_a) {
    var theme = _a.theme, size = _a.size, width = _a.width, height = _a.height, color = _a.color, active = _a.active, rotate = _a.rotate, marginLeft = _a.marginLeft, marginRight = _a.marginRight;
    return ({
        display: 'inline-block',
        verticalAlign: 'middle',
        width: width != null ? width : size,
        height: height != null ? height : size,
        color: color || 'inherit',
        svg: {
            display: 'block',
            fill: 'currentColor',
            color: color || 'inherit',
            width: width != null ? width : size,
            height: height != null ? height : size,
        },
        transform: rotate ? 'rotateX(180deg)' : 'rotateX(0deg)',
        transition: 'transform 500ms ease',
        marginLeft: marginLeft ? 8 : 'initial',
        marginRight: marginRight ? 8 : 'initial',
    });
});
var StyledReactSVG = styled(ReactSVG)(function (_a) {
    var theme = _a.theme;
    return ({
        display: 'flex',
    });
});
export var SvgIcon = React.forwardRef(function (_a, ref) {
    var src = _a.src, alt = _a.alt, _b = _a.size, size = _b === void 0 ? 16 : _b, color = _a.color, onClick = _a.onClick, _c = _a.rotate, rotate = _c === void 0 ? false : _c, props = __rest(_a, ["src", "alt", "size", "color", "onClick", "rotate"]);
    var handleClick = function (ev) {
        onClick && onClick(ev);
    };
    var preProcessor = function (code) { return code; };
    // false ? code.replace(/fill=".*?"/g, 'fill="currentColor"') : code;
    return (_jsx(Container, __assign({ ref: ref, title: alt, size: size, color: color, rotate: rotate, onClick: handleClick }, props, { children: _jsx(StyledReactSVG, { src: src, preProcessor: preProcessor, title: alt, cacheRequests: true }) })));
});
export default SvgIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvc3ZnLWljb24vc3ZnLWljb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBdUJ2QyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3pDLGlCQUFpQixFQUFFLFVBQUMsSUFBSSxFQUFFLGtCQUFrQjtRQUMxQyxPQUFBLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDO0lBQXRELENBQXNEO0NBQ3pELENBQUMsQ0FVQSxVQUFDLEVBVUE7UUFUQyxLQUFLLFdBQUEsRUFDTCxJQUFJLFVBQUEsRUFDSixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixNQUFNLFlBQUEsRUFDTixVQUFVLGdCQUFBLEVBQ1YsV0FBVyxpQkFBQTtJQUNQLE9BQUEsQ0FBQztRQUNMLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUN0QyxLQUFLLEVBQUUsS0FBSyxJQUFJLFNBQVM7UUFDekIsR0FBRyxFQUFFO1lBQ0gsT0FBTyxFQUFFLE9BQU87WUFDaEIsSUFBSSxFQUFFLGNBQWM7WUFDcEIsS0FBSyxFQUFFLEtBQUssSUFBSSxTQUFTO1lBQ3pCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2QztRQUNELFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxlQUFlO1FBQ3ZELFVBQVUsRUFBRSxzQkFBc0I7UUFDbEMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ3RDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztLQUN6QyxDQUFDO0FBakJJLENBaUJKLENBQ0gsQ0FBQztBQUVGLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFDLEVBQVM7UUFBUCxLQUFLLFdBQUE7SUFBTyxPQUFBLENBQUM7UUFDdEQsT0FBTyxFQUFFLE1BQU07S0FDaEIsQ0FBQztBQUZxRCxDQUVyRCxDQUFDLENBQUM7QUFFSixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FDckMsVUFDRSxFQVFlLEVBQ2YsR0FBRztJQVJELElBQUEsR0FBRyxTQUFBLEVBQ0gsR0FBRyxTQUFBLEVBQ0gsWUFBUyxFQUFULElBQUksbUJBQUcsRUFBRSxLQUFBLEVBQ1QsS0FBSyxXQUFBLEVBQ0wsT0FBTyxhQUFBLEVBQ1AsY0FBYyxFQUFkLE1BQU0sbUJBQUcsS0FBSyxLQUFBLEVBQ1gsS0FBSyxjQVBWLG9EQVFDLENBRFM7SUFJVixJQUFNLFdBQVcsR0FBRyxVQUFDLEVBQU87UUFDMUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRixJQUFNLFlBQVksR0FBRyxVQUFDLElBQVksSUFBYSxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7SUFDcEQscUVBQXFFO0lBRXJFLE9BQU8sQ0FDTCxLQUFDLFNBQVMsYUFDUixHQUFHLEVBQUUsR0FBRyxFQUNSLEtBQUssRUFBRSxHQUFHLEVBQ1YsSUFBSSxFQUFFLElBQUksRUFDVixLQUFLLEVBQUUsS0FBSyxFQUNaLE1BQU0sRUFBRSxNQUFNLEVBQ2QsT0FBTyxFQUFFLFdBQVcsSUFDaEIsS0FBSyxjQUVULEtBQUMsY0FBYyxJQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLGFBQWEsU0FBRyxJQUN4RSxDQUNiLENBQUM7QUFDSixDQUFDLENBQ0YsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdFNWRyBmcm9tICdyZWFjdC1pbmxpbmVzdmcnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbnR5cGUgUmVmID0gSFRNTERpdkVsZW1lbnQ7XG5cbi8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL1xuZXhwb3J0IGludGVyZmFjZSBTdmdJY29uUHJvcHMgZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxSZWY+IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIHNpemU/OiBudW1iZXI7XG4gIHdpZHRoPzogbnVtYmVyIHwgc3RyaW5nO1xuICBoZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHNyYzogc3RyaW5nO1xuICBhbHQ/OiBzdHJpbmc7XG4gIG9uQ2xpY2s/OiAoZXY6IGFueSkgPT4gdm9pZDtcbiAgb25Nb3VzZURvd24/OiAoZXY6IGFueSkgPT4gdm9pZDtcbiAgY29sb3I/OiBzdHJpbmc7XG4gIHRvb2x0aXA/OiBzdHJpbmc7XG4gIGFjdGl2ZT86IGJvb2xlYW47XG4gIHJvdGF0ZT86IGJvb2xlYW47XG4gIG1hcmdpbkxlZnQ/OiBib29sZWFuO1xuICBtYXJnaW5SaWdodD86IGJvb2xlYW47XG59XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZGl2Jykud2l0aENvbmZpZyh7XG4gIHNob3VsZEZvcndhcmRQcm9wOiAocHJvcCwgZGVmYXVsdFZhbGlkYXRvckZuKSA9PlxuICAgICFbJ3JvdGF0ZSddLmluY2x1ZGVzKHByb3ApICYmIGRlZmF1bHRWYWxpZGF0b3JGbihwcm9wKSxcbn0pPHtcbiAgc2l6ZTogbnVtYmVyO1xuICB3aWR0aD86IHN0cmluZyB8IG51bWJlcjtcbiAgaGVpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyO1xuICBjb2xvcj86IHN0cmluZztcbiAgYWN0aXZlPzogYm9vbGVhbjtcbiAgcm90YXRlPzogYm9vbGVhbjtcbiAgbWFyZ2luTGVmdD86IGJvb2xlYW47XG4gIG1hcmdpblJpZ2h0PzogYm9vbGVhbjtcbn0+KFxuICAoe1xuICAgIHRoZW1lLFxuICAgIHNpemUsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGNvbG9yLFxuICAgIGFjdGl2ZSxcbiAgICByb3RhdGUsXG4gICAgbWFyZ2luTGVmdCxcbiAgICBtYXJnaW5SaWdodCxcbiAgfSkgPT4gKHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICB3aWR0aDogd2lkdGggIT0gbnVsbCA/IHdpZHRoIDogc2l6ZSxcbiAgICBoZWlnaHQ6IGhlaWdodCAhPSBudWxsID8gaGVpZ2h0IDogc2l6ZSxcbiAgICBjb2xvcjogY29sb3IgfHwgJ2luaGVyaXQnLFxuICAgIHN2Zzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgY29sb3I6IGNvbG9yIHx8ICdpbmhlcml0JyxcbiAgICAgIHdpZHRoOiB3aWR0aCAhPSBudWxsID8gd2lkdGggOiBzaXplLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQgIT0gbnVsbCA/IGhlaWdodCA6IHNpemUsXG4gICAgfSxcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSA/ICdyb3RhdGVYKDE4MGRlZyknIDogJ3JvdGF0ZVgoMGRlZyknLFxuICAgIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gNTAwbXMgZWFzZScsXG4gICAgbWFyZ2luTGVmdDogbWFyZ2luTGVmdCA/IDggOiAnaW5pdGlhbCcsXG4gICAgbWFyZ2luUmlnaHQ6IG1hcmdpblJpZ2h0ID8gOCA6ICdpbml0aWFsJyxcbiAgfSlcbik7XG5cbmNvbnN0IFN0eWxlZFJlYWN0U1ZHID0gc3R5bGVkKFJlYWN0U1ZHKSgoeyB0aGVtZSB9KSA9PiAoe1xuICBkaXNwbGF5OiAnZmxleCcsXG59KSk7XG5cbmV4cG9ydCBjb25zdCBTdmdJY29uID0gUmVhY3QuZm9yd2FyZFJlZjxSZWYsIFN2Z0ljb25Qcm9wcz4oXG4gIChcbiAgICB7XG4gICAgICBzcmMsXG4gICAgICBhbHQsXG4gICAgICBzaXplID0gMTYsXG4gICAgICBjb2xvcixcbiAgICAgIG9uQ2xpY2ssXG4gICAgICByb3RhdGUgPSBmYWxzZSxcbiAgICAgIC4uLnByb3BzXG4gICAgfTogU3ZnSWNvblByb3BzLFxuICAgIHJlZlxuICApID0+IHtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IChldjogYW55KSA9PiB7XG4gICAgICBvbkNsaWNrICYmIG9uQ2xpY2soZXYpO1xuICAgIH07XG5cbiAgICBjb25zdCBwcmVQcm9jZXNzb3IgPSAoY29kZTogc3RyaW5nKTogc3RyaW5nID0+IGNvZGU7XG4gICAgLy8gZmFsc2UgPyBjb2RlLnJlcGxhY2UoL2ZpbGw9XCIuKj9cIi9nLCAnZmlsbD1cImN1cnJlbnRDb2xvclwiJykgOiBjb2RlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb250YWluZXJcbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHRpdGxlPXthbHR9XG4gICAgICAgIHNpemU9e3NpemV9XG4gICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgcm90YXRlPXtyb3RhdGV9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxTdHlsZWRSZWFjdFNWRyBzcmM9e3NyY30gcHJlUHJvY2Vzc29yPXtwcmVQcm9jZXNzb3J9IHRpdGxlPXthbHR9IGNhY2hlUmVxdWVzdHMgLz5cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFN2Z0ljb247XG4iXX0=