import { __assign, __rest } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import ReactSVG from 'react-inlinesvg';
import styled from 'styled-components';
var Container = styled('div').withConfig({
    shouldForwardProp: function (prop, defaultValidatorFn) {
        return !['rotate'].includes(prop) && defaultValidatorFn(prop);
    },
})(function (_a) {
    var theme = _a.theme, size = _a.size, width = _a.width, height = _a.height, color = _a.color, active = _a.active, rotate = _a.rotate, marginLeft = _a.marginLeft, marginRight = _a.marginRight;
    return ({
        display: 'inline-block',
        verticalAlign: 'middle',
        width: width != null ? width : size,
        height: height != null ? height : size,
        color: color || 'inherit',
        svg: {
            display: 'block',
            fill: 'currentColor',
            color: color || 'inherit',
            width: width != null ? width : size,
            height: height != null ? height : size,
        },
        transform: rotate ? 'rotateX(180deg)' : 'rotateX(0deg)',
        transition: 'transform 500ms ease',
        marginLeft: marginLeft ? 8 : 'initial',
        marginRight: marginRight ? 8 : 'initial',
    });
});
var StyledReactSVG = styled(ReactSVG)(function (_a) {
    var theme = _a.theme;
    return ({
        display: 'flex',
    });
});
export var SvgIcon = React.forwardRef(function (_a, ref) {
    var src = _a.src, alt = _a.alt, _b = _a.size, size = _b === void 0 ? 16 : _b, color = _a.color, onClick = _a.onClick, _c = _a.rotate, rotate = _c === void 0 ? false : _c, props = __rest(_a, ["src", "alt", "size", "color", "onClick", "rotate"]);
    var handleClick = function (ev) {
        onClick && onClick(ev);
    };
    var preProcessor = function (code) { return code; };
    // false ? code.replace(/fill=".*?"/g, 'fill="currentColor"') : code;
    return (_jsx(Container, __assign({ ref: ref, "aria-label": alt, size: size, color: color, rotate: rotate, onClick: handleClick }, props, { children: _jsx(StyledReactSVG, { src: src, preProcessor: preProcessor, title: alt, "aria-hidden": "true", cacheRequests: true }) })));
});
export default SvgIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvc3ZnLWljb24vc3ZnLWljb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBdUJ2QyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ3pDLGlCQUFpQixFQUFFLFVBQUMsSUFBSSxFQUFFLGtCQUFrQjtRQUMxQyxPQUFBLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDO0lBQXRELENBQXNEO0NBQ3pELENBQUMsQ0FVQSxVQUFDLEVBVUE7UUFUQyxLQUFLLFdBQUEsRUFDTCxJQUFJLFVBQUEsRUFDSixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDTixNQUFNLFlBQUEsRUFDTixVQUFVLGdCQUFBLEVBQ1YsV0FBVyxpQkFBQTtJQUNQLE9BQUEsQ0FBQztRQUNMLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUN0QyxLQUFLLEVBQUUsS0FBSyxJQUFJLFNBQVM7UUFDekIsR0FBRyxFQUFFO1lBQ0gsT0FBTyxFQUFFLE9BQU87WUFDaEIsSUFBSSxFQUFFLGNBQWM7WUFDcEIsS0FBSyxFQUFFLEtBQUssSUFBSSxTQUFTO1lBQ3pCLEtBQUssRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDbkMsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2QztRQUNELFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxlQUFlO1FBQ3ZELFVBQVUsRUFBRSxzQkFBc0I7UUFDbEMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ3RDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztLQUN6QyxDQUFDO0FBakJJLENBaUJKLENBQ0gsQ0FBQztBQUVGLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFDLEVBQVM7UUFBUCxLQUFLLFdBQUE7SUFBTyxPQUFBLENBQUM7UUFDdEQsT0FBTyxFQUFFLE1BQU07S0FDaEIsQ0FBQztBQUZxRCxDQUVyRCxDQUFDLENBQUM7QUFFSixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FDckMsVUFDRSxFQVFlLEVBQ2YsR0FBRztJQVJELElBQUEsR0FBRyxTQUFBLEVBQ0gsR0FBRyxTQUFBLEVBQ0gsWUFBUyxFQUFULElBQUksbUJBQUcsRUFBRSxLQUFBLEVBQ1QsS0FBSyxXQUFBLEVBQ0wsT0FBTyxhQUFBLEVBQ1AsY0FBYyxFQUFkLE1BQU0sbUJBQUcsS0FBSyxLQUFBLEVBQ1gsS0FBSyxjQVBWLG9EQVFDLENBRFM7SUFJVixJQUFNLFdBQVcsR0FBRyxVQUFDLEVBQU87UUFDMUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRixJQUFNLFlBQVksR0FBRyxVQUFDLElBQVksSUFBYSxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7SUFDcEQscUVBQXFFO0lBRXJFLE9BQU8sQ0FDTCxLQUFDLFNBQVMsYUFDUixHQUFHLEVBQUUsR0FBRyxnQkFDSSxHQUFHLEVBQ2YsSUFBSSxFQUFFLElBQUksRUFDVixLQUFLLEVBQUUsS0FBSyxFQUNaLE1BQU0sRUFBRSxNQUFNLEVBQ2QsT0FBTyxFQUFFLFdBQVcsSUFDaEIsS0FBSyxjQUVULEtBQUMsY0FBYyxJQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsR0FBRyxpQkFBYyxNQUFNLEVBQUMsYUFBYSxTQUFHLElBQzNGLENBQ2IsQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0U1ZHIGZyb20gJ3JlYWN0LWlubGluZXN2Zyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxudHlwZSBSZWYgPSBIVE1MRGl2RWxlbWVudDtcblxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG5leHBvcnQgaW50ZXJmYWNlIFN2Z0ljb25Qcm9wcyBleHRlbmRzIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPFJlZj4ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgc2l6ZT86IG51bWJlcjtcbiAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XG4gIGhlaWdodD86IG51bWJlciB8IHN0cmluZztcbiAgc3JjOiBzdHJpbmc7XG4gIGFsdD86IHN0cmluZztcbiAgb25DbGljaz86IChldjogYW55KSA9PiB2b2lkO1xuICBvbk1vdXNlRG93bj86IChldjogYW55KSA9PiB2b2lkO1xuICBjb2xvcj86IHN0cmluZztcbiAgdG9vbHRpcD86IHN0cmluZztcbiAgYWN0aXZlPzogYm9vbGVhbjtcbiAgcm90YXRlPzogYm9vbGVhbjtcbiAgbWFyZ2luTGVmdD86IGJvb2xlYW47XG4gIG1hcmdpblJpZ2h0PzogYm9vbGVhbjtcbn1cblxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnKS53aXRoQ29uZmlnKHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IChwcm9wLCBkZWZhdWx0VmFsaWRhdG9yRm4pID0+XG4gICAgIVsncm90YXRlJ10uaW5jbHVkZXMocHJvcCkgJiYgZGVmYXVsdFZhbGlkYXRvckZuKHByb3ApLFxufSk8e1xuICBzaXplOiBudW1iZXI7XG4gIHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuICBoZWlnaHQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGNvbG9yPzogc3RyaW5nO1xuICBhY3RpdmU/OiBib29sZWFuO1xuICByb3RhdGU/OiBib29sZWFuO1xuICBtYXJnaW5MZWZ0PzogYm9vbGVhbjtcbiAgbWFyZ2luUmlnaHQ/OiBib29sZWFuO1xufT4oXG4gICh7XG4gICAgdGhlbWUsXG4gICAgc2l6ZSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgY29sb3IsXG4gICAgYWN0aXZlLFxuICAgIHJvdGF0ZSxcbiAgICBtYXJnaW5MZWZ0LFxuICAgIG1hcmdpblJpZ2h0LFxuICB9KSA9PiAoe1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgIHdpZHRoOiB3aWR0aCAhPSBudWxsID8gd2lkdGggOiBzaXplLFxuICAgIGhlaWdodDogaGVpZ2h0ICE9IG51bGwgPyBoZWlnaHQgOiBzaXplLFxuICAgIGNvbG9yOiBjb2xvciB8fCAnaW5oZXJpdCcsXG4gICAgc3ZnOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBjb2xvcjogY29sb3IgfHwgJ2luaGVyaXQnLFxuICAgICAgd2lkdGg6IHdpZHRoICE9IG51bGwgPyB3aWR0aCA6IHNpemUsXG4gICAgICBoZWlnaHQ6IGhlaWdodCAhPSBudWxsID8gaGVpZ2h0IDogc2l6ZSxcbiAgICB9LFxuICAgIHRyYW5zZm9ybTogcm90YXRlID8gJ3JvdGF0ZVgoMTgwZGVnKScgOiAncm90YXRlWCgwZGVnKScsXG4gICAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSA1MDBtcyBlYXNlJyxcbiAgICBtYXJnaW5MZWZ0OiBtYXJnaW5MZWZ0ID8gOCA6ICdpbml0aWFsJyxcbiAgICBtYXJnaW5SaWdodDogbWFyZ2luUmlnaHQgPyA4IDogJ2luaXRpYWwnLFxuICB9KVxuKTtcblxuY29uc3QgU3R5bGVkUmVhY3RTVkcgPSBzdHlsZWQoUmVhY3RTVkcpKCh7IHRoZW1lIH0pID0+ICh7XG4gIGRpc3BsYXk6ICdmbGV4Jyxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFN2Z0ljb24gPSBSZWFjdC5mb3J3YXJkUmVmPFJlZiwgU3ZnSWNvblByb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIHNyYyxcbiAgICAgIGFsdCxcbiAgICAgIHNpemUgPSAxNixcbiAgICAgIGNvbG9yLFxuICAgICAgb25DbGljayxcbiAgICAgIHJvdGF0ZSA9IGZhbHNlLFxuICAgICAgLi4ucHJvcHNcbiAgICB9OiBTdmdJY29uUHJvcHMsXG4gICAgcmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gKGV2OiBhbnkpID0+IHtcbiAgICAgIG9uQ2xpY2sgJiYgb25DbGljayhldik7XG4gICAgfTtcblxuICAgIGNvbnN0IHByZVByb2Nlc3NvciA9IChjb2RlOiBzdHJpbmcpOiBzdHJpbmcgPT4gY29kZTtcbiAgICAvLyBmYWxzZSA/IGNvZGUucmVwbGFjZSgvZmlsbD1cIi4qP1wiL2csICdmaWxsPVwiY3VycmVudENvbG9yXCInKSA6IGNvZGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRhaW5lclxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgYXJpYS1sYWJlbD17YWx0fVxuICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgIHJvdGF0ZT17cm90YXRlfVxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgPlxuICAgICAgICA8U3R5bGVkUmVhY3RTVkcgc3JjPXtzcmN9IHByZVByb2Nlc3Nvcj17cHJlUHJvY2Vzc29yfSB0aXRsZT17YWx0fSBhcmlhLWhpZGRlbj1cInRydWVcIiBjYWNoZVJlcXVlc3RzIC8+XG4gICAgICA8L0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBTdmdJY29uO1xuIl19