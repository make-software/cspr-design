import { __assign, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useMultipleSelection, useCombobox } from 'downshift';
import DownIcon from 'assets/icons/ic-arrow-down.svg';
import SearchIcon from 'assets/icons/ic-search.svg';
import DeleteIcon from 'assets/icons/ic-delete.svg';
import { useClickAndTouchAway } from '../../hooks/use-click-and-touch-away';
import FlexRow from '../flex-row/flex-row';
import FlexColumn from '../flex-column/flex-column';
import BodyText from '../body-text/body-text';
import SvgIcon from '../svg-icon/svg-icon';
import Input from '../input/input';
var DropdownContainer = styled.div(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return (__assign({ outline: 'none' }, (disabled && {
        opacity: '0.5',
        pointerEvents: 'none',
    })));
});
var MultiSelectContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        borderRadius: theme.borderRadius.base,
        padding: '8px',
        background: theme.styleguideColors.fillSecondary,
        ':hover, :active': {
            svg: {
                color: theme.styleguideColors.fillPrimaryRed,
            },
        },
    });
});
var InputContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        width: '100%',
    });
});
var StyledInput = styled(Input)(function () { return ({
    width: '100%',
    border: 'none',
    height: '24px',
    '> div': {
        padding: '0 8px',
    },
}); });
var DropdownIconWrapper = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        paddingRight: '8px',
        marginLeft: '8px',
    });
});
var ArrowSvgIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            fill: theme.styleguideColors.contentPrimary,
        },
    });
});
var ClearSvgIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentPrimary,
        },
    });
});
var ChipItemContainer = styled.span(function (_a) {
    var theme = _a.theme;
    return ({
        borderRadius: theme.borderRadius.base,
        cursor: 'pointer',
        padding: '2px 8px',
        background: theme.styleguideColors.fillTertriary,
        color: theme.styleguideColors.contentPrimary,
        wordBreak: 'break-word',
    });
});
var ItemsContainer = styled.div(function (_a) {
    var theme = _a.theme, isOpen = _a.isOpen;
    return ({
        display: isOpen ? 'inherit' : 'none',
        marginTop: 4,
        borderRadius: theme.borderRadius.base,
        background: theme.styleguideColors.fillSecondary,
        maxHeight: '250px',
        overflowY: 'scroll',
    });
});
var ItemsContainerEmpty = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        padding: '32px 16px',
        pointerEvents: 'none',
        justifyContent: 'center',
    });
});
var ItemContainer = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        cursor: 'pointer',
        minHeight: 36,
        padding: '8px 16px',
        wordBreak: 'break-word',
        ':hover, :active': {
            background: theme.styleguideColors.fillSecondaryBlueHover,
            fontWeight: 600,
        },
    });
});
var MultiSelectDeleteIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentBlue,
        },
        ':hover, :active': {
            path: {
                stroke: theme.styleguideColors.contentRed,
            },
        },
    });
});
var getChangeEvent = function (value) {
    return {
        target: {
            name: undefined,
            value: value,
        },
    };
};
export function MultiSelectInput(props) {
    var items = props.items, value = props.value, label = props.label, placeholder = props.placeholder, _a = props.disabled, disabled = _a === void 0 ? false : _a, onSelectItem = props.onSelectItem, onAddItem = props.onAddItem, onRemoveItem = props.onRemoveItem, onChangeInput = props.onChangeInput;
    var _b = useState(''), inputValue = _b[0], setInputValue = _b[1];
    var _c = useMultipleSelection({
        initialSelectedItems: value,
        onSelectedItemsChange: function (changes) {
            onSelectItem && onSelectItem(getChangeEvent(changes.selectedItems));
        },
    }), getSelectedItemProps = _c.getSelectedItemProps, getDropdownProps = _c.getDropdownProps, addSelectedItem = _c.addSelectedItem, removeSelectedItem = _c.removeSelectedItem, selectedItems = _c.selectedItems, setSelectedItems = _c.setSelectedItems, reset = _c.reset;
    var inputValueItem = (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) >= 3
        ? [
            {
                id: inputValue,
                label: inputValue,
                value: inputValue,
                chipLabel: inputValue,
            },
        ]
        : [];
    var itemsWithCustomInputValue = __spreadArray(__spreadArray([], inputValueItem, true), items, true);
    var _d = useCombobox({
        inputValue: inputValue,
        items: itemsWithCustomInputValue,
        onStateChange: function (_a) {
            var inputValue = _a.inputValue, type = _a.type, newSelectedItem = _a.selectedItem;
            switch (type) {
                case useCombobox.stateChangeTypes.InputChange:
                    setInputValue(inputValue || '');
                    onChangeInput && onChangeInput(inputValue || '');
                    break;
                case useCombobox.stateChangeTypes.InputKeyDownEnter:
                case useCombobox.stateChangeTypes.ItemClick:
                case useCombobox.stateChangeTypes.InputBlur:
                    var isAlreadySelected = selectedItems.some(function (i) { return i.value === (newSelectedItem === null || newSelectedItem === void 0 ? void 0 : newSelectedItem.value); });
                    if (newSelectedItem) {
                        if (isAlreadySelected) {
                            setSelectedItems(selectedItems.filter(function (i) { return i.value !== newSelectedItem.value; }));
                            onRemoveItem && onRemoveItem(getChangeEvent(newSelectedItem));
                        }
                        else {
                            addSelectedItem(newSelectedItem);
                            onAddItem && onAddItem(getChangeEvent(newSelectedItem));
                        }
                    }
                    break;
                case useCombobox.stateChangeTypes.FunctionCloseMenu:
                    handleClearInput();
                    break;
                default:
                    break;
            }
        },
        stateReducer: function (state, actionAndChanges) {
            var changes = actionAndChanges.changes, type = actionAndChanges.type;
            switch (type) {
                case useCombobox.stateChangeTypes.InputKeyDownEnter:
                case useCombobox.stateChangeTypes.ItemClick:
                    return __assign(__assign({}, changes), { isOpen: state.isOpen });
                default:
                    return changes;
            }
        },
    }), isOpen = _d.isOpen, getToggleButtonProps = _d.getToggleButtonProps, getLabelProps = _d.getLabelProps, getMenuProps = _d.getMenuProps, getInputProps = _d.getInputProps, getItemProps = _d.getItemProps, openMenu = _d.openMenu;
    var outerClickRef = useClickAndTouchAway({
        callback: function () {
            if (isOpen) {
                handleClearInput();
            }
        },
    }).ref;
    //Align resetting selected values if they were reset in parent
    useEffect(function () {
        if (!value || value.length < 1) {
            reset();
        }
    }, [value]);
    var handleClearInput = function () {
        setInputValue('');
        onChangeInput && onChangeInput('');
    };
    var handleClearAll = function () {
        handleClearInput();
        onSelectItem && onSelectItem(getChangeEvent(null));
        reset();
    };
    var showInput = isOpen || selectedItems.length === 0;
    return (_jsx(DropdownContainer, __assign({ disabled: disabled, ref: outerClickRef }, { children: _jsxs(FlexColumn, __assign({ itemsSpacing: 4 }, { children: [label && (_jsx(BodyText, __assign({ lineHeight: 'xs' }, getLabelProps(), { size: 1 }, { children: label }))), _jsxs("div", { children: [_jsxs(MultiSelectContainer, __assign({ isOpen: isOpen, align: "center", justify: "space-between" }, getToggleButtonProps(getDropdownProps({ preventKeyAction: isOpen })), { children: [_jsxs(InputContainer, __assign({ gap: 8, wrap: 'wrap' }, { children: [selectedItems.map(function (selectedItem, index) { return (_jsx(ChipItemContainer, __assign({}, getSelectedItemProps({ selectedItem: selectedItem, index: index }), { children: _jsx(BodyText, __assign({ lineHeight: 'xs', size: 3, variation: selectedItem ? 'inherit' : 'darkGray' }, { children: _jsxs(FlexRow, __assign({ align: 'center', gap: 4 }, { children: [(selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.chipLabel) || (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.label), _jsx(MultiSelectDeleteIcon, { onClick: function (event) {
                                                                event.preventDefault();
                                                                event.stopPropagation();
                                                                removeSelectedItem(selectedItem);
                                                            }, size: 14, src: DeleteIcon })] })) })) }), "selected-item-".concat(index))); }), showInput ? (_jsx(StyledInput, __assign({}, getInputProps({
                                            placeholder: placeholder,
                                            value: inputValue || '',
                                            disabled: disabled,
                                            onFocus: function () {
                                                openMenu();
                                            },
                                        }, { suppressRefError: true }), { prefixIcon: _jsx(SvgIcon, { src: SearchIcon }) }))) : null] })), _jsxs(DropdownIconWrapper, { children: [!!selectedItems.length && (_jsx(ClearSvgIcon, { src: DeleteIcon, onClick: handleClearAll, marginRight: true })), _jsx(ArrowSvgIcon, { src: DownIcon, rotate: isOpen })] })] })), _jsx(ItemsContainer, __assign({}, getMenuProps(), { isOpen: isOpen }, { children: isOpen &&
                                (!(itemsWithCustomInputValue && itemsWithCustomInputValue.length) ? (_jsx(ItemsContainerEmpty, { children: _jsx(BodyText, __assign({ size: 3, lineHeight: 'xs', scale: 'xs' }, { children: "No items found" })) })) : (itemsWithCustomInputValue.map(function (item, index) { return (_jsx(ItemContainer, __assign({ align: "center", justify: "space-between", itemsSpacing: 10 }, getItemProps({
                                    item: item,
                                    index: index,
                                    'aria-selected': selectedItems.includes(item),
                                }), { children: _jsx(BodyText, __assign({ size: 3, lineHeight: 'xs', scale: 'xs' }, { children: item.label })) }), "".concat(item.value).concat(index))); }))) }))] })] })) })));
}
//# sourceMappingURL=data:application/json;base64,