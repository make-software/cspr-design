import { __assign, __makeTemplateObject, __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled from 'styled-components';
import Big from 'big.js';
import { BodyText } from '../body-text/body-text';
import { FlexColumn } from '../flex-column/flex-column';
import { FlexRow } from '../flex-row/flex-row';
import { formatHash } from '../../utils/formatters';
import { Tooltip } from '../tooltip/tooltip';
import { useMatchMedia } from '../../utils/match-media';
import { CopyHash } from '../copy-hash/copy-hash';
import { Cspr } from '../cspr/cspr';
import { PrecisionCase } from '../../utils/currency';
import { HashLength } from '../../utils/formatters';
import Boin from "../boin/boin";
export var ValuesRow = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        height: 36,
        borderRadius: theme.borderRadius.base,
        padding: '8px 16px',
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        border: theme.border.base,
    });
});
var StyledFlexColumn = styled(FlexColumn)(function (_a) {
    var disabled = _a.disabled;
    return (__assign({}, (disabled && {
        opacity: 0.5,
    })));
});
var BalanceText = styled(BodyText)(function (_a) { return ({
    textAlign: 'right',
}); });
var StyledIconContainer = styled.span(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  margin-left: 10px;\n"], ["\n  margin-left: 10px;\n"])));
var Ticker = function (_a) {
    var ticker = _a.ticker, props = __rest(_a, ["ticker"]);
    return ticker === 'CSPR' ? (_jsx(Cspr, __assign({}, props))) : (_jsx(Boin, __assign({}, props)));
};
var AccountInfoBalance = function (_a) {
    var accountBalance = _a.accountBalance, emptyBalance = _a.emptyBalance, loading = _a.loading, error = _a.error, _b = _a.ticker, ticker = _b === void 0 ? 'CSPR' : _b;
    return (_jsx(BalanceText, __assign({ size: 3, monotype: true }, { children: emptyBalance ? (_jsx(Ticker, { ticker: ticker, motes: '0', precisionCase: PrecisionCase.deployCost })) : loading ? ('Loading...') : error != null ? (error) : (_jsx(Ticker, { ticker: ticker, motes: accountBalance, precisionCase: PrecisionCase.deployCost })) })));
};
export function AccountInfoRow(props) {
    var publicKey = props.publicKey, label = props.label, _a = props.rightLabel, rightLabel = _a === void 0 ? 'Balance' : _a, accountEmpty = props.accountEmpty, accountBalance = props.accountBalance, loading = props.loading, error = props.error, _b = props.ticker, ticker = _b === void 0 ? 'CSPR' : _b;
    var responsiveHashSize = useMatchMedia([HashLength.TINY, HashLength.SMALL, HashLength.SMALL, HashLength.SMALL], []);
    var emptyBalance = accountEmpty ||
        (!loading && accountBalance != null && Big(accountBalance).lte('0'));
    return (_jsxs(StyledFlexColumn, __assign({ disabled: props.disabled, gap: 4 }, { children: [_jsxs(FlexRow, __assign({ justify: "space-between" }, { children: [_jsx(BodyText, __assign({ size: 1 }, { children: label })), _jsx(BodyText, __assign({ size: 1 }, { children: rightLabel }))] })), _jsx(ValuesRow, __assign({ justify: "space-between", align: "center" }, { children: publicKey && (_jsxs(_Fragment, { children: [_jsxs(FlexRow, __assign({ align: "center" }, { children: [_jsx(Tooltip, __assign({ title: publicKey }, { children: _jsx(BodyText, __assign({ size: 3, monotype: true }, { children: formatHash(publicKey, responsiveHashSize) })) })), _jsx(StyledIconContainer, { children: _jsx(CopyHash, { value: publicKey, minified: true, variation: "gray" }) })] })), _jsx(AccountInfoBalance, { accountBalance: accountBalance, emptyBalance: emptyBalance, error: error, loading: loading, ticker: ticker })] })) }))] })));
}
export default AccountInfoRow;
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,