import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled from 'styled-components';
import Big from 'big.js';
import { BodyText } from '../body-text/body-text';
import { FlexColumn } from '../flex-column/flex-column';
import { FlexRow } from '../flex-row/flex-row';
import { formatHash } from '../../utils/formatters';
import { Tooltip } from '../tooltip/tooltip';
import { useMatchMedia } from '../../utils/match-media';
import { CopyHash } from '../copy-hash/copy-hash';
import { Cspr } from '../cspr/cspr';
import { PrecisionCase } from '../../utils/currency';
import { HashLength } from '../../utils/formatters';
export var ValuesRow = styled(FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        height: 36,
        borderRadius: theme.borderRadius.base,
        padding: '8px 16px',
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        border: theme.border.base,
    });
});
var StyledFlexColumn = styled(FlexColumn)(function (_a) {
    var disabled = _a.disabled;
    return (__assign({}, (disabled && {
        opacity: 0.5,
    })));
});
var BalanceText = styled(BodyText)(function (_a) { return ({
    textAlign: 'right',
}); });
export function AccountInfoRow(props) {
    var publicKey = props.publicKey, accountEmpty = props.accountEmpty, accountBalance = props.accountBalance, loading = props.loading, error = props.error;
    var responsiveHashSize = useMatchMedia([HashLength.TINY, HashLength.SMALL, HashLength.SMALL, HashLength.SMALL], []);
    var emptyBalance = accountEmpty ||
        (!loading && accountBalance != null && Big(accountBalance).lte('0'));
    return (_jsx(StyledFlexColumn, __assign({ disabled: props.disabled, gap: 4 }, { children: _jsx(ValuesRow, __assign({ justify: "space-between", align: "center" }, { children: publicKey && (_jsxs(_Fragment, { children: [_jsxs(FlexRow, __assign({ align: "center" }, { children: [_jsx(Tooltip, __assign({ title: publicKey }, { children: _jsx(BodyText, __assign({ size: 3, monotype: true }, { children: formatHash(publicKey, responsiveHashSize) })) })), _jsx(CopyHash, { value: publicKey, minified: true, variation: "gray" })] })), _jsx(BalanceText, __assign({ size: 3, monotype: true }, { children: emptyBalance ? (_jsx(Cspr, { motes: '0', precisionCase: PrecisionCase.deployCost })) : loading ? ('Loading...') : error != null ? (error) : (_jsx(Cspr, { motes: accountBalance, precisionCase: PrecisionCase.deployCost })) }))] })) })) })));
}
export default AccountInfoRow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1pbmZvLXJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9hY2NvdW50LWluZm8tcm93L2FjY291bnQtaW5mby1yb3cudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUM7QUFDdkMsT0FBTyxHQUFHLE1BQU0sUUFBUSxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFcEQsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFDLEVBQVM7UUFBUCxLQUFLLFdBQUE7SUFBTyxPQUFBLENBQUM7UUFDdkQsTUFBTSxFQUFFLEVBQUU7UUFDVixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJO1FBQ3JDLE9BQU8sRUFBRSxVQUFVO1FBQ25CLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCO1FBQ3pELE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUk7S0FDMUIsQ0FBQztBQU5zRCxDQU10RCxDQUFDLENBQUM7QUFFSixJQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FDekMsVUFBQyxFQUFZO1FBQVYsUUFBUSxjQUFBO0lBQU8sT0FBQSxjQUNiLENBQUMsUUFBUSxJQUFJO1FBQ2QsT0FBTyxFQUFFLEdBQUc7S0FDYixDQUFDLEVBQ0Y7QUFKZ0IsQ0FJaEIsQ0FDSCxDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsQ0FBQztJQUM1QyxTQUFTLEVBQUUsT0FBTztDQUNuQixDQUFDLEVBRjJDLENBRTNDLENBQUMsQ0FBQztBQVlKLE1BQU0sVUFBVSxjQUFjLENBQUMsS0FBMEI7SUFDL0MsSUFBQSxTQUFTLEdBQ2YsS0FBSyxVQURVLEVBQUUsWUFBWSxHQUM3QixLQUFLLGFBRHdCLEVBQUUsY0FBYyxHQUM3QyxLQUFLLGVBRHdDLEVBQUUsT0FBTyxHQUN0RCxLQUFLLFFBRGlELEVBQUUsS0FBSyxHQUM3RCxLQUFLLE1BRHdELENBQ3ZEO0lBRVIsSUFBTSxrQkFBa0IsR0FBRyxhQUFhLENBQ3RDLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUN2RSxFQUFFLENBQ0gsQ0FBQztJQUVGLElBQU0sWUFBWSxHQUNoQixZQUFZO1FBQ1osQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV2RSxPQUFPLENBQ0wsS0FBQyxnQkFBZ0IsYUFBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxnQkFDaEQsS0FBQyxTQUFTLGFBQUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxLQUFLLEVBQUMsUUFBUSxnQkFDOUMsU0FBUyxJQUFJLENBQ1osOEJBQ0UsTUFBQyxPQUFPLGFBQUMsS0FBSyxFQUFDLFFBQVEsaUJBQ3JCLEtBQUMsT0FBTyxhQUFDLEtBQUssRUFBRSxTQUFTLGdCQUN2QixLQUFDLFFBQVEsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsc0JBQ3hCLFVBQVUsQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsSUFDakMsSUFDSCxFQUNWLEtBQUMsUUFBUSxJQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxRQUFDLFNBQVMsRUFBQyxNQUFNLEdBQUcsS0FDaEQsRUFDVixLQUFDLFdBQVcsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsc0JBQzNCLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FDZCxLQUFDLElBQUksSUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUMsVUFBVSxHQUFJLENBQzlELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDWixZQUFZLENBQ2IsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDbEIsS0FBSyxDQUNOLENBQUMsQ0FBQyxDQUFDLENBQ0YsS0FBQyxJQUFJLElBQ0gsS0FBSyxFQUFFLGNBQWMsRUFDckIsYUFBYSxFQUFFLGFBQWEsQ0FBQyxVQUFVLEdBQ3ZDLENBQ0gsSUFDVyxJQUNiLENBQ0osSUFDUyxJQUNLLENBQ3BCLENBQUM7QUFDSixDQUFDO0FBRUQsZUFBZSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgQmlnIGZyb20gJ2JpZy5qcyc7XG5pbXBvcnQgeyBCb2R5VGV4dCB9IGZyb20gJy4uL2JvZHktdGV4dC9ib2R5LXRleHQnO1xuaW1wb3J0IHsgRmxleENvbHVtbiB9IGZyb20gJy4uL2ZsZXgtY29sdW1uL2ZsZXgtY29sdW1uJztcbmltcG9ydCB7IEZsZXhSb3cgfSBmcm9tICcuLi9mbGV4LXJvdy9mbGV4LXJvdyc7XG5pbXBvcnQgeyBmb3JtYXRIYXNoIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0dGVycyc7XG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnLi4vdG9vbHRpcC90b29sdGlwJztcbmltcG9ydCB7IHVzZU1hdGNoTWVkaWEgfSBmcm9tICcuLi8uLi91dGlscy9tYXRjaC1tZWRpYSc7XG5pbXBvcnQgeyBDb3B5SGFzaCB9IGZyb20gJy4uL2NvcHktaGFzaC9jb3B5LWhhc2gnO1xuaW1wb3J0IHsgQ3NwciB9IGZyb20gJy4uL2NzcHIvY3Nwcic7XG5cbmltcG9ydCB7IFByZWNpc2lvbkNhc2UgfSBmcm9tICcuLi8uLi91dGlscy9jdXJyZW5jeSc7XG5pbXBvcnQgeyBIYXNoTGVuZ3RoIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0dGVycyc7XG5cbmV4cG9ydCBjb25zdCBWYWx1ZXNSb3cgPSBzdHlsZWQoRmxleFJvdykoKHsgdGhlbWUgfSkgPT4gKHtcbiAgaGVpZ2h0OiAzNixcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuYmFzZSxcbiAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmJhY2tncm91bmRQcmltYXJ5LFxuICBib3JkZXI6IHRoZW1lLmJvcmRlci5iYXNlLFxufSkpO1xuXG5jb25zdCBTdHlsZWRGbGV4Q29sdW1uID0gc3R5bGVkKEZsZXhDb2x1bW4pPHsgZGlzYWJsZWQ/OiBib29sZWFuIH0+KFxuICAoeyBkaXNhYmxlZCB9KSA9PiAoe1xuICAgIC4uLihkaXNhYmxlZCAmJiB7XG4gICAgICBvcGFjaXR5OiAwLjUsXG4gICAgfSksXG4gIH0pXG4pO1xuXG5jb25zdCBCYWxhbmNlVGV4dCA9IHN0eWxlZChCb2R5VGV4dCkoKHt9KSA9PiAoe1xuICB0ZXh0QWxpZ246ICdyaWdodCcsXG59KSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3VudEluZm9Sb3dQcm9wcyB7XG4gIHB1YmxpY0tleTogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICBhY2NvdW50QmFsYW5jZTogc3RyaW5nIHwgbnVsbDtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG4gIGFjY291bnRFbXB0eTogYm9vbGVhbjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWNjb3VudEluZm9Sb3cocHJvcHM6IEFjY291bnRJbmZvUm93UHJvcHMpIHtcbiAgY29uc3QgeyBwdWJsaWNLZXksIGFjY291bnRFbXB0eSwgYWNjb3VudEJhbGFuY2UsIGxvYWRpbmcsIGVycm9yIH0gPVxuICAgIHByb3BzO1xuXG4gIGNvbnN0IHJlc3BvbnNpdmVIYXNoU2l6ZSA9IHVzZU1hdGNoTWVkaWEoXG4gICAgW0hhc2hMZW5ndGguVElOWSwgSGFzaExlbmd0aC5TTUFMTCwgSGFzaExlbmd0aC5TTUFMTCwgSGFzaExlbmd0aC5TTUFMTF0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBlbXB0eUJhbGFuY2UgPVxuICAgIGFjY291bnRFbXB0eSB8fFxuICAgICghbG9hZGluZyAmJiBhY2NvdW50QmFsYW5jZSAhPSBudWxsICYmIEJpZyhhY2NvdW50QmFsYW5jZSkubHRlKCcwJykpO1xuXG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEZsZXhDb2x1bW4gZGlzYWJsZWQ9e3Byb3BzLmRpc2FibGVkfSBnYXA9ezR9PlxuICAgICAgPFZhbHVlc1JvdyBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiIGFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgIHtwdWJsaWNLZXkgJiYgKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8RmxleFJvdyBhbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17cHVibGljS2V5fT5cbiAgICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30gbW9ub3R5cGU+XG4gICAgICAgICAgICAgICAgICB7Zm9ybWF0SGFzaChwdWJsaWNLZXksIHJlc3BvbnNpdmVIYXNoU2l6ZSl9XG4gICAgICAgICAgICAgICAgPC9Cb2R5VGV4dD5cbiAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICA8Q29weUhhc2ggdmFsdWU9e3B1YmxpY0tleX0gbWluaWZpZWQgdmFyaWF0aW9uPVwiZ3JheVwiIC8+XG4gICAgICAgICAgICA8L0ZsZXhSb3c+XG4gICAgICAgICAgICA8QmFsYW5jZVRleHQgc2l6ZT17M30gbW9ub3R5cGU+XG4gICAgICAgICAgICAgIHtlbXB0eUJhbGFuY2UgPyAoXG4gICAgICAgICAgICAgICAgPENzcHIgbW90ZXM9eycwJ30gcHJlY2lzaW9uQ2FzZT17UHJlY2lzaW9uQ2FzZS5kZXBsb3lDb3N0fSAvPlxuICAgICAgICAgICAgICApIDogbG9hZGluZyA/IChcbiAgICAgICAgICAgICAgICAnTG9hZGluZy4uLidcbiAgICAgICAgICAgICAgKSA6IGVycm9yICE9IG51bGwgPyAoXG4gICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8Q3NwclxuICAgICAgICAgICAgICAgICAgbW90ZXM9e2FjY291bnRCYWxhbmNlfVxuICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uQ2FzZT17UHJlY2lzaW9uQ2FzZS5kZXBsb3lDb3N0fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0JhbGFuY2VUZXh0PlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgPC9WYWx1ZXNSb3c+XG4gICAgPC9TdHlsZWRGbGV4Q29sdW1uPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBY2NvdW50SW5mb1JvdztcbiJdfQ==