import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from 'styled-components';
import Button from '../button/button';
import SvgIcon from '../svg-icon/svg-icon';
import FlexRow from '../flex-row/flex-row';
var StyledButton = styled(Button)(function (_a) {
    var theme = _a.theme, active = _a.active, disabled = _a.disabled;
    return theme.withMedia(__assign(__assign({ minWidth: [131, 140], padding: '6px', maxWidth: 'fit-content', height: 32, fontSize: '1.3rem', fontWeight: theme.typography.fontWeight.medium, cursor: 'pointer', marginLeft: 2, color: theme.styleguideColors.contentBlue, borderRadius: 0, textTransform: 'capitalize', ':first-of-type': {
            borderRadius: '4px 0 0 4px',
        }, ':last-of-type': {
            borderRadius: '0 4px 4px 0',
        }, ':hover': {
            background: theme.styleguideColors.fillSecondaryBlueHover,
            color: theme.styleguideColors.contentBlue,
        }, ':active': {
            background: theme.styleguideColors.fillSecondaryBlueClick,
            color: theme.styleguideColors.contentBlue,
        } }, (active && {
        cursor: 'default',
        background: theme.styleguideColors.fillPrimaryBlue,
        color: theme.styleguideColors.contentOnFill,
        ':hover': {
            background: theme.styleguideColors.fillPrimaryBlue,
        },
        ':active': {
            background: theme.styleguideColors.fillPrimaryBlue,
        },
    })), (disabled && {
        cursor: 'default',
        pointerEvents: 'none',
        color: theme.styleguideColors.contentTertiary,
    })));
});
export function TabMenuItem(props) {
    return (_jsx(StyledButton, __assign({ color: "utility" }, props, { children: _jsxs(FlexRow, __assign({ gap: 3, align: 'center' }, { children: [props.children, props.tooltip && (_jsx(SvgIcon, { width: 17, height: 16, src: "assets/icons/ic-info.svg" }))] })) })));
}
export default TabMenuItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLW1lbnUtaXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy90YWItbWVudS1pdGVtL3RhYi1tZW51LWl0ZW0udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUM7QUFHdkMsT0FBTyxNQUF1QixNQUFNLGtCQUFrQixDQUFDO0FBQ3ZELE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBQzNDLE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBUTNDLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FDakMsVUFBQyxFQUEyQjtRQUF6QixLQUFLLFdBQUEsRUFBRSxNQUFNLFlBQUEsRUFBRSxRQUFRLGNBQUE7SUFDeEIsT0FBQSxLQUFLLENBQUMsU0FBUyxxQkFDYixRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ3BCLE9BQU8sRUFBRSxLQUFLLEVBQ2QsUUFBUSxFQUFFLGFBQWEsRUFDdkIsTUFBTSxFQUFFLEVBQUUsRUFDVixRQUFRLEVBQUUsUUFBUSxFQUNsQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUM5QyxNQUFNLEVBQUUsU0FBUyxFQUNqQixVQUFVLEVBQUUsQ0FBQyxFQUNiLEtBQUssRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUN6QyxZQUFZLEVBQUUsQ0FBQyxFQUNmLGFBQWEsRUFBRSxZQUFZLEVBQzNCLGdCQUFnQixFQUFFO1lBQ2hCLFlBQVksRUFBRSxhQUFhO1NBQzVCLEVBQ0QsZUFBZSxFQUFFO1lBQ2YsWUFBWSxFQUFFLGFBQWE7U0FDNUIsRUFFRCxRQUFRLEVBQUU7WUFDUixVQUFVLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQjtZQUN6RCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFdBQVc7U0FDMUMsRUFDRCxTQUFTLEVBQUU7WUFDVCxVQUFVLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQjtZQUN6RCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFdBQVc7U0FDMUMsSUFFRSxDQUFDLE1BQU0sSUFBSTtRQUNaLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLFVBQVUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsZUFBZTtRQUNsRCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGFBQWE7UUFDM0MsUUFBUSxFQUFFO1lBQ1IsVUFBVSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1NBQ25EO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsVUFBVSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1NBQ25EO0tBQ0YsQ0FBQyxHQUVDLENBQUMsUUFBUSxJQUFJO1FBQ2QsTUFBTSxFQUFFLFNBQVM7UUFDakIsYUFBYSxFQUFFLE1BQU07UUFDckIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO0tBQzlDLENBQUMsRUFDRjtBQTdDRixDQTZDRSxDQUNMLENBQUM7QUFFRixNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQXVCO0lBQ2pELE9BQU8sQ0FDSCxLQUFDLFlBQVksYUFBQyxLQUFLLEVBQUMsU0FBUyxJQUFLLEtBQUssY0FDckMsTUFBQyxPQUFPLGFBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxpQkFDN0IsS0FBSyxDQUFDLFFBQVEsRUFDZCxLQUFLLENBQUMsT0FBTyxJQUFJLENBQ2hCLEtBQUMsT0FBTyxJQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUMsMEJBQTBCLEdBQUcsQ0FDbEUsS0FDTyxJQUNHLENBQ2xCLENBQUM7QUFDSixDQUFDO0FBRUQsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcclxuXHJcbmltcG9ydCB7IEFjdGl2YWJsZVByb3BzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xyXG5pbXBvcnQgQnV0dG9uLCB7IEJ1dHRvblByb3BzIH0gZnJvbSAnLi4vYnV0dG9uL2J1dHRvbic7XHJcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL3N2Zy1pY29uL3N2Zy1pY29uJztcclxuaW1wb3J0IEZsZXhSb3cgZnJvbSAnLi4vZmxleC1yb3cvZmxleC1yb3cnO1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGFiTWVudUl0ZW1Qcm9wcyBleHRlbmRzIEJ1dHRvblByb3BzLCBBY3RpdmFibGVQcm9wcyB7XHJcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xyXG4gIHRvb2x0aXA/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IFN0eWxlZEJ1dHRvbiA9IHN0eWxlZChCdXR0b24pPFRhYk1lbnVJdGVtUHJvcHM+KFxyXG4gICh7IHRoZW1lLCBhY3RpdmUsIGRpc2FibGVkIH0pID0+XHJcbiAgICB0aGVtZS53aXRoTWVkaWEoe1xyXG4gICAgICBtaW5XaWR0aDogWzEzMSwgMTQwXSxcclxuICAgICAgcGFkZGluZzogJzZweCcsXHJcbiAgICAgIG1heFdpZHRoOiAnZml0LWNvbnRlbnQnLFxyXG4gICAgICBoZWlnaHQ6IDMyLFxyXG4gICAgICBmb250U2l6ZTogJzEuM3JlbScsXHJcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodC5tZWRpdW0sXHJcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxyXG4gICAgICBtYXJnaW5MZWZ0OiAyLFxyXG4gICAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50Qmx1ZSxcclxuICAgICAgYm9yZGVyUmFkaXVzOiAwLFxyXG4gICAgICB0ZXh0VHJhbnNmb3JtOiAnY2FwaXRhbGl6ZScsXHJcbiAgICAgICc6Zmlyc3Qtb2YtdHlwZSc6IHtcclxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHggMCAwIDRweCcsXHJcbiAgICAgIH0sXHJcbiAgICAgICc6bGFzdC1vZi10eXBlJzoge1xyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzAgNHB4IDRweCAwJyxcclxuICAgICAgfSxcclxuXHJcbiAgICAgICc6aG92ZXInOiB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5maWxsU2Vjb25kYXJ5Qmx1ZUhvdmVyLFxyXG4gICAgICAgIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRCbHVlLFxyXG4gICAgICB9LFxyXG4gICAgICAnOmFjdGl2ZSc6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxTZWNvbmRhcnlCbHVlQ2xpY2ssXHJcbiAgICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudEJsdWUsXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAuLi4oYWN0aXZlICYmIHtcclxuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcclxuICAgICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxQcmltYXJ5Qmx1ZSxcclxuICAgICAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50T25GaWxsLFxyXG4gICAgICAgICc6aG92ZXInOiB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxQcmltYXJ5Qmx1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgICc6YWN0aXZlJzoge1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5maWxsUHJpbWFyeUJsdWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSksXHJcblxyXG4gICAgICAuLi4oZGlzYWJsZWQgJiYge1xyXG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxyXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcclxuICAgICAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50VGVydGlhcnksXHJcbiAgICAgIH0pLFxyXG4gICAgfSlcclxuKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBUYWJNZW51SXRlbShwcm9wczogVGFiTWVudUl0ZW1Qcm9wcykge1xyXG4gIHJldHVybiAoXHJcbiAgICAgIDxTdHlsZWRCdXR0b24gY29sb3I9XCJ1dGlsaXR5XCIgey4uLnByb3BzfT5cclxuICAgICAgICA8RmxleFJvdyBnYXA9ezN9IGFsaWduPXsnY2VudGVyJ30+XHJcbiAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICB7cHJvcHMudG9vbHRpcCAmJiAoXHJcbiAgICAgICAgICAgIDxTdmdJY29uIHdpZHRoPXsxN30gaGVpZ2h0PXsxNn0gc3JjPVwiYXNzZXRzL2ljb25zL2ljLWluZm8uc3ZnXCIgLz5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9GbGV4Um93PlxyXG4gICAgICA8L1N0eWxlZEJ1dHRvbj5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUYWJNZW51SXRlbTtcclxuIl19