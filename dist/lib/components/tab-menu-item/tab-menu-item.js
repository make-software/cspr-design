import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from 'styled-components';
import Button from '../button/button';
import SvgIcon from '../svg-icon/svg-icon';
import FlexRow from '../flex-row/flex-row';
import { matchSize } from "../../utils/match-size";
import Tooltip from "../tooltip/tooltip";
var StyledButton = styled(Button)(function (_a) {
    var theme = _a.theme, active = _a.active, disabled = _a.disabled, _b = _a.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b, _c = _a.scale, scale = _c === void 0 ? 'sm' : _c;
    return theme.withMedia(__assign(__assign({ minWidth: [131, 140], padding: '6px', maxWidth: 'fit-content', height: 32, fontSize: matchSize({
            sm: '1.3rem',
            xs: '0.8125rem',
        }, scale), lineHeight: matchSize({
            sm: '1.5rem',
            xs: '1.25rem',
        }, lineHeight), fontWeight: theme.typography.fontWeight.medium, cursor: 'pointer', marginLeft: 2, color: theme.styleguideColors.contentBlue, borderRadius: 0, textTransform: 'capitalize', ':first-of-type': {
            borderRadius: '4px 0 0 4px',
        }, ':last-of-type': {
            borderRadius: '0 4px 4px 0',
        }, ':hover': {
            background: theme.styleguideColors.fillSecondaryBlueHover,
            color: theme.styleguideColors.contentBlue,
        }, ':active': {
            background: theme.styleguideColors.fillSecondaryBlueClick,
            color: theme.styleguideColors.contentBlue,
        } }, (active && {
        cursor: 'default',
        background: theme.styleguideColors.fillPrimaryBlue,
        color: theme.styleguideColors.contentOnFill,
        ':hover': {
            background: theme.styleguideColors.fillPrimaryBlue,
        },
        ':active': {
            background: theme.styleguideColors.fillPrimaryBlue,
        },
    })), (disabled && {
        cursor: 'default',
        pointerEvents: 'none',
        color: theme.styleguideColors.contentTertiary,
    })));
});
export function TabMenuItem(props) {
    return (_jsx(Tooltip, __assign({ title: props.tooltip, limitWidth: true, lineHeight: props.lineHeight, scale: props.scale }, { children: _jsx(StyledButton, __assign({ color: "utility" }, props, { children: _jsxs(FlexRow, __assign({ gap: 3, align: 'center' }, { children: [props.children, props.tooltip && (_jsx(SvgIcon, { width: 17, height: 16, src: "assets/icons/ic-info.svg" }))] })) })) })));
}
export default TabMenuItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLW1lbnUtaXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy90YWItbWVudS1pdGVtL3RhYi1tZW51LWl0ZW0udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUM7QUFHdkMsT0FBTyxNQUF1QixNQUFNLGtCQUFrQixDQUFDO0FBQ3ZELE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBQzNDLE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRCxPQUFPLE9BQU8sTUFBTSxvQkFBb0IsQ0FBQztBQVV6QyxJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQ2pDLFVBQUMsRUFBNEQ7UUFBMUQsS0FBSyxXQUFBLEVBQUUsTUFBTSxZQUFBLEVBQUUsUUFBUSxjQUFBLEVBQUUsa0JBQWlCLEVBQWpCLFVBQVUsbUJBQUcsSUFBSSxLQUFBLEVBQUUsYUFBWSxFQUFaLEtBQUssbUJBQUcsSUFBSSxLQUFBO0lBQ3pELE9BQUEsS0FBSyxDQUFDLFNBQVMscUJBQ2IsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUNwQixPQUFPLEVBQUUsS0FBSyxFQUNkLFFBQVEsRUFBRSxhQUFhLEVBQ3ZCLE1BQU0sRUFBRSxFQUFFLEVBQ1YsUUFBUSxFQUFFLFNBQVMsQ0FDZjtZQUNJLEVBQUUsRUFBRSxRQUFRO1lBQ1osRUFBRSxFQUFFLFdBQVc7U0FDbEIsRUFDRCxLQUFLLENBQ1IsRUFDQyxVQUFVLEVBQUUsU0FBUyxDQUNqQjtZQUNJLEVBQUUsRUFBRSxRQUFRO1lBQ1osRUFBRSxFQUFFLFNBQVM7U0FDaEIsRUFDRCxVQUFVLENBQ2IsRUFDSCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUM5QyxNQUFNLEVBQUUsU0FBUyxFQUNqQixVQUFVLEVBQUUsQ0FBQyxFQUNiLEtBQUssRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUN6QyxZQUFZLEVBQUUsQ0FBQyxFQUNmLGFBQWEsRUFBRSxZQUFZLEVBQzNCLGdCQUFnQixFQUFFO1lBQ2hCLFlBQVksRUFBRSxhQUFhO1NBQzVCLEVBQ0QsZUFBZSxFQUFFO1lBQ2YsWUFBWSxFQUFFLGFBQWE7U0FDNUIsRUFFRCxRQUFRLEVBQUU7WUFDUixVQUFVLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQjtZQUN6RCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFdBQVc7U0FDMUMsRUFDRCxTQUFTLEVBQUU7WUFDVCxVQUFVLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQjtZQUN6RCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFdBQVc7U0FDMUMsSUFFRSxDQUFDLE1BQU0sSUFBSTtRQUNaLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLFVBQVUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsZUFBZTtRQUNsRCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGFBQWE7UUFDM0MsUUFBUSxFQUFFO1lBQ1IsVUFBVSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1NBQ25EO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsVUFBVSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1NBQ25EO0tBQ0YsQ0FBQyxHQUVDLENBQUMsUUFBUSxJQUFJO1FBQ2QsTUFBTSxFQUFFLFNBQVM7UUFDakIsYUFBYSxFQUFFLE1BQU07UUFDckIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO0tBQzlDLENBQUMsRUFDRjtBQTFERixDQTBERSxDQUNMLENBQUM7QUFFRixNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQXVCO0lBQ2pELE9BQU8sQ0FDSCxLQUFDLE9BQU8sYUFBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLFFBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLGdCQUMxRixLQUFDLFlBQVksYUFBQyxLQUFLLEVBQUMsU0FBUyxJQUFLLEtBQUssY0FDckMsTUFBQyxPQUFPLGFBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxpQkFDN0IsS0FBSyxDQUFDLFFBQVEsRUFDZCxLQUFLLENBQUMsT0FBTyxJQUFJLENBQ2hCLEtBQUMsT0FBTyxJQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUMsMEJBQTBCLEdBQUcsQ0FDbEUsS0FDTyxJQUNHLElBQ0wsQ0FDYixDQUFDO0FBQ0osQ0FBQztBQUVELGVBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBBY3RpdmFibGVQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCBCdXR0b24sIHsgQnV0dG9uUHJvcHMgfSBmcm9tICcuLi9idXR0b24vYnV0dG9uJztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL3N2Zy1pY29uL3N2Zy1pY29uJztcbmltcG9ydCBGbGV4Um93IGZyb20gJy4uL2ZsZXgtcm93L2ZsZXgtcm93JztcbmltcG9ydCB7bWF0Y2hTaXplfSBmcm9tIFwiLi4vLi4vdXRpbHMvbWF0Y2gtc2l6ZVwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4uL3Rvb2x0aXAvdG9vbHRpcFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFiTWVudUl0ZW1Qcm9wcyBleHRlbmRzIEJ1dHRvblByb3BzLCBBY3RpdmFibGVQcm9wcyB7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgdG9vbHRpcD86IHN0cmluZztcbiAgbGluZUhlaWdodD86ICd4cycgfCAnc20nO1xuICBzY2FsZT86ICd4cycgfCAnc20nO1xufVxuXG5jb25zdCBTdHlsZWRCdXR0b24gPSBzdHlsZWQoQnV0dG9uKTxUYWJNZW51SXRlbVByb3BzPihcbiAgKHsgdGhlbWUsIGFjdGl2ZSwgZGlzYWJsZWQsIGxpbmVIZWlnaHQgPSAnc20nLCBzY2FsZSA9ICdzbScgfSkgPT5cbiAgICB0aGVtZS53aXRoTWVkaWEoe1xuICAgICAgbWluV2lkdGg6IFsxMzEsIDE0MF0sXG4gICAgICBwYWRkaW5nOiAnNnB4JyxcbiAgICAgIG1heFdpZHRoOiAnZml0LWNvbnRlbnQnLFxuICAgICAgaGVpZ2h0OiAzMixcbiAgICAgIGZvbnRTaXplOiBtYXRjaFNpemUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgICBzbTogJzEuM3JlbScsXG4gICAgICAgICAgICAgIHhzOiAnMC44MTI1cmVtJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNjYWxlXG4gICAgICApLFxuICAgICAgICBsaW5lSGVpZ2h0OiBtYXRjaFNpemUoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc206ICcxLjVyZW0nLFxuICAgICAgICAgICAgICAgIHhzOiAnMS4yNXJlbScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZUhlaWdodFxuICAgICAgICApLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0Lm1lZGl1bSxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgbWFyZ2luTGVmdDogMixcbiAgICAgIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRCbHVlLFxuICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgdGV4dFRyYW5zZm9ybTogJ2NhcGl0YWxpemUnLFxuICAgICAgJzpmaXJzdC1vZi10eXBlJzoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHggMCAwIDRweCcsXG4gICAgICB9LFxuICAgICAgJzpsYXN0LW9mLXR5cGUnOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogJzAgNHB4IDRweCAwJyxcbiAgICAgIH0sXG5cbiAgICAgICc6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFNlY29uZGFyeUJsdWVIb3ZlcixcbiAgICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudEJsdWUsXG4gICAgICB9LFxuICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFNlY29uZGFyeUJsdWVDbGljayxcbiAgICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudEJsdWUsXG4gICAgICB9LFxuXG4gICAgICAuLi4oYWN0aXZlICYmIHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFByaW1hcnlCbHVlLFxuICAgICAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50T25GaWxsLFxuICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFByaW1hcnlCbHVlLFxuICAgICAgICB9LFxuICAgICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxQcmltYXJ5Qmx1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuXG4gICAgICAuLi4oZGlzYWJsZWQgJiYge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50VGVydGlhcnksXG4gICAgICB9KSxcbiAgICB9KVxuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIFRhYk1lbnVJdGVtKHByb3BzOiBUYWJNZW51SXRlbVByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgICA8VG9vbHRpcCB0aXRsZT17cHJvcHMudG9vbHRpcH0gbGltaXRXaWR0aCBsaW5lSGVpZ2h0PXtwcm9wcy5saW5lSGVpZ2h0fSBzY2FsZT17cHJvcHMuc2NhbGV9PlxuICAgICAgPFN0eWxlZEJ1dHRvbiBjb2xvcj1cInV0aWxpdHlcIiB7Li4ucHJvcHN9PlxuICAgICAgICA8RmxleFJvdyBnYXA9ezN9IGFsaWduPXsnY2VudGVyJ30+XG4gICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICAgIHtwcm9wcy50b29sdGlwICYmIChcbiAgICAgICAgICAgIDxTdmdJY29uIHdpZHRoPXsxN30gaGVpZ2h0PXsxNn0gc3JjPVwiYXNzZXRzL2ljb25zL2ljLWluZm8uc3ZnXCIgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L0ZsZXhSb3c+XG4gICAgICA8L1N0eWxlZEJ1dHRvbj5cbiAgICAgIDwvVG9vbHRpcD5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFiTWVudUl0ZW07XG4iXX0=