import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import FlexRow from '../flex-row/flex-row';
import BodyText from '../body-text/body-text';
import styled from 'styled-components';
import SvgIcon from '../svg-icon/svg-icon';
import copy from 'copy-to-clipboard';
import SuccessIcon from '../../assets/icons/ic-success.svg';
import CopyIcon from '../../assets/icons/ic-copy.svg';
var copyHashColorMapper = {
    blue: 'contentBlue',
    gray: 'contentTertiary',
};
var SuccessIconWrapper = styled(SvgIcon)(function (_a) {
    var theme = _a.theme;
    return ({
        color: theme.styleguideColors.contentGreen,
    });
});
var StyledSvgIcon = styled(SvgIcon)(function (_a) {
    var theme = _a.theme, _b = _a.variation, variation = _b === void 0 ? 'blue' : _b;
    return theme.withMedia({
        color: theme.styleguideColors[copyHashColorMapper[variation]],
        path: {
            fill: theme.styleguideColors[copyHashColorMapper[variation]],
        },
    });
});
export var CopyHash = function (_a) {
    var value = _a.value, _b = _a.label, label = _b === void 0 ? 'Copy Public Key' : _b, _c = _a.copiedLabel, copiedLabel = _c === void 0 ? 'Copied!' : _c, variation = _a.variation, styles = _a.styles, _d = _a.minified, minified = _d === void 0 ? false : _d;
    var _e = useState(false), isCopiedHash = _e[0], setIsCopiedHash = _e[1];
    return (_jsx(FlexRow, __assign({ style: styles, align: "center", onClick: function () {
            copy(value);
            setIsCopiedHash(true);
            setTimeout(function () { return setIsCopiedHash(false); }, 3000);
        } }, { children: isCopiedHash ? (_jsxs(FlexRow, __assign({ align: 'center' }, { children: [_jsx(SuccessIconWrapper, { src: SuccessIcon, marginRight: true }), !minified && (_jsx(BodyText, __assign({ size: 3, variation: "green" }, { children: copiedLabel })))] }))) : (_jsxs(FlexRow, __assign({ align: 'center' }, { children: [_jsx(StyledSvgIcon, { src: CopyIcon, marginRight: true, variation: variation }), !minified && (_jsx(BodyText, __assign({ size: 3, variation: 'black' }, { children: label })))] }))) })));
};
export default CopyHash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS1oYXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL2NvcHktaGFzaC9jb3B5LWhhc2gudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN4QyxPQUFPLE9BQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUMzQyxPQUFPLFFBQVEsTUFBTSx3QkFBd0IsQ0FBQztBQUM5QyxPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQztBQUN2QyxPQUFPLE9BQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUMzQyxPQUFPLElBQUksTUFBTSxtQkFBbUIsQ0FBQztBQUVyQyxPQUFPLFdBQVcsTUFBTSxtQ0FBbUMsQ0FBQztBQUM1RCxPQUFPLFFBQVEsTUFBTSxnQ0FBZ0MsQ0FBQztBQUl0RCxJQUFNLG1CQUFtQixHQUFHO0lBQzFCLElBQUksRUFBRSxhQUFhO0lBQ25CLElBQUksRUFBRSxpQkFBaUI7Q0FDeEIsQ0FBQztBQUVGLElBQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQUMsRUFBUztRQUFQLEtBQUssV0FBQTtJQUFPLE9BQUEsQ0FBQztRQUN6RCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFlBQVk7S0FDM0MsQ0FBQztBQUZ3RCxDQUV4RCxDQUFDLENBQUM7QUFFSixJQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ25DLFVBQUMsRUFBNkI7UUFBM0IsS0FBSyxXQUFBLEVBQUUsaUJBQWtCLEVBQWxCLFNBQVMsbUJBQUcsTUFBTSxLQUFBO0lBQzFCLE9BQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNkLEtBQUssRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0QsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM3RDtLQUNGLENBQUM7QUFMRixDQUtFLENBQ0wsQ0FBQztBQVdGLE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxVQUFDLEVBT1Q7UUFOZCxLQUFLLFdBQUEsRUFDTCxhQUF5QixFQUF6QixLQUFLLG1CQUFHLGlCQUFpQixLQUFBLEVBQ3pCLG1CQUF1QixFQUF2QixXQUFXLG1CQUFHLFNBQVMsS0FBQSxFQUN2QixTQUFTLGVBQUEsRUFDVCxNQUFNLFlBQUEsRUFDTixnQkFBZ0IsRUFBaEIsUUFBUSxtQkFBRyxLQUFLLEtBQUE7SUFFVixJQUFBLEtBQWtDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBaEQsWUFBWSxRQUFBLEVBQUUsZUFBZSxRQUFtQixDQUFDO0lBQ3hELE9BQU8sQ0FDTCxLQUFDLE9BQU8sYUFDTixLQUFLLEVBQUUsTUFBTSxFQUNiLEtBQUssRUFBQyxRQUFRLEVBQ2QsT0FBTyxFQUFFO1lBQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ1osZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RCLFVBQVUsQ0FBQyxjQUFNLE9BQUEsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUF0QixDQUFzQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pELENBQUMsZ0JBRUEsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUNkLE1BQUMsT0FBTyxhQUFDLEtBQUssRUFBRSxRQUFRLGlCQUN0QixLQUFDLGtCQUFrQixJQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsV0FBVyxTQUFHLEVBQ25ELENBQUMsUUFBUSxJQUFJLENBQ1osS0FBQyxRQUFRLGFBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUMsT0FBTyxnQkFDakMsV0FBVyxJQUNILENBQ1osS0FDTyxDQUNYLENBQUMsQ0FBQyxDQUFDLENBQ0YsTUFBQyxPQUFPLGFBQUMsS0FBSyxFQUFFLFFBQVEsaUJBQ3RCLEtBQUMsYUFBYSxJQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsV0FBVyxRQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUksRUFDakUsQ0FBQyxRQUFRLElBQUksQ0FDWixLQUFDLFFBQVEsYUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLGdCQUNsQyxLQUFLLElBQ0csQ0FDWixLQUNPLENBQ1gsSUFDTyxDQUNYLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixlQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGbGV4Um93IGZyb20gJy4uL2ZsZXgtcm93L2ZsZXgtcm93JztcbmltcG9ydCBCb2R5VGV4dCBmcm9tICcuLi9ib2R5LXRleHQvYm9keS10ZXh0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnLi4vc3ZnLWljb24vc3ZnLWljb24nO1xuaW1wb3J0IGNvcHkgZnJvbSAnY29weS10by1jbGlwYm9hcmQnO1xuXG5pbXBvcnQgU3VjY2Vzc0ljb24gZnJvbSAnLi4vLi4vYXNzZXRzL2ljb25zL2ljLXN1Y2Nlc3Muc3ZnJztcbmltcG9ydCBDb3B5SWNvbiBmcm9tICcuLi8uLi9hc3NldHMvaWNvbnMvaWMtY29weS5zdmcnO1xuXG50eXBlIENvcHlIYXNoQ29sb3IgPSAnYmx1ZScgfCAnZ3JheSc7XG5cbmNvbnN0IGNvcHlIYXNoQ29sb3JNYXBwZXIgPSB7XG4gIGJsdWU6ICdjb250ZW50Qmx1ZScsXG4gIGdyYXk6ICdjb250ZW50VGVydGlhcnknLFxufTtcblxuY29uc3QgU3VjY2Vzc0ljb25XcmFwcGVyID0gc3R5bGVkKFN2Z0ljb24pKCh7IHRoZW1lIH0pID0+ICh7XG4gIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRHcmVlbixcbn0pKTtcblxuY29uc3QgU3R5bGVkU3ZnSWNvbiA9IHN0eWxlZChTdmdJY29uKTx7IHZhcmlhdGlvbj86IENvcHlIYXNoQ29sb3IgfT4oXG4gICh7IHRoZW1lLCB2YXJpYXRpb24gPSAnYmx1ZScgfSkgPT5cbiAgICB0aGVtZS53aXRoTWVkaWEoe1xuICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnNbY29weUhhc2hDb2xvck1hcHBlclt2YXJpYXRpb25dXSxcbiAgICAgIHBhdGg6IHtcbiAgICAgICAgZmlsbDogdGhlbWUuc3R5bGVndWlkZUNvbG9yc1tjb3B5SGFzaENvbG9yTWFwcGVyW3ZhcmlhdGlvbl1dLFxuICAgICAgfSxcbiAgICB9KVxuKTtcblxuZXhwb3J0IGludGVyZmFjZSBDb3B5SGFzaFByb3BzIHtcbiAgdmFsdWU6IHN0cmluZztcbiAgc3R5bGVzPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIGNvcGllZExhYmVsPzogc3RyaW5nO1xuICBtaW5pZmllZD86IGJvb2xlYW47XG4gIHZhcmlhdGlvbj86IENvcHlIYXNoQ29sb3I7XG59XG5cbmV4cG9ydCBjb25zdCBDb3B5SGFzaCA9ICh7XG4gIHZhbHVlLFxuICBsYWJlbCA9ICdDb3B5IFB1YmxpYyBLZXknLFxuICBjb3BpZWRMYWJlbCA9ICdDb3BpZWQhJyxcbiAgdmFyaWF0aW9uLFxuICBzdHlsZXMsXG4gIG1pbmlmaWVkID0gZmFsc2UsXG59OiBDb3B5SGFzaFByb3BzKSA9PiB7XG4gIGNvbnN0IFtpc0NvcGllZEhhc2gsIHNldElzQ29waWVkSGFzaF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIHJldHVybiAoXG4gICAgPEZsZXhSb3dcbiAgICAgIHN0eWxlPXtzdHlsZXN9XG4gICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGNvcHkodmFsdWUpO1xuICAgICAgICBzZXRJc0NvcGllZEhhc2godHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0SXNDb3BpZWRIYXNoKGZhbHNlKSwgMzAwMCk7XG4gICAgICB9fVxuICAgID5cbiAgICAgIHtpc0NvcGllZEhhc2ggPyAoXG4gICAgICAgIDxGbGV4Um93IGFsaWduPXsnY2VudGVyJ30+XG4gICAgICAgICAgPFN1Y2Nlc3NJY29uV3JhcHBlciBzcmM9e1N1Y2Nlc3NJY29ufSBtYXJnaW5SaWdodCAvPlxuICAgICAgICAgIHshbWluaWZpZWQgJiYgKFxuICAgICAgICAgICAgPEJvZHlUZXh0IHNpemU9ezN9IHZhcmlhdGlvbj1cImdyZWVuXCI+XG4gICAgICAgICAgICAgIHtjb3BpZWRMYWJlbH1cbiAgICAgICAgICAgIDwvQm9keVRleHQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9GbGV4Um93PlxuICAgICAgKSA6IChcbiAgICAgICAgPEZsZXhSb3cgYWxpZ249eydjZW50ZXInfT5cbiAgICAgICAgICA8U3R5bGVkU3ZnSWNvbiBzcmM9e0NvcHlJY29ufSBtYXJnaW5SaWdodCB2YXJpYXRpb249e3ZhcmlhdGlvbn0gLz5cbiAgICAgICAgICB7IW1pbmlmaWVkICYmIChcbiAgICAgICAgICAgIDxCb2R5VGV4dCBzaXplPXszfSB2YXJpYXRpb249eydibGFjayd9PlxuICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICA8L0JvZHlUZXh0PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvRmxleFJvdz5cbiAgICAgICl9XG4gICAgPC9GbGV4Um93PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29weUhhc2g7XG4iXX0=