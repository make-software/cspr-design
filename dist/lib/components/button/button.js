import { __assign, __rest } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import styled from 'styled-components';
import { matchSize } from '../../utils/match-size';
var BaseButton = styled.button(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, _b = _a.height, height = _b === void 0 ? '36' : _b, _c = _a.width, width = _c === void 0 ? '100%' : _c;
    return (__assign({ display: 'flex', alignItems: 'center', justifyContent: 'center', border: 'none', borderRadius: theme.borderRadius.base, fontFamily: theme.typography.fontFamily.primary, fontWeight: matchSize({
            '24': theme.typography.fontWeight.medium,
            '36': theme.typography.fontWeight.medium,
            '40': theme.typography.fontWeight.semiBold,
        }, height), fontSize: matchSize({ '24': '0.688rem', '36': '0.875rem', '40': '0.875rem' }, height), minHeight: matchSize({ '24': 24, '36': 36, '40': 40 }, height), lineHeight: matchSize({ '24': '1.5rem', '36': '1.5rem', '40': '1.5rem' }, height), padding: matchSize({ '24': '2px 10px', '36': '8px 25px', '40': '10px 30px' }, height), width: matchSize({ '100': '100px', '120': '120px', '176': '176px', '100%': '100%' }, width), ':focus': {
            outline: 'none',
        } }, (disabled && {
        pointerEvents: 'none',
    })));
});
var PrimaryBlueButton = styled(BaseButton)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return (__assign({ color: theme.styleguideColors.contentOnFill, background: theme.styleguideColors.contentBlue, ': hover': {
            background: theme.styleguideColors.fillPrimaryBlueHover,
        }, ': active': {
            background: theme.styleguideColors.fillPrimaryBlueClick,
        } }, (disabled && {
        color: theme.styleguideColors.contentTertiary,
        background: theme.styleguideColors.backgroundSecondary,
    })));
});
var PrimaryRedButton = styled(BaseButton)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return (__assign({ color: theme.styleguideColors.contentOnFill, background: theme.styleguideColors.fillPrimaryRed, ': hover': {
            background: theme.styleguideColors.fillPrimaryRedHover,
        }, ': active': {
            background: theme.styleguideColors.fillPrimaryRedClick,
        } }, (disabled && {
        color: theme.styleguideColors.contentTertiary,
        background: theme.styleguideColors.fillSecondary,
    })));
});
var SecondaryBlueButton = styled(BaseButton)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return (__assign({ color: theme.styleguideColors.contentBlue, background: theme.styleguideColors.backgroundSecondary, ': hover': {
            background: theme.styleguideColors.fillSecondaryBlueHover,
            borderColor: 'transparent',
        }, ': active': {
            background: theme.styleguideColors.fillSecondaryBlueClick,
            borderColor: 'transparent',
        } }, (disabled && {
        color: theme.styleguideColors.contentTertiary,
        background: theme.styleguideColors.backgroundPrimary,
    })));
});
var SecondaryRedButton = styled(BaseButton)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return (__assign({ color: theme.styleguideColors.contentRed, background: theme.styleguideColors.fillSecondary, ': hover': {
            background: theme.styleguideColors.fillSecondaryRedHover,
        }, ': active': {
            background: theme.styleguideColors.fillSecondaryRedClick,
        } }, (disabled && {
        color: theme.styleguideColors.contentTertiary,
        background: theme.styleguideColors.fillSecondary,
    })));
});
var UtilityButton = styled(BaseButton)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled;
    return (__assign({ color: theme.styleguideColors.fillPrimaryRed, background: theme.styleguideColors.backgroundSecondary, ': hover': {
            background: theme.styleguideColors.fillSecondaryRedHover,
        }, ': active': {
            background: theme.styleguideColors.fillSecondaryRedClick,
        } }, (disabled && {
        color: theme.styleguideColors.contentTertiary,
        background: theme.styleguideColors.backgroundPrimary,
    })));
});
var COMPONENT_MAP_BY_COLOR = {
    primaryBlue: PrimaryBlueButton,
    primaryRed: PrimaryRedButton,
    secondaryBlue: SecondaryBlueButton,
    secondaryRed: SecondaryRedButton,
    utility: UtilityButton,
};
export var Button = React.forwardRef(function Button(_a, ref) {
    var _b = _a.color, color = _b === void 0 ? 'primaryBlue' : _b, props = __rest(_a, ["color"]);
    var ButtonComponent = COMPONENT_MAP_BY_COLOR[color] || PrimaryBlueButton;
    return _jsx(ButtonComponent, __assign({ ref: ref, color: color }, props));
});
export default Button;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL2J1dHRvbi9idXR0b24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBR3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVuRCxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUM5QixVQUFDLEVBQWtEO1FBQWhELEtBQUssV0FBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLGNBQWEsRUFBYixNQUFNLG1CQUFHLElBQUksS0FBQSxFQUFFLGFBQWMsRUFBZCxLQUFLLG1CQUFHLE1BQU0sS0FBQTtJQUFPLE9BQUEsWUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFDZixVQUFVLEVBQUUsUUFBUSxFQUNwQixjQUFjLEVBQUUsUUFBUSxFQUN4QixNQUFNLEVBQUUsTUFBTSxFQUNkLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFDckMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFDL0MsVUFBVSxFQUFFLFNBQVMsQ0FDbkI7WUFDRSxJQUFJLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTTtZQUN4QyxJQUFJLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTTtZQUN4QyxJQUFJLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsUUFBUTtTQUMzQyxFQUNELE1BQU0sQ0FDUCxFQUNELFFBQVEsRUFBRSxTQUFTLENBQ2pCLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFDeEQsTUFBTSxDQUNQLEVBQ0QsU0FBUyxF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Q0QsVUFBVSxFQUFFO1lBQ1YsVUFBVSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUI7U0FDekQsSUFFRSxDQUFDLFFBQVEsSUFBSTtRQUNkLEtBQUssRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsZUFBZTtRQUM3QyxVQUFVLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQjtLQUNyRCxDQUFDLEVBQ0Y7QUFmdUIsQ0FldkIsQ0FDSCxDQUFDO0FBRUYsSUFBTSxzQkFBc0IsR0FBRztJQUM3QixXQUFXLEVBQUUsaUJBQWlCO0lBQzlCLFVBQVUsRUFBRSxnQkFBZ0I7SUFDNUIsYUFBYSxFQUFFLG1CQUFtQjtJQUNsQyxZQUFZLEVBQUUsa0JBQWtCO0lBQ2hDLE9BQU8sRUFBRSxhQUFhO0NBQ3ZCLENBQUM7QUFvQkYsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQW1CLFNBQVMsTUFBTSxDQUN0RSxFQUFnRCxFQUNoRCxHQUFHO0lBREQsSUFBQSxhQUFxQixFQUFyQixLQUFLLG1CQUFHLGFBQWEsS0FBQSxFQUFLLEtBQUssY0FBakMsU0FBbUMsQ0FBRjtJQUdqQyxJQUFNLGVBQWUsR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxpQkFBaUIsQ0FBQztJQUMzRSxPQUFPLEtBQUMsZUFBZSxhQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssSUFBTSxLQUFLLEVBQUksQ0FBQztBQUNoRSxDQUFDLENBQUMsQ0FBQztBQUVILGVBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XHJcblxyXG5pbXBvcnQgeyBCYXNlUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XHJcbmltcG9ydCB7IG1hdGNoU2l6ZSB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGNoLXNpemUnO1xyXG5cclxuY29uc3QgQmFzZUJ1dHRvbiA9IHN0eWxlZC5idXR0b248QnV0dG9uUHJvcHM+KFxyXG4gICh7IHRoZW1lLCBkaXNhYmxlZCwgaGVpZ2h0ID0gJzM2Jywgd2lkdGggPSAnMTAwJScgfSkgPT4gKHtcclxuICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgYm9yZGVyOiAnbm9uZScsXHJcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5iYXNlLFxyXG4gICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LnByaW1hcnksXHJcbiAgICBmb250V2VpZ2h0OiBtYXRjaFNpemUoXHJcbiAgICAgIHtcclxuICAgICAgICAnMjQnOiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHQubWVkaXVtLFxyXG4gICAgICAgICczNic6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodC5tZWRpdW0sXHJcbiAgICAgICAgJzQwJzogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0LnNlbWlCb2xkLFxyXG4gICAgICB9LFxyXG4gICAgICBoZWlnaHRcclxuICAgICksXHJcbiAgICBmb250U2l6ZTogbWF0Y2hTaXplKFxyXG4gICAgICB7ICcyNCc6ICcwLjY4OHJlbScsICczNic6ICcwLjg3NXJlbScsICc0MCc6ICcwLjg3NXJlbScgfSxcclxuICAgICAgaGVpZ2h0XHJcbiAgICApLFxyXG4gICAgbWluSGVpZ2h0OiBtYXRjaFNpemUoeyAnMjQnOiAyNCwgJzM2JzogMzYsICc0MCc6IDQwIH0sIGhlaWdodCksXHJcbiAgICBsaW5lSGVpZ2h0OiBtYXRjaFNpemUoXHJcbiAgICAgIHsgJzI0JzogJzEuNXJlbScsICczNic6ICcxLjVyZW0nLCAnNDAnOiAnMS41cmVtJyB9LFxyXG4gICAgICBoZWlnaHRcclxuICAgICksXHJcbiAgICBwYWRkaW5nOiBtYXRjaFNpemUoXHJcbiAgICAgIHsgJzI0JzogJzJweCAxMHB4JywgJzM2JzogJzhweCAyNXB4JywgJzQwJzogJzEwcHggMzBweCcgfSxcclxuICAgICAgaGVpZ2h0XHJcbiAgICApLFxyXG4gICAgd2lkdGg6IG1hdGNoU2l6ZShcclxuICAgICAgeyAnMTAwJzogJzEwMHB4JywgJzEyMCc6ICcxMjBweCcsICcxNzYnOiAnMTc2cHgnLCAnMTAwJSc6ICcxMDAlJyB9LFxyXG4gICAgICB3aWR0aFxyXG4gICAgKSxcclxuXHJcbiAgICAnOmZvY3VzJzoge1xyXG4gICAgICBvdXRsaW5lOiAnbm9uZScsXHJcbiAgICB9LFxyXG5cclxuICAgIC4uLihkaXNhYmxlZCAmJiB7XHJcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcclxuICAgIH0pLFxyXG4gIH0pXHJcbik7XHJcblxyXG5jb25zdCBQcmltYXJ5Qmx1ZUJ1dHRvbiA9IHN0eWxlZChCYXNlQnV0dG9uKTxCdXR0b25Qcm9wcz4oXHJcbiAgKHsgdGhlbWUsIGRpc2FibGVkIH0pID0+ICh7XHJcbiAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50T25GaWxsLFxyXG4gICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50Qmx1ZSxcclxuXHJcbiAgICAnOiBob3Zlcic6IHtcclxuICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5maWxsUHJpbWFyeUJsdWVIb3ZlcixcclxuICAgIH0sXHJcbiAgICAnOiBhY3RpdmUnOiB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFByaW1hcnlCbHVlQ2xpY2ssXHJcbiAgICB9LFxyXG5cclxuICAgIC4uLihkaXNhYmxlZCAmJiB7XHJcbiAgICAgIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRUZXJ0aWFyeSxcclxuICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kU2Vjb25kYXJ5LFxyXG4gICAgfSksXHJcbiAgfSlcclxuKTtcclxuXHJcbmNvbnN0IFByaW1hcnlSZWRCdXR0b24gPSBzdHlsZWQoQmFzZUJ1dHRvbik8QnV0dG9uUHJvcHM+KFxyXG4gICh7IHRoZW1lLCBkaXNhYmxlZCB9KSA9PiAoe1xyXG4gICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudE9uRmlsbCxcclxuICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFByaW1hcnlSZWQsXHJcblxyXG4gICAgJzogaG92ZXInOiB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFByaW1hcnlSZWRIb3ZlcixcclxuICAgIH0sXHJcbiAgICAnOiBhY3RpdmUnOiB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFByaW1hcnlSZWRDbGljayxcclxuICAgIH0sXHJcblxyXG4gICAgLi4uKGRpc2FibGVkICYmIHtcclxuICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFRlcnRpYXJ5LFxyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxTZWNvbmRhcnksXHJcbiAgICB9KSxcclxuICB9KVxyXG4pO1xyXG5cclxuY29uc3QgU2Vjb25kYXJ5Qmx1ZUJ1dHRvbiA9IHN0eWxlZChCYXNlQnV0dG9uKTxCdXR0b25Qcm9wcz4oXHJcbiAgKHsgdGhlbWUsIGRpc2FibGVkIH0pID0+ICh7XHJcbiAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5jb250ZW50Qmx1ZSxcclxuICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuYmFja2dyb3VuZFNlY29uZGFyeSxcclxuXHJcbiAgICAnOiBob3Zlcic6IHtcclxuICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5maWxsU2Vjb25kYXJ5Qmx1ZUhvdmVyLFxyXG4gICAgICBib3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgIH0sXHJcbiAgICAnOiBhY3RpdmUnOiB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFNlY29uZGFyeUJsdWVDbGljayxcclxuICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXHJcbiAgICB9LFxyXG5cclxuICAgIC4uLihkaXNhYmxlZCAmJiB7XHJcbiAgICAgIGNvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmNvbnRlbnRUZXJ0aWFyeSxcclxuICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kUHJpbWFyeSxcclxuICAgIH0pLFxyXG4gIH0pXHJcbik7XHJcblxyXG5jb25zdCBTZWNvbmRhcnlSZWRCdXR0b24gPSBzdHlsZWQoQmFzZUJ1dHRvbik8QnV0dG9uUHJvcHM+KFxyXG4gICh7IHRoZW1lLCBkaXNhYmxlZCB9KSA9PiAoe1xyXG4gICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFJlZCxcclxuICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuZmlsbFNlY29uZGFyeSxcclxuXHJcbiAgICAnOiBob3Zlcic6IHtcclxuICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5maWxsU2Vjb25kYXJ5UmVkSG92ZXIsXHJcbiAgICB9LFxyXG4gICAgJzogYWN0aXZlJzoge1xyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxTZWNvbmRhcnlSZWRDbGljayxcclxuICAgIH0sXHJcblxyXG4gICAgLi4uKGRpc2FibGVkICYmIHtcclxuICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFRlcnRpYXJ5LFxyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxTZWNvbmRhcnksXHJcbiAgICB9KSxcclxuICB9KVxyXG4pO1xyXG5cclxuY29uc3QgVXRpbGl0eUJ1dHRvbiA9IHN0eWxlZChCYXNlQnV0dG9uKTxCdXR0b25Qcm9wcz4oXHJcbiAgKHsgdGhlbWUsIGRpc2FibGVkIH0pID0+ICh7XHJcbiAgICBjb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5maWxsUHJpbWFyeVJlZCxcclxuICAgIGJhY2tncm91bmQ6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuYmFja2dyb3VuZFNlY29uZGFyeSxcclxuXHJcbiAgICAnOiBob3Zlcic6IHtcclxuICAgICAgYmFja2dyb3VuZDogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5maWxsU2Vjb25kYXJ5UmVkSG92ZXIsXHJcbiAgICB9LFxyXG4gICAgJzogYWN0aXZlJzoge1xyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmZpbGxTZWNvbmRhcnlSZWRDbGljayxcclxuICAgIH0sXHJcblxyXG4gICAgLi4uKGRpc2FibGVkICYmIHtcclxuICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnMuY29udGVudFRlcnRpYXJ5LFxyXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzLmJhY2tncm91bmRQcmltYXJ5LFxyXG4gICAgfSksXHJcbiAgfSlcclxuKTtcclxuXHJcbmNvbnN0IENPTVBPTkVOVF9NQVBfQllfQ09MT1IgPSB7XHJcbiAgcHJpbWFyeUJsdWU6IFByaW1hcnlCbHVlQnV0dG9uLFxyXG4gIHByaW1hcnlSZWQ6IFByaW1hcnlSZWRCdXR0b24sXHJcbiAgc2Vjb25kYXJ5Qmx1ZTogU2Vjb25kYXJ5Qmx1ZUJ1dHRvbixcclxuICBzZWNvbmRhcnlSZWQ6IFNlY29uZGFyeVJlZEJ1dHRvbixcclxuICB1dGlsaXR5OiBVdGlsaXR5QnV0dG9uLFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQnV0dG9uU2l6ZSA9ICdzbWFsbCcgfCAnbm9ybWFsJyB8ICdiaWcnO1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQnV0dG9uUHJvcHMgZXh0ZW5kcyBCYXNlUHJvcHMge1xyXG4gIG9uQ2xpY2s/OiAoZXYpID0+IHZvaWQ7XHJcbiAgY29sb3I/OlxyXG4gICAgfCAncHJpbWFyeUJsdWUnXHJcbiAgICB8ICdwcmltYXJ5UmVkJ1xyXG4gICAgfCAnc2Vjb25kYXJ5Qmx1ZSdcclxuICAgIHwgJ3NlY29uZGFyeVJlZCdcclxuICAgIHwgJ3V0aWxpdHknO1xyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICBoZWlnaHQ/OiAnMjQnIHwgJzM2JyB8ICc0MCc7XHJcbiAgd2lkdGg/OiAnMTAwJyB8ICcxMjAnIHwgJzE3NicgfCAnMTAwJSc7XHJcbn1cclxuXHJcbnR5cGUgUmVmID0gSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG5leHBvcnQgY29uc3QgQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZjxSZWYsIEJ1dHRvblByb3BzPihmdW5jdGlvbiBCdXR0b24oXHJcbiAgeyBjb2xvciA9ICdwcmltYXJ5Qmx1ZScsIC4uLnByb3BzIH06IEJ1dHRvblByb3BzLFxyXG4gIHJlZlxyXG4pIHtcclxuICBjb25zdCBCdXR0b25Db21wb25lbnQgPSBDT01QT05FTlRfTUFQX0JZX0NPTE9SW2NvbG9yXSB8fCBQcmltYXJ5Qmx1ZUJ1dHRvbjtcclxuICByZXR1cm4gPEJ1dHRvbkNvbXBvbmVudCByZWY9e3JlZn0gY29sb3I9e2NvbG9yfSB7Li4ucHJvcHN9IC8+O1xyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcclxuIl19