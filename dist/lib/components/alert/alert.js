var _a, _b, _c;
import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from 'styled-components';
import BodyText from '../body-text/body-text';
import FlexRow from '../flex-row/flex-row';
import FlexColumn from "../flex-column/flex-column";
import SvgIcon from '../svg-icon/svg-icon';
export var AlertStatus;
(function (AlertStatus) {
    AlertStatus["Success"] = "success";
    AlertStatus["Error"] = "error";
    AlertStatus["Info"] = "info";
    AlertStatus["Pending"] = "pending";
    AlertStatus["Warning"] = "warning";
})(AlertStatus || (AlertStatus = {}));
var Icons = (_a = {},
    _a[AlertStatus.Success] = 'assets/icons/ic-success.svg',
    _a[AlertStatus.Info] = 'assets/icons/ic-info-important.svg',
    _a[AlertStatus.Pending] = 'assets/icons/ic-clock.svg',
    _a[AlertStatus.Error] = 'assets/icons/ic-error.svg',
    _a[AlertStatus.Warning] = 'assets/icons/ic-warning.svg',
    _a);
var StatusBackgroundColors = (_b = {},
    _b[AlertStatus.Success] = 'contentGreenLight',
    _b[AlertStatus.Info] = 'borderPrimary',
    _b[AlertStatus.Warning] = 'borderPrimary',
    _b[AlertStatus.Error] = 'fillSecondaryRedHover',
    _b[AlertStatus.Pending] = 'fillSecondary',
    _b);
var StatusSvgColors = (_c = {},
    _c[AlertStatus.Success] = 'contentGreen',
    _c[AlertStatus.Info] = 'contentSecondary',
    _c[AlertStatus.Warning] = 'contentSecondary',
    _c[AlertStatus.Error] = 'contentRed',
    _c[AlertStatus.Pending] = 'contentLightBlue',
    _c);
var Container = styled(FlexRow)(function (_a) {
    var theme = _a.theme, status = _a.status;
    return ({
        minHeight: 52,
        padding: 16,
        borderRadius: theme.borderRadius.base,
        backgroundColor: theme.styleguideColors[StatusBackgroundColors[status]],
        svg: {
            color: theme.styleguideColors[StatusSvgColors[status]],
        },
    });
});
export var Alert = function (props) {
    var message = props.message, title = props.title, status = props.status, _a = props.scale, scale = _a === void 0 ? 'sm' : _a, _b = props.lineHeight, lineHeight = _b === void 0 ? 'sm' : _b;
    var iconPath = Icons[status];
    if (title) {
        return (_jsx(Container, __assign({ status: status, itemsSpacing: 8 }, { children: _jsxs(FlexColumn, __assign({ itemsSpacing: 8 }, { children: [_jsxs(FlexRow, __assign({ align: 'center', itemsSpacing: 8 }, { children: [_jsx(SvgIcon, { src: iconPath }), _jsx(BodyText, __assign({ size: 1, lineHeight: lineHeight, scale: scale, variation: 'black' }, { children: title }))] })), _jsx(BodyText, __assign({ size: 3, lineHeight: lineHeight, scale: scale }, { children: message }))] })) })));
    }
    return (_jsxs(Container, __assign({ status: status, align: "center", itemsSpacing: 8 }, { children: [_jsx(SvgIcon, { src: iconPath }), _jsx(BodyText, __assign({ size: 3, lineHeight: lineHeight, scale: scale }, { children: message }))] })));
};
export default Alert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvYWxlcnQvYWxlcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFDO0FBRXZDLE9BQU8sUUFBUSxNQUFNLHdCQUF3QixDQUFDO0FBQzlDLE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBQzNDLE9BQU8sVUFBVSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBRTNDLE1BQU0sQ0FBTixJQUFZLFdBTVg7QUFORCxXQUFZLFdBQVc7SUFDbkIsa0NBQW1CLENBQUE7SUFDbkIsOEJBQWUsQ0FBQTtJQUNmLDRCQUFhLENBQUE7SUFDYixrQ0FBbUIsQ0FBQTtJQUNuQixrQ0FBbUIsQ0FBQTtBQUN2QixDQUFDLEVBTlcsV0FBVyxLQUFYLFdBQVcsUUFNdEI7QUFFRCxJQUFNLEtBQUs7SUFDUCxHQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUcsNkJBQTZCO0lBQ3BELEdBQUMsV0FBVyxDQUFDLElBQUksSUFBRyxvQ0FBb0M7SUFDeEQsR0FBQyxXQUFXLENBQUMsT0FBTyxJQUFHLDJCQUEyQjtJQUNsRCxHQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUcsMkJBQTJCO0lBQ2hELEdBQUMsV0FBVyxDQUFDLE9BQU8sSUFBRyw2QkFBNkI7T0FDdkQsQ0FBQztBQUVGLElBQU0sc0JBQXNCO0lBQ3hCLEdBQUMsV0FBVyxDQUFDLE9BQU8sSUFBRyxtQkFBbUI7SUFDMUMsR0FBQyxXQUFXLENBQUMsSUFBSSxJQUFHLGVBQWU7SUFDbkMsR0FBQyxXQUFXLENBQUMsT0FBTyxJQUFHLGVBQWU7SUFDdEMsR0FBQyxXQUFXLENBQUMsS0FBSyxJQUFHLHVCQUF1QjtJQUM1QyxHQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUcsZUFBZTtPQUN6QyxDQUFDO0FBRUYsSUFBTSxlQUFlO0lBQ2pCLEdBQUMsV0FBVyxDQUFDLE9BQU8sSUFBRyxjQUFjO0lBQ3JDLEdBQUMsV0FBVyxDQUFDLElBQUksSUFBRyxrQkFBa0I7SUFDdEMsR0FBQyxXQUFXLENBQUMsT0FBTyxJQUFHLGtCQUFrQjtJQUN6QyxHQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUcsWUFBWTtJQUNqQyxHQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUcsa0JBQWtCO09BQzVDLENBQUM7QUFHRixJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQzdCLFVBQUMsRUFBaUI7UUFBZixLQUFLLFdBQUEsRUFBRSxNQUFNLFlBQUE7SUFBTyxPQUFBLENBQUM7UUFDcEIsU0FBUyxFQUFFLEVBQUU7UUFDYixPQUFPLEVBQUUsRUFBRTtRQUNYLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDckMsZUFBZSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RSxHQUFHLEVBQUU7WUFDRCxLQUFLLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6RDtLQUNKLENBQUM7QUFScUIsQ0FRckIsQ0FDTCxDQUFDO0FBV0YsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFHLFVBQUMsS0FBeUI7SUFDckMsSUFBQSxPQUFPLEdBQXFELEtBQUssUUFBMUQsRUFBRSxLQUFLLEdBQThDLEtBQUssTUFBbkQsRUFBRSxNQUFNLEdBQXNDLEtBQUssT0FBM0MsRUFBRSxLQUFvQyxLQUFLLE1BQTdCLEVBQVosS0FBSyxtQkFBRyxJQUFJLEtBQUEsRUFBRSxLQUFzQixLQUFLLFdBQVYsRUFBakIsVUFBVSxtQkFBRyxJQUFJLEtBQUEsQ0FBVztJQUUxRSxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFN0IsSUFBSSxLQUFLLEVBQUU7UUFDUCxPQUFPLENBQ0gsS0FBQyxTQUFTLGFBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxnQkFDdEMsTUFBQyxVQUFVLGFBQUMsWUFBWSxFQUFFLENBQUMsaUJBQ3ZCLE1BQUMsT0FBTyxhQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLENBQUMsaUJBQ3JDLEtBQUMsT0FBTyxJQUFDLEdBQUcsRUFBRSxRQUFRLEdBQUksRUFDMUIsS0FBQyxRQUFRLGFBQ0wsSUFBSSxFQUFFLENBQUMsRUFDUCxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQ3BDLFNBQVMsRUFBRSxPQUFPLGdCQUVqQixLQUFLLElBQ0MsS0FDTCxFQUVWLEtBQUMsUUFBUSxhQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxnQkFDbEQsT0FBTyxJQUNELEtBQ0YsSUFDTCxDQUNmLENBQUM7S0FDTDtJQUVILE9BQU8sQ0FDTCxNQUFDLFNBQVMsYUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxRQUFRLEVBQUMsWUFBWSxFQUFFLENBQUMsaUJBQ3ZELEtBQUMsT0FBTyxJQUFDLEdBQUcsRUFBRSxRQUFRLEdBQUksRUFDMUIsS0FBQyxRQUFRLGFBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxLQUFLLGdCQUFHLE9BQU8sSUFBWSxLQUNuRSxDQUNiLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixlQUFlLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IEJvZHlUZXh0IGZyb20gJy4uL2JvZHktdGV4dC9ib2R5LXRleHQnO1xuaW1wb3J0IEZsZXhSb3cgZnJvbSAnLi4vZmxleC1yb3cvZmxleC1yb3cnO1xuaW1wb3J0IEZsZXhDb2x1bW4gZnJvbSBcIi4uL2ZsZXgtY29sdW1uL2ZsZXgtY29sdW1uXCI7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9zdmctaWNvbi9zdmctaWNvbic7XG5cbmV4cG9ydCBlbnVtIEFsZXJ0U3RhdHVzIHtcbiAgICBTdWNjZXNzID0gJ3N1Y2Nlc3MnLFxuICAgIEVycm9yID0gJ2Vycm9yJyxcbiAgICBJbmZvID0gJ2luZm8nLFxuICAgIFBlbmRpbmcgPSAncGVuZGluZycsXG4gICAgV2FybmluZyA9ICd3YXJuaW5nJyxcbn1cblxuY29uc3QgSWNvbnMgPSB7XG4gICAgW0FsZXJ0U3RhdHVzLlN1Y2Nlc3NdOiAnYXNzZXRzL2ljb25zL2ljLXN1Y2Nlc3Muc3ZnJyxcbiAgICBbQWxlcnRTdGF0dXMuSW5mb106ICdhc3NldHMvaWNvbnMvaWMtaW5mby1pbXBvcnRhbnQuc3ZnJyxcbiAgICBbQWxlcnRTdGF0dXMuUGVuZGluZ106ICdhc3NldHMvaWNvbnMvaWMtY2xvY2suc3ZnJyxcbiAgICBbQWxlcnRTdGF0dXMuRXJyb3JdOiAnYXNzZXRzL2ljb25zL2ljLWVycm9yLnN2ZycsXG4gICAgW0FsZXJ0U3RhdHVzLldhcm5pbmddOiAnYXNzZXRzL2ljb25zL2ljLXdhcm5pbmcuc3ZnJyxcbn07XG5cbmNvbnN0IFN0YXR1c0JhY2tncm91bmRDb2xvcnMgPSB7XG4gICAgW0FsZXJ0U3RhdHVzLlN1Y2Nlc3NdOiAnY29udGVudEdyZWVuTGlnaHQnLFxuICAgIFtBbGVydFN0YXR1cy5JbmZvXTogJ2JvcmRlclByaW1hcnknLFxuICAgIFtBbGVydFN0YXR1cy5XYXJuaW5nXTogJ2JvcmRlclByaW1hcnknLFxuICAgIFtBbGVydFN0YXR1cy5FcnJvcl06ICdmaWxsU2Vjb25kYXJ5UmVkSG92ZXInLFxuICAgIFtBbGVydFN0YXR1cy5QZW5kaW5nXTogJ2ZpbGxTZWNvbmRhcnknLFxufTtcblxuY29uc3QgU3RhdHVzU3ZnQ29sb3JzID0ge1xuICAgIFtBbGVydFN0YXR1cy5TdWNjZXNzXTogJ2NvbnRlbnRHcmVlbicsXG4gICAgW0FsZXJ0U3RhdHVzLkluZm9dOiAnY29udGVudFNlY29uZGFyeScsXG4gICAgW0FsZXJ0U3RhdHVzLldhcm5pbmddOiAnY29udGVudFNlY29uZGFyeScsXG4gICAgW0FsZXJ0U3RhdHVzLkVycm9yXTogJ2NvbnRlbnRSZWQnLFxuICAgIFtBbGVydFN0YXR1cy5QZW5kaW5nXTogJ2NvbnRlbnRMaWdodEJsdWUnLFxufTtcblxuXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQoRmxleFJvdyk8UGljazxTdGF0dXNNZXNzYWdlUHJvcHMsICdzdGF0dXMnPj4oXG4gICAgKHsgdGhlbWUsIHN0YXR1cyB9KSA9PiAoe1xuICAgICAgICBtaW5IZWlnaHQ6IDUyLFxuICAgICAgICBwYWRkaW5nOiAxNixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuYmFzZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5zdHlsZWd1aWRlQ29sb3JzW1N0YXR1c0JhY2tncm91bmRDb2xvcnNbc3RhdHVzXV0sXG4gICAgICAgIHN2Zzoge1xuICAgICAgICAgICAgY29sb3I6IHRoZW1lLnN0eWxlZ3VpZGVDb2xvcnNbU3RhdHVzU3ZnQ29sb3JzW3N0YXR1c11dLFxuICAgICAgICB9LFxuICAgIH0pXG4pO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdHVzTWVzc2FnZVByb3BzIHtcbiAgdGl0bGU/OiBSZWFjdC5SZWFjdE5vZGUgfCBzdHJpbmc7XG4gIG1lc3NhZ2U6IFJlYWN0LlJlYWN0Tm9kZSB8IHN0cmluZztcbiAgc3RhdHVzOiBBbGVydFN0YXR1cztcbiAgc2NhbGU/OiAneHMnIHwgJ3NtJyB8ICdtZCcgfCAnbGcnIHwgJ3hsJztcbiAgbGluZUhlaWdodD86ICd4cycgfCAnc20nO1xufVxuXG5leHBvcnQgY29uc3QgQWxlcnQgPSAocHJvcHM6IFN0YXR1c01lc3NhZ2VQcm9wcykgPT4ge1xuICBjb25zdCB7IG1lc3NhZ2UsIHRpdGxlLCBzdGF0dXMsIHNjYWxlID0gJ3NtJywgbGluZUhlaWdodCA9ICdzbScgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGljb25QYXRoID0gSWNvbnNbc3RhdHVzXTtcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENvbnRhaW5lciBzdGF0dXM9e3N0YXR1c30gaXRlbXNTcGFjaW5nPXs4fT5cbiAgICAgICAgICAgICAgICA8RmxleENvbHVtbiBpdGVtc1NwYWNpbmc9ezh9PlxuICAgICAgICAgICAgICAgICAgICA8RmxleFJvdyBhbGlnbj17J2NlbnRlcid9IGl0ZW1zU3BhY2luZz17OH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3ZnSWNvbiBzcmM9e2ljb25QYXRofSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvZHlUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0PXtsaW5lSGVpZ2h0fSBzY2FsZT17c2NhbGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWF0aW9uPXsnYmxhY2snfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm9keVRleHQ+XG4gICAgICAgICAgICAgICAgICAgIDwvRmxleFJvdz5cblxuICAgICAgICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30gbGluZUhlaWdodD17bGluZUhlaWdodH0gc2NhbGU9e3NjYWxlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHttZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICA8L0JvZHlUZXh0PlxuICAgICAgICAgICAgICAgIDwvRmxleENvbHVtbj5cbiAgICAgICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgICApO1xuICAgIH1cblxuICByZXR1cm4gKFxuICAgIDxDb250YWluZXIgc3RhdHVzPXtzdGF0dXN9IGFsaWduPVwiY2VudGVyXCIgaXRlbXNTcGFjaW5nPXs4fT5cbiAgICAgIDxTdmdJY29uIHNyYz17aWNvblBhdGh9IC8+XG4gICAgICA8Qm9keVRleHQgc2l6ZT17M30gbGluZUhlaWdodD17bGluZUhlaWdodH0gc2NhbGU9e3NjYWxlfT57bWVzc2FnZX08L0JvZHlUZXh0PlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQWxlcnQ7XG4iXX0=