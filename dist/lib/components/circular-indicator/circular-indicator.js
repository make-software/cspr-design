var _a;
import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { matchSize } from '../../utils/match-size';
import FlexRow from '../flex-row/flex-row';
import styled from 'styled-components';
import Text from '../text/text';
export var CircularIndicatorTextSize;
(function (CircularIndicatorTextSize) {
    CircularIndicatorTextSize[CircularIndicatorTextSize["small"] = 1] = "small";
    CircularIndicatorTextSize[CircularIndicatorTextSize["default"] = 2] = "default";
})(CircularIndicatorTextSize || (CircularIndicatorTextSize = {}));
export var CircularIndicatorTextVariation = (_a = {},
    _a[CircularIndicatorTextSize.small] = 'darkGray',
    _a[CircularIndicatorTextSize.default] = 'black',
    _a);
var StyledText = styled(Text)(function (_a) {
    var theme = _a.theme, _b = _a.size, size = _b === void 0 ? 3 : _b, textSize = _a.textSize;
    return ({
        fontWeight: matchSize({
            1: theme.typography.fontWeight.semiBold,
            2: theme.typography.fontWeight.medium,
            3: theme.typography.fontWeight.regular,
        }, size),
        fontSize: matchSize({
            1: '0.813rem',
            2: '0.875rem',
        }, textSize),
        lineHeight: '1.25rem',
    });
});
export var ProgressColorsRange = [
    { id: 1, limit: 0, color: 'E6332A' },
    { id: 2, limit: 0.25, color: 'ED8417' },
    { id: 3, limit: 0.5, color: 'F1BF0B' },
    { id: 4, limit: 0.75, color: 'BBDE31' },
    { id: 5, limit: 0.99, color: '86DE56' },
    { id: 6, limit: 1, color: '31DE91' },
];
var calculatePerfomanceGradientColor = function (progress) {
    var PROGRESS_MINIMUM = 95;
    var PROGRESS_MAXIMUM = 100;
    if (progress < PROGRESS_MINIMUM) {
        return "#".concat(ProgressColorsRange[0].color);
    }
    var ratio = (progress - PROGRESS_MINIMUM) / (PROGRESS_MAXIMUM - PROGRESS_MINIMUM);
    var firstGradientItem = ProgressColorsRange.find(function (range) { return ratio <= range.limit; });
    var firstGradientColor = firstGradientItem.color;
    if (firstGradientItem.id === ProgressColorsRange.length) {
        return "#".concat(firstGradientColor);
    }
    var secondGradientColor = ProgressColorsRange.find(function (range) { return range.id === firstGradientItem.id + 1; }).color;
    var hex = function (x) {
        return x.toString(16).padStart(2, '0');
    };
    var r = Math.ceil(parseInt(firstGradientColor.substring(0, 2), 16) * ratio +
        parseInt(secondGradientColor.substring(0, 2), 16) * (1 - ratio));
    var g = Math.ceil(parseInt(firstGradientColor.substring(2, 4), 16) * ratio +
        parseInt(secondGradientColor.substring(2, 4), 16) * (1 - ratio));
    var b = Math.ceil(parseInt(firstGradientColor.substring(4, 6), 16) * ratio +
        parseInt(secondGradientColor.substring(4, 6), 16) * (1 - ratio));
    var color = hex(r) + hex(g) + hex(b);
    return "#".concat(color);
};
/**
 * @example
 * <CircularIndicator size="medium" progress={0 - 100} />
 */
export function CircularIndicator(_a) {
    var size = _a.size, progress = _a.progress, textSize = _a.textSize;
    var _b = matchSize({
        medium: { stroke: 4, radius: 12 },
    }, size), stroke = _b.stroke, radius = _b.radius;
    // validation 0 - 100
    if (progress == null || progress < 0 || progress > 100) {
        progress = 0;
    }
    var strokeRadius = radius - stroke / 2;
    var strokeCircumference = strokeRadius * 2 * Math.PI;
    var strokeDashoffset = strokeCircumference - (progress / 100) * strokeCircumference;
    var roundedProgress = progress.toPrecision(3);
    var color = calculatePerfomanceGradientColor(progress);
    return (_jsxs(FlexRow, __assign({ align: "center" }, { children: [_jsx("svg", __assign({ height: radius * 2, width: radius * 2 }, { children: _jsx("circle", { stroke: color, fill: "transparent", strokeWidth: stroke, strokeDasharray: strokeCircumference + ' ' + strokeCircumference, style: {
                        strokeDashoffset: strokeDashoffset,
                        transition: 'stroke-dashoffset 0.35s',
                        transform: 'rotate(-90deg)',
                        transformOrigin: '50% 50%',
                    }, r: strokeRadius, cx: radius, cy: radius }) })), _jsxs(StyledText, __assign({ size: 3, style: { marginLeft: 8 }, textSize: textSize, variation: CircularIndicatorTextVariation[textSize] }, { children: [roundedProgress, "%"] }))] })));
}
export default CircularIndicator;
//# sourceMappingURL=data:application/json;base64,