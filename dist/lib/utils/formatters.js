import { __assign } from "tslib";
import { createIntl, createIntlCache } from '@formatjs/intl';
import { formatDistanceToNowStrict, formatISO } from 'date-fns';
import i18next from 'i18next';
import en from 'date-fns/locale/en-US';
import uk from 'date-fns/locale/uk';
import es from 'date-fns/locale/es';
import tr from 'date-fns/locale/tr';
import nl from 'date-fns/locale/nl';
import ru from 'date-fns/locale/ru';
import pl from 'date-fns/locale/pl';
import vi from 'date-fns/locale/vi';
import fr from 'date-fns/locale/fr';
import az from 'date-fns/locale/az';
import { isBrowserSupportRelativeDateFormat } from './detect-browser';
export var MINIMUM_SHOWING_BALANCE = 0.00001;
export var DEFAULT_AMOUNT_PRECISION = 4;
export var SMALL_PRECISION = 2;
export var DEFAULT_PRECISION = 5;
export var FULL_PRECISION = 9;
var Locale = {
    en: en,
    es: es,
    uk: uk,
    tr: tr,
    nl: nl,
    ru: ru,
    pl: pl,
    vi: vi,
    fr: fr,
    az: az,
};
var cache = createIntlCache();
var intl = createIntl({
    locale: 'en-US',
    messages: {
        'components.transaction_status': 'Success',
    },
}, cache);
export var formatMessage = function (descriptor, values) {
    return intl.formatMessage(descriptor, values);
};
export var formatNumber = function (value, _a) {
    var _b = _a === void 0 ? {} : _a, precision = _b.precision, notation = _b.notation, compactDisplay = _b.compactDisplay;
    return intl.formatNumber(value, {
        minimumFractionDigits: precision || 0,
        maximumFractionDigits: precision || 0,
        notation: notation,
        compactDisplay: compactDisplay,
    });
};
var BIG_NUMBERS_NOTATION_SYMBOL = [
    '',
    'k',
    'M',
    'B',
    'T',
    'e15',
    'e18',
    'e21',
    'e24',
    'e27',
    'e30',
    'e33',
    'e36',
    'e39',
    'e42',
    'e45',
    'e48',
    'e51',
    'e54',
    'e57',
    'e60',
    'e63',
    'e66',
    'e69',
    'e72',
    'e75',
    'e78',
    'e81',
    'e84',
    'e87',
    'e90',
    'e93',
    'e96',
    'e99',
    'e101',
    'e104', //Tretrigintillion
];
export var formatBigNumbers = function (value) {
    // determines symbol
    var tier = (Math.log10(Math.abs(value)) / 3) | 0;
    var tiersWithoutSuffixes = [0, 1, 2];
    if (tiersWithoutSuffixes.includes(tier)) {
        return formatNumber(value, {
            precision: DEFAULT_PRECISION,
        });
    }
    // get suffix and determine scale
    var suffix = BIG_NUMBERS_NOTATION_SYMBOL[tier];
    var scale = Math.pow(10, tier * 3);
    var scaledNumber = value / scale;
    return scaledNumber.toFixed(5) + suffix;
};
export var formatCurrency = function (value, code, _a) {
    var _b = _a === void 0 ? {} : _a, precision = _b.precision;
    return intl.formatNumber(value, {
        style: 'currency',
        currency: code,
        minimumFractionDigits: precision,
        maximumFractionDigits: precision,
    });
};
export var formatPercentage = function (value, _a) {
    var _b = _a === void 0 ? {} : _a, precision = _b.precision;
    return value.toFixed(precision || 2);
};
export var formatTimestamp = function (value) {
    var date = new Date(value);
    var locale = i18next.language || 'en';
    var nativeIntl = new Intl.DateTimeFormat(locale, {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric',
        timeZoneName: 'short',
    });
    return "".concat(nativeIntl.format(date));
};
var formatDistanceTokens = {
    lessThanXSeconds: 'second',
    xSeconds: 'second',
    lessThanXMinutes: 'minute',
    xMinutes: 'minute',
    xHours: 'hour',
    xDays: 'day',
    xMonths: 'month',
    xYears: 'year',
};
var formatDistance = function (token, count, options) {
    options = options || {};
    var locale = options.locale.code || 'en';
    return new Intl.RelativeTimeFormat(locale, {
        style: 'short',
    })
        .format(-count, formatDistanceTokens[token])
        .replace('.', '');
};
export var formatTimestampAge = function (value) {
    var date = new Date(value);
    var isSupportedLanguageAndBrowser = i18next.language !== 'az' && isBrowserSupportRelativeDateFormat;
    return "".concat(formatDistanceToNowStrict(date, {
        addSuffix: true,
        locale: __assign(__assign({}, Locale[i18next.language]), (isSupportedLanguageAndBrowser && {
            formatDistance: formatDistance,
        })),
        roundingMethod: 'floor',
    }));
};
export var formatDate = function (value) {
    var date = new Date(value);
    return "".concat(intl.formatDate(date, {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
    }), ", ").concat(intl.formatTime(date, {
        hour: 'numeric',
        minute: 'numeric',
    }));
};
export var formatDateWithWeekday = function (value) {
    var date = new Date(value);
    return "".concat(intl.formatDate(date, {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        weekday: 'long',
    }));
};
export var formatDateShort = function (value) {
    var date = new Date(value);
    return "".concat(intl.formatDate(date, {
        month: 'short',
        day: 'numeric',
    }));
};
export var formatDateWithMonthAndYear = function (value) {
    var date = new Date(value);
    return "".concat(intl.formatDate(date, {
        month: 'short',
        year: 'numeric',
    }));
};
export var HashLength;
(function (HashLength) {
    HashLength[HashLength["FULL"] = 0] = "FULL";
    HashLength[HashLength["TINY"] = 5] = "TINY";
    HashLength[HashLength["LITTLE"] = 10] = "LITTLE";
    HashLength[HashLength["SMALL"] = 15] = "SMALL";
    HashLength[HashLength["MEDIUM"] = 20] = "MEDIUM";
    HashLength[HashLength["LARGE"] = 25] = "LARGE";
})(HashLength || (HashLength = {}));
export var shortenString = function (valueToShort, visibleHashLength) {
    if (visibleHashLength === void 0) { visibleHashLength = HashLength.TINY; }
    var hashLength = valueToShort.length;
    var firstPart = valueToShort.substring(0, visibleHashLength);
    var secondPart = valueToShort.substring(hashLength - visibleHashLength);
    return "".concat(firstPart, "...").concat(secondPart);
};
export var formatHash = function (hash, visibleHashLength) {
    if (visibleHashLength === void 0) { visibleHashLength = HashLength.TINY; }
    var MIN_TRUNCATE_HASH_LENGTH = HashLength.TINY * 2 + 3;
    var _a = hash.split('-'), hashWithoutSuffix = _a[0], lastDigits = _a[1];
    var hashLength = hashWithoutSuffix.length;
    if (visibleHashLength === HashLength.FULL ||
        hashLength <= MIN_TRUNCATE_HASH_LENGTH) {
        return hash;
    }
    var truncatedHash = shortenString(hashWithoutSuffix, visibleHashLength);
    return lastDigits ? "".concat(truncatedHash, "-").concat(lastDigits) : "".concat(truncatedHash);
};
export var formatISODateOnly = function (date) {
    return formatISO(date, {
        representation: 'date',
    });
};
export var formatDeploysCount = function (value) {
    return "".concat(formatNumber(value, {
        notation: 'compact',
        compactDisplay: 'short',
    }));
};
export var formatRatesToCurrency = function (value) {
    return formatNumber(value, { precision: 4 });
};
//# sourceMappingURL=data:application/json;base64,