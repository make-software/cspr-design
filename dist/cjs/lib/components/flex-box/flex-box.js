"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlexBox = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = tslib_1.__importDefault(require("react"));
var styled_components_1 = tslib_1.__importDefault(require("styled-components"));
var StyledFlexBox = (0, styled_components_1.default)('div')(function (_a) {
    var _b;
    var itemsSpacing = _a.itemsSpacing, flexDirection = _a.direction, justifyContent = _a.justify, flexWrap = _a.wrap, alignItems = _a.align, flexGrow = _a.grow, flexShrink = _a.shrink, _c = _a.basis, flexBasis = _c === void 0 ? 'auto' : _c, gap = _a.gap, onClick = _a.onClick;
    return (tslib_1.__assign(tslib_1.__assign({ display: 'flex', gap: gap, flexDirection: flexDirection, flexWrap: flexWrap, justifyContent: justifyContent, alignItems: alignItems, flexGrow: flexGrow, flexShrink: flexShrink, flexBasis: flexBasis }, (itemsSpacing != null && {
        '> * + *': (_b = {},
            _b[flexDirection === 'row' ? 'marginLeft' : 'marginTop'] = itemsSpacing,
            _b),
    })), (onClick && {
        cursor: 'pointer',
    })));
});
exports.FlexBox = react_1.default.forwardRef(function (props, ref) { return (0, jsx_runtime_1.jsx)(StyledFlexBox, tslib_1.__assign({ ref: ref }, props)); });
exports.default = exports.FlexBox;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC1ib3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvZmxleC1ib3gvZmxleC1ib3gudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0RBQTBCO0FBQzFCLGdGQUF1QztBQW1CdkMsSUFBTSxhQUFhLEdBQUcsSUFBQSwyQkFBTSxFQUFDLEtBQUssQ0FBQyxDQUNqQyxVQUFDLEVBV0E7O1FBVkMsWUFBWSxrQkFBQSxFQUNELGFBQWEsZUFBQSxFQUNmLGNBQWMsYUFBQSxFQUNqQixRQUFRLFVBQUEsRUFDUCxVQUFVLFdBQUEsRUFDWCxRQUFRLFVBQUEsRUFDTixVQUFVLFlBQUEsRUFDbEIsYUFBeUIsRUFBbEIsU0FBUyxtQkFBRyxNQUFNLEtBQUEsRUFDekIsR0FBRyxTQUFBLEVBQ0gsT0FBTyxhQUFBO0lBQ0gsT0FBQSxxQ0FDSixPQUFPLEVBQUUsTUFBTSxFQUNmLEdBQUcsS0FBQSxFQUNILGFBQWEsZUFBQSxFQUNiLFFBQVEsVUFBQSxFQUNSLGNBQWMsZ0JBQUEsRUFDZCxVQUFVLFlBQUEsRUFDVixRQUFRLFVBQUEsRUFDUixVQUFVLFlBQUEsRUFDVixTQUFTLFdBQUEsSUFDTixDQUFDLFlBQVksSUFBSSxJQUFJLElBQUk7UUFDMUIsU0FBUztZQUNQLEdBQUMsYUFBYSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUcsWUFBWTtlQUNyRTtLQUNGLENBQUMsR0FDQyxDQUFDLE9BQU8sSUFBSTtRQUNiLE1BQU0sRUFBRSxTQUFTO0tBQ2xCLENBQUMsRUFDRjtBQWxCSSxDQWtCSixDQUNILENBQUM7QUFFVyxRQUFBLE9BQU8sR0FBRyxlQUFLLENBQUMsVUFBVSxDQUNyQyxVQUFDLEtBQUssRUFBRSxHQUFHLElBQUssT0FBQSx1QkFBQyxhQUFhLHFCQUFDLEdBQUcsRUFBRSxHQUFHLElBQU0sS0FBSyxFQUFJLEVBQXRDLENBQXNDLENBQ3ZELENBQUM7QUFFRixrQkFBZSxlQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IEJhc2VQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG5leHBvcnQgaW50ZXJmYWNlIEZsZXhCb3hQcm9wcyBleHRlbmRzIEJhc2VQcm9wcyB7XG4gIC8qIEBkZXNjcmlwdGlvbiB3aWxsIGFkZCBzcGFjaW5nIGJldHdlZW4gY2hpbGRyZW4sIHdvcmsgZGVwZW5kaW5nIG9uIHJvdy9jb2x1bW4gbGF5b3V0ICovXG4gIGl0ZW1zU3BhY2luZz86IG51bWJlcjtcbiAgaW5uZXJSZWY/OiBSZWFjdC5SZWY8SFRNTERpdkVsZW1lbnQ+O1xuICBnYXA/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzWydnYXAnXTtcbiAgZGlyZWN0aW9uPzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleERpcmVjdGlvbiddO1xuICB3cmFwPzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleFdyYXAnXTtcbiAganVzdGlmeT86IFJlYWN0LkNTU1Byb3BlcnRpZXNbJ2p1c3RpZnlDb250ZW50J107XG4gIGFsaWduPzogUmVhY3QuQ1NTUHJvcGVydGllc1snYWxpZ25JdGVtcyddO1xuICBncm93PzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleEdyb3cnXTtcbiAgc2hyaW5rPzogUmVhY3QuQ1NTUHJvcGVydGllc1snZmxleFNocmluayddO1xuICBiYXNpcz86IFJlYWN0LkNTU1Byb3BlcnRpZXNbJ2ZsZXhCYXNpcyddO1xufVxuXG5jb25zdCBTdHlsZWRGbGV4Qm94ID0gc3R5bGVkKCdkaXYnKTxGbGV4Qm94UHJvcHM+KFxuICAoe1xuICAgIGl0ZW1zU3BhY2luZyxcbiAgICBkaXJlY3Rpb246IGZsZXhEaXJlY3Rpb24sXG4gICAganVzdGlmeToganVzdGlmeUNvbnRlbnQsXG4gICAgd3JhcDogZmxleFdyYXAsXG4gICAgYWxpZ246IGFsaWduSXRlbXMsXG4gICAgZ3JvdzogZmxleEdyb3csXG4gICAgc2hyaW5rOiBmbGV4U2hyaW5rLFxuICAgIGJhc2lzOiBmbGV4QmFzaXMgPSAnYXV0bycsXG4gICAgZ2FwLFxuICAgIG9uQ2xpY2ssXG4gIH0pID0+ICh7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGdhcCxcbiAgICBmbGV4RGlyZWN0aW9uLFxuICAgIGZsZXhXcmFwLFxuICAgIGp1c3RpZnlDb250ZW50LFxuICAgIGFsaWduSXRlbXMsXG4gICAgZmxleEdyb3csXG4gICAgZmxleFNocmluayxcbiAgICBmbGV4QmFzaXMsXG4gICAgLi4uKGl0ZW1zU3BhY2luZyAhPSBudWxsICYmIHtcbiAgICAgICc+ICogKyAqJzoge1xuICAgICAgICBbZmxleERpcmVjdGlvbiA9PT0gJ3JvdycgPyAnbWFyZ2luTGVmdCcgOiAnbWFyZ2luVG9wJ106IGl0ZW1zU3BhY2luZyxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgLi4uKG9uQ2xpY2sgJiYge1xuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgfSksXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgRmxleEJveCA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIEZsZXhCb3hQcm9wcz4oXG4gIChwcm9wcywgcmVmKSA9PiA8U3R5bGVkRmxleEJveCByZWY9e3JlZn0gey4uLnByb3BzfSAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgRmxleEJveDtcbiJdfQ==