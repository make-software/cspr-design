"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountInfoRow = exports.ValuesRow = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = tslib_1.__importDefault(require("styled-components"));
var big_js_1 = tslib_1.__importDefault(require("big.js"));
var body_text_1 = require("../body-text/body-text");
var flex_column_1 = require("../flex-column/flex-column");
var flex_row_1 = require("../flex-row/flex-row");
var formatters_1 = require("../../utils/formatters");
var tooltip_1 = require("../tooltip/tooltip");
var match_media_1 = require("../../utils/match-media");
var copy_hash_1 = require("../copy-hash/copy-hash");
var cspr_1 = require("../cspr/cspr");
var currency_1 = require("../../utils/currency");
var formatters_2 = require("../../utils/formatters");
exports.ValuesRow = (0, styled_components_1.default)(flex_row_1.FlexRow)(function (_a) {
    var theme = _a.theme;
    return ({
        height: 36,
        borderRadius: theme.borderRadius.base,
        padding: '8px 16px',
        backgroundColor: theme.styleguideColors.backgroundPrimary,
        border: theme.border.base,
    });
});
var StyledFlexColumn = (0, styled_components_1.default)(flex_column_1.FlexColumn)(function (_a) {
    var disabled = _a.disabled;
    return (tslib_1.__assign({}, (disabled && {
        opacity: 0.5,
    })));
});
var BalanceText = (0, styled_components_1.default)(body_text_1.BodyText)(function (_a) { return ({
    textAlign: 'right',
}); });
var StyledIconContainer = styled_components_1.default.span(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  margin-left: 10px;\n"], ["\n  margin-left: 10px;\n"])));
function AccountInfoRow(props) {
    var publicKey = props.publicKey, label = props.label, _a = props.rightLabel, rightLabel = _a === void 0 ? 'Balance' : _a, accountEmpty = props.accountEmpty, accountBalance = props.accountBalance, loading = props.loading, error = props.error;
    var responsiveHashSize = (0, match_media_1.useMatchMedia)([formatters_2.HashLength.TINY, formatters_2.HashLength.SMALL, formatters_2.HashLength.SMALL, formatters_2.HashLength.SMALL], []);
    var emptyBalance = accountEmpty ||
        (!loading && accountBalance != null && (0, big_js_1.default)(accountBalance).lte('0'));
    return ((0, jsx_runtime_1.jsxs)(StyledFlexColumn, tslib_1.__assign({ disabled: props.disabled, gap: 4 }, { children: [(0, jsx_runtime_1.jsxs)(flex_row_1.FlexRow, tslib_1.__assign({ justify: "space-between" }, { children: [(0, jsx_runtime_1.jsx)(body_text_1.BodyText, tslib_1.__assign({ size: 1 }, { children: label })), (0, jsx_runtime_1.jsx)(body_text_1.BodyText, tslib_1.__assign({ size: 1 }, { children: rightLabel }))] })), (0, jsx_runtime_1.jsx)(exports.ValuesRow, tslib_1.__assign({ justify: "space-between", align: "center" }, { children: publicKey && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(flex_row_1.FlexRow, tslib_1.__assign({ align: "center" }, { children: [(0, jsx_runtime_1.jsx)(tooltip_1.Tooltip, tslib_1.__assign({ title: publicKey }, { children: (0, jsx_runtime_1.jsx)(body_text_1.BodyText, tslib_1.__assign({ size: 3, monotype: true }, { children: (0, formatters_1.formatHash)(publicKey, responsiveHashSize) })) })), (0, jsx_runtime_1.jsx)(StyledIconContainer, { children: (0, jsx_runtime_1.jsx)(copy_hash_1.CopyHash, { value: publicKey, minified: true, variation: "gray" }) })] })), (0, jsx_runtime_1.jsx)(BalanceText, tslib_1.__assign({ size: 3, monotype: true }, { children: emptyBalance ? ((0, jsx_runtime_1.jsx)(cspr_1.Cspr, { motes: '0', precisionCase: currency_1.PrecisionCase.deployCost })) : loading ? ('Loading...') : error != null ? (error) : ((0, jsx_runtime_1.jsx)(cspr_1.Cspr, { motes: accountBalance, precisionCase: currency_1.PrecisionCase.deployCost })) }))] })) }))] })));
}
exports.AccountInfoRow = AccountInfoRow;
exports.default = AccountInfoRow;
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1pbmZvLXJvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9hY2NvdW50LWluZm8tcm93L2FjY291bnQtaW5mby1yb3cudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsZ0ZBQXVDO0FBQ3ZDLDBEQUF5QjtBQUN6QixvREFBa0Q7QUFDbEQsMERBQXdEO0FBQ3hELGlEQUErQztBQUMvQyxxREFBb0Q7QUFDcEQsOENBQTZDO0FBQzdDLHVEQUF3RDtBQUN4RCxvREFBa0Q7QUFDbEQscUNBQW9DO0FBRXBDLGlEQUFxRDtBQUNyRCxxREFBb0Q7QUFFdkMsUUFBQSxTQUFTLEdBQUcsSUFBQSwyQkFBTSxFQUFDLGtCQUFPLENBQUMsQ0FBQyxVQUFDLEVBQVM7UUFBUCxLQUFLLFdBQUE7SUFBTyxPQUFBLENBQUM7UUFDdkQsTUFBTSxFQUFFLEVBQUU7UUFDVixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJO1FBQ3JDLE9BQU8sRUFBRSxVQUFVO1FBQ25CLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCO1FBQ3pELE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUk7S0FDMUIsQ0FBQztBQU5zRCxDQU10RCxDQUFDLENBQUM7QUFFSixJQUFNLGdCQUFnQixHQUFHLElBQUEsMkJBQU0sRUFBQyx3QkFBVSxDQUFDLENBQ3pDLFVBQUMsRUFBWTtRQUFWLFFBQVEsY0FBQTtJQUFPLE9BQUEsc0JBQ2IsQ0FBQyxRQUFRLElBQUk7UUFDZCxPQUFPLEVBQUUsR0FBRztLQUNiLENBQUMsRUFDRjtBQUpnQixDQUloQixDQUNILENBQUM7QUFFRixJQUFNLFdBQVcsR0FBRyxJQUFBLDJCQUFNLEVBQUMsb0JBQVEsQ0FBQyxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsQ0FBQztJQUM1QyxTQUFTLEVBQUUsT0FBTztDQUNuQixDQUFDLEVBRjJDLENBRTNDLENBQUMsQ0FBQztBQWFKLElBQU0sbUJBQW1CLEdBQUcsMkJBQU0sQ0FBQyxJQUFJLHFHQUFBLDBCQUV0QyxJQUFBLENBQUM7QUFFRixTQUFnQixjQUFjLENBQUMsS0FBMEI7SUFFckQsSUFBQSxTQUFTLEdBT1AsS0FBSyxVQVBFLEVBQ1QsS0FBSyxHQU1ILEtBQUssTUFORixFQUNMLEtBS0UsS0FBSyxXQUxlLEVBQXRCLFVBQVUsbUJBQUcsU0FBUyxLQUFBLEVBQ3RCLFlBQVksR0FJVixLQUFLLGFBSkssRUFDWixjQUFjLEdBR1osS0FBSyxlQUhPLEVBQ2QsT0FBTyxHQUVMLEtBQUssUUFGQSxFQUNQLEtBQUssR0FDSCxLQUFLLE1BREYsQ0FDRztJQUVWLElBQU0sa0JBQWtCLEdBQUcsSUFBQSwyQkFBYSxFQUN0QyxDQUFDLHVCQUFVLENBQUMsSUFBSSxFQUFFLHVCQUFVLENBQUMsS0FBSyxFQUFFLHVCQUFVLENBQUMsS0FBSyxFQUFFLHVCQUFVLENBQUMsS0FBSyxDQUFDLEVBQ3ZFLEVBQUUsQ0FDSCxDQUFDO0lBRUYsSUFBTSxZQUFZLEdBQ2hCLFlBQVk7UUFDWixDQUFDLENBQUMsT0FBTyxJQUFJLGNBQWMsSUFBSSxJQUFJLElBQUksSUFBQSxnQkFBRyxFQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXZFLE9BQU8sQ0FDTCx3QkFBQyxnQkFBZ0IscUJBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsaUJBQ2hELHdCQUFDLGtCQUFPLHFCQUFDLE9BQU8sRUFBQyxlQUFlLGlCQUM5Qix1QkFBQyxvQkFBUSxxQkFBQyxJQUFJLEVBQUUsQ0FBQyxnQkFBRyxLQUFLLElBQVksRUFDckMsdUJBQUMsb0JBQVEscUJBQUMsSUFBSSxFQUFFLENBQUMsZ0JBQUcsVUFBVSxJQUFZLEtBQ2xDLEVBQ1YsdUJBQUMsaUJBQVMscUJBQUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxLQUFLLEVBQUMsUUFBUSxnQkFDOUMsU0FBUyxJQUFJLENBQ1osNkRBQ0Usd0JBQUMsa0JBQU8scUJBQUMsS0FBSyxFQUFDLFFBQVEsaUJBQ3JCLHVCQUFDLGlCQUFPLHFCQUFDLEtBQUssRUFBRSxTQUFTLGdCQUN2Qix1QkFBQyxvQkFBUSxxQkFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsc0JBQ3hCLElBQUEsdUJBQVUsRUFBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsSUFDakMsSUFDSCxFQUNWLHVCQUFDLG1CQUFtQixjQUNsQix1QkFBQyxvQkFBUSxJQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxRQUFDLFNBQVMsRUFBQyxNQUFNLEdBQUcsR0FDcEMsS0FDZCxFQUNWLHVCQUFDLFdBQVcscUJBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxRQUFRLHNCQUMzQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQ2QsdUJBQUMsV0FBSSxJQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLHdCQUFhLENBQUMsVUFBVSxHQUFJLENBQzlELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDWixZQUFZLENBQ2IsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDbEIsS0FBSyxDQUNOLENBQUMsQ0FBQyxDQUFDLENBQ0YsdUJBQUMsV0FBSSxJQUNILEtBQUssRUFBRSxjQUFjLEVBQ3JCLGFBQWEsRUFBRSx3QkFBYSxDQUFDLFVBQVUsR0FDdkMsQ0FDSCxJQUNXLElBQ2IsQ0FDSixJQUNTLEtBQ0ssQ0FDcEIsQ0FBQztBQUNKLENBQUM7QUExREQsd0NBMERDO0FBRUQsa0JBQWUsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IEJpZyBmcm9tICdiaWcuanMnO1xuaW1wb3J0IHsgQm9keVRleHQgfSBmcm9tICcuLi9ib2R5LXRleHQvYm9keS10ZXh0JztcbmltcG9ydCB7IEZsZXhDb2x1bW4gfSBmcm9tICcuLi9mbGV4LWNvbHVtbi9mbGV4LWNvbHVtbic7XG5pbXBvcnQgeyBGbGV4Um93IH0gZnJvbSAnLi4vZmxleC1yb3cvZmxleC1yb3cnO1xuaW1wb3J0IHsgZm9ybWF0SGFzaCB9IGZyb20gJy4uLy4uL3V0aWxzL2Zvcm1hdHRlcnMnO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4uL3Rvb2x0aXAvdG9vbHRpcCc7XG5pbXBvcnQgeyB1c2VNYXRjaE1lZGlhIH0gZnJvbSAnLi4vLi4vdXRpbHMvbWF0Y2gtbWVkaWEnO1xuaW1wb3J0IHsgQ29weUhhc2ggfSBmcm9tICcuLi9jb3B5LWhhc2gvY29weS1oYXNoJztcbmltcG9ydCB7IENzcHIgfSBmcm9tICcuLi9jc3ByL2NzcHInO1xuXG5pbXBvcnQgeyBQcmVjaXNpb25DYXNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY3VycmVuY3knO1xuaW1wb3J0IHsgSGFzaExlbmd0aCB9IGZyb20gJy4uLy4uL3V0aWxzL2Zvcm1hdHRlcnMnO1xuXG5leHBvcnQgY29uc3QgVmFsdWVzUm93ID0gc3R5bGVkKEZsZXhSb3cpKCh7IHRoZW1lIH0pID0+ICh7XG4gIGhlaWdodDogMzYsXG4gIGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmJhc2UsXG4gIHBhZGRpbmc6ICc4cHggMTZweCcsXG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUuc3R5bGVndWlkZUNvbG9ycy5iYWNrZ3JvdW5kUHJpbWFyeSxcbiAgYm9yZGVyOiB0aGVtZS5ib3JkZXIuYmFzZSxcbn0pKTtcblxuY29uc3QgU3R5bGVkRmxleENvbHVtbiA9IHN0eWxlZChGbGV4Q29sdW1uKTx7IGRpc2FibGVkPzogYm9vbGVhbiB9PihcbiAgKHsgZGlzYWJsZWQgfSkgPT4gKHtcbiAgICAuLi4oZGlzYWJsZWQgJiYge1xuICAgICAgb3BhY2l0eTogMC41LFxuICAgIH0pLFxuICB9KVxuKTtcblxuY29uc3QgQmFsYW5jZVRleHQgPSBzdHlsZWQoQm9keVRleHQpKCh7fSkgPT4gKHtcbiAgdGV4dEFsaWduOiAncmlnaHQnLFxufSkpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjY291bnRJbmZvUm93UHJvcHMge1xuICBwdWJsaWNLZXk6IHN0cmluZztcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIHJpZ2h0TGFiZWw/OiBzdHJpbmc7XG4gIGFjY291bnRCYWxhbmNlOiBzdHJpbmcgfCBudWxsO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBlcnJvcjogc3RyaW5nIHwgbnVsbDtcbiAgYWNjb3VudEVtcHR5OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmNvbnN0IFN0eWxlZEljb25Db250YWluZXIgPSBzdHlsZWQuc3BhbmBcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG5gO1xuXG5leHBvcnQgZnVuY3Rpb24gQWNjb3VudEluZm9Sb3cocHJvcHM6IEFjY291bnRJbmZvUm93UHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHB1YmxpY0tleSxcbiAgICBsYWJlbCxcbiAgICByaWdodExhYmVsID0gJ0JhbGFuY2UnLFxuICAgIGFjY291bnRFbXB0eSxcbiAgICBhY2NvdW50QmFsYW5jZSxcbiAgICBsb2FkaW5nLFxuICAgIGVycm9yLFxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgcmVzcG9uc2l2ZUhhc2hTaXplID0gdXNlTWF0Y2hNZWRpYShcbiAgICBbSGFzaExlbmd0aC5USU5ZLCBIYXNoTGVuZ3RoLlNNQUxMLCBIYXNoTGVuZ3RoLlNNQUxMLCBIYXNoTGVuZ3RoLlNNQUxMXSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IGVtcHR5QmFsYW5jZSA9XG4gICAgYWNjb3VudEVtcHR5IHx8XG4gICAgKCFsb2FkaW5nICYmIGFjY291bnRCYWxhbmNlICE9IG51bGwgJiYgQmlnKGFjY291bnRCYWxhbmNlKS5sdGUoJzAnKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRmxleENvbHVtbiBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9IGdhcD17NH0+XG4gICAgICA8RmxleFJvdyBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiPlxuICAgICAgICA8Qm9keVRleHQgc2l6ZT17MX0+e2xhYmVsfTwvQm9keVRleHQ+XG4gICAgICAgIDxCb2R5VGV4dCBzaXplPXsxfT57cmlnaHRMYWJlbH08L0JvZHlUZXh0PlxuICAgICAgPC9GbGV4Um93PlxuICAgICAgPFZhbHVlc1JvdyBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiIGFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgIHtwdWJsaWNLZXkgJiYgKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8RmxleFJvdyBhbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17cHVibGljS2V5fT5cbiAgICAgICAgICAgICAgICA8Qm9keVRleHQgc2l6ZT17M30gbW9ub3R5cGU+XG4gICAgICAgICAgICAgICAgICB7Zm9ybWF0SGFzaChwdWJsaWNLZXksIHJlc3BvbnNpdmVIYXNoU2l6ZSl9XG4gICAgICAgICAgICAgICAgPC9Cb2R5VGV4dD5cbiAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICA8U3R5bGVkSWNvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8Q29weUhhc2ggdmFsdWU9e3B1YmxpY0tleX0gbWluaWZpZWQgdmFyaWF0aW9uPVwiZ3JheVwiIC8+XG4gICAgICAgICAgICAgIDwvU3R5bGVkSWNvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvRmxleFJvdz5cbiAgICAgICAgICAgIDxCYWxhbmNlVGV4dCBzaXplPXszfSBtb25vdHlwZT5cbiAgICAgICAgICAgICAge2VtcHR5QmFsYW5jZSA/IChcbiAgICAgICAgICAgICAgICA8Q3NwciBtb3Rlcz17JzAnfSBwcmVjaXNpb25DYXNlPXtQcmVjaXNpb25DYXNlLmRlcGxveUNvc3R9IC8+XG4gICAgICAgICAgICAgICkgOiBsb2FkaW5nID8gKFxuICAgICAgICAgICAgICAgICdMb2FkaW5nLi4uJ1xuICAgICAgICAgICAgICApIDogZXJyb3IgIT0gbnVsbCA/IChcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxDc3ByXG4gICAgICAgICAgICAgICAgICBtb3Rlcz17YWNjb3VudEJhbGFuY2V9XG4gICAgICAgICAgICAgICAgICBwcmVjaXNpb25DYXNlPXtQcmVjaXNpb25DYXNlLmRlcGxveUNvc3R9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQmFsYW5jZVRleHQ+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L1ZhbHVlc1Jvdz5cbiAgICA8L1N0eWxlZEZsZXhDb2x1bW4+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjY291bnRJbmZvUm93O1xuIl19