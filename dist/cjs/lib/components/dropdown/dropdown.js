"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelectDropdown = exports.Dropdown = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var downshift_1 = tslib_1.__importStar(require("downshift"));
var styled_components_1 = tslib_1.__importDefault(require("styled-components"));
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
var body_text_1 = tslib_1.__importDefault(require("../body-text/body-text"));
var flex_row_1 = tslib_1.__importDefault(require("../flex-row/flex-row"));
var svg_icon_1 = tslib_1.__importDefault(require("../svg-icon/svg-icon"));
var flex_column_1 = tslib_1.__importDefault(require("../flex-column/flex-column"));
var input_interaction_type_1 = require("../../utils/input-interaction-type");
var ic_arrow_up_svg_1 = tslib_1.__importDefault(require("../../assets/icons/ic-arrow-up.svg"));
var ic_arrow_down_svg_1 = tslib_1.__importDefault(require("../../assets/icons/ic-arrow-down.svg"));
var ic_checkmark_svg_1 = tslib_1.__importDefault(require("../../assets/icons/ic-checkmark.svg"));
var ic_delete_svg_1 = tslib_1.__importDefault(require("../../assets/icons/ic-delete.svg"));
var StyledDropdown = styled_components_1.default.div(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, isFixedDropdown = _a.isFixedDropdown;
    return (tslib_1.__assign({ outline: 'none', position: isFixedDropdown ? 'relative' : 'unset' }, (disabled && {
        opacity: '0.5',
        pointerEvents: 'none',
    })));
});
var Container = (0, styled_components_1.default)(flex_row_1.default)(function (_a) {
    var theme = _a.theme, isOpen = _a.isOpen;
    return ({
        borderRadius: theme.borderRadius.base,
        border: 'none',
        height: 36,
        padding: '0 16px',
        background: theme.styleguideColors.fillSecondary,
        ':hover, :active': {
            background: theme.styleguideColors.fillSecondary,
            svg: {
                color: theme.styleguideColors.fillPrimaryRed,
            },
        },
    });
});
var ItemsContainer = styled_components_1.default.div(function (_a) {
    var theme = _a.theme, isOpen = _a.isOpen, isFixedDropdown = _a.isFixedDropdown;
    return (tslib_1.__assign({ display: isOpen ? 'inherit' : 'none', marginTop: 4, borderRadius: theme.borderRadius.base, background: theme.styleguideColors.fillSecondary }, (isFixedDropdown && {
        position: 'absolute',
        top: '60px',
        width: '100%',
        zIndex: 1,
    })));
});
var ItemContainer = (0, styled_components_1.default)(flex_row_1.default)(function (_a) {
    var theme = _a.theme, isHighlighted = _a.isHighlighted;
    return (tslib_1.__assign({ cursor: 'pointer', minHeight: 36, padding: '8px 16px', ':hover, :active': {
            background: theme.styleguideColors.fillSecondaryBlueHover,
            fontWeight: 600,
        } }, (isHighlighted && {
        '&:not(:hover)': {
            border: "1px solid ".concat(theme.styleguideColors.contentBlue),
            borderRadius: theme.borderRadius.base,
        },
    })));
});
var DeleteSvgIcon = (0, styled_components_1.default)(svg_icon_1.default)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentSecondary,
        },
        ':hover, :active': {
            path: {
                stroke: theme.styleguideColors.fillPrimaryRed,
            },
        },
    });
});
var ClearSvgIcon = (0, styled_components_1.default)(svg_icon_1.default)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentPrimary,
        },
    });
});
var MultiSelectContainer = (0, styled_components_1.default)(flex_row_1.default)(function (_a) {
    var theme = _a.theme;
    return ({
        borderRadius: theme.borderRadius.base,
        padding: '8px',
        background: theme.styleguideColors.fillSecondary,
        ':hover, :active': {
            svg: {
                color: theme.styleguideColors.fillPrimaryRed,
            },
        },
    });
});
var PlaceholderWrapper = styled_components_1.default.span(function (_a) {
    var theme = _a.theme;
    return ({
        padding: '0 8px',
    });
});
var ChipItemContainer = styled_components_1.default.span(function (_a) {
    var theme = _a.theme;
    return ({
        borderRadius: theme.borderRadius.base,
        cursor: 'pointer',
        padding: '2px 8px',
        background: theme.styleguideColors.fillTertriary,
        color: theme.styleguideColors.contentPrimary,
    });
});
var OverflowWrapper = styled_components_1.default.span(function (_a) {
    var theme = _a.theme;
    return ({
        overflow: 'hidden',
        whiteSpace: 'nowrap',
        textOverflow: 'ellipsis',
    });
});
var DropdownIconWrapper = (0, styled_components_1.default)(flex_row_1.default)(function (_a) {
    var theme = _a.theme;
    return ({
        paddingRight: '8px',
        marginLeft: '8px',
    });
});
var CheckIcon = (0, styled_components_1.default)(svg_icon_1.default)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            fill: theme.styleguideColors.contentBlue,
        },
    });
});
var MultiSelectDeleteIcon = (0, styled_components_1.default)(svg_icon_1.default)(function (_a) {
    var theme = _a.theme;
    return ({
        path: {
            stroke: theme.styleguideColors.contentBlue,
        },
        ':hover, :active': {
            path: {
                stroke: theme.styleguideColors.contentRed,
            },
        },
    });
});
var getChangeEvent = function (value) {
    return {
        target: {
            name: undefined,
            value: value,
        },
    };
};
function Dropdown(props) {
    var id = props.id, items = props.items, placeholder = props.placeholder, label = props.label, areItemsRemovable = props.areItemsRemovable, value = props.value, style = props.style, onSelect = props.onSelect, onRemove = props.onRemove, _a = props.noItemsMessage, noItemsMessage = _a === void 0 ? 'No Options!' : _a, _b = props.isFixedDropdown, isFixedDropdown = _b === void 0 ? false : _b;
    var getChangeEvent = function (value) {
        return {
            target: {
                name: undefined,
                value: value,
            },
        };
    };
    var handleRemoveItem = function (item, ev, downshift) {
        ev.preventDefault();
        ev.stopPropagation();
        var value = item && itemValueGetter(item);
        onRemove && onRemove(getChangeEvent(value));
    };
    var itemValueGetter = function (item) { return item.value; };
    var itemNameGetter = function (item) { return item.label; };
    var handleItemSelect = function (item) {
        onSelect && onSelect(item);
    };
    var getItemToString = function (item) {
        if (item === null)
            return '';
        return typeof item === 'string' ? item : item.label;
    };
    var inputInteractionTypeRef = (0, input_interaction_type_1.useGetInputInteractionType)();
    return ((0, jsx_runtime_1.jsx)(downshift_1.default, tslib_1.__assign({ itemToString: getItemToString, onSelect: handleItemSelect, selectedItem: value, selectedItemChanged: function (prevItem, item) { return !(0, fast_deep_equal_1.default)(prevItem, item); } }, { children: function (downshift) {
            var getItemProps = downshift.getItemProps, getMenuProps = downshift.getMenuProps, isOpen = downshift.isOpen, selectedItem = downshift.selectedItem, getRootProps = downshift.getRootProps, getToggleButtonProps = downshift.getToggleButtonProps, highlightedIndex = downshift.highlightedIndex;
            var noItems = !(items && items.length);
            var handleFocus = function (ev) {
                !isOpen && downshift.openMenu();
            };
            return ((0, jsx_runtime_1.jsxs)(StyledDropdown, tslib_1.__assign({}, getRootProps({ refKey: 'innerRef' }), { style: style, isFixedDropdown: isFixedDropdown }, { children: [label && ((0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ lineHeight: 'xs', size: 1, "aria-label": label, id: id, tabIndex: 0 }, { children: label }))), (0, jsx_runtime_1.jsxs)(Container, tslib_1.__assign({ align: "center", justify: "space-between" }, getToggleButtonProps(), { isOpen: isOpen, itemsSpacing: 10, tabIndex: 0 }, { children: [(0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ size: 3, lineHeight: 'xs', variation: selectedItem ? 'inherit' : 'darkGray', style: {
                                    overflow: 'hidden',
                                    whiteSpace: 'nowrap',
                                    textOverflow: 'ellipsis',
                                } }, { children: itemNameGetter(selectedItem) || placeholder })), (0, jsx_runtime_1.jsx)(svg_icon_1.default, { src: isOpen ? ic_arrow_up_svg_1.default : ic_arrow_down_svg_1.default, rotate: isOpen, onKeyDown: function (ev) {
                                    if (ev.key === 'Enter') {
                                        handleFocus(ev);
                                    }
                                }, tabIndex: 0, alt: 'Arrow icon', role: 'img', "aria-labelledby": id, "aria-haspopup": "listbox", "aria-expanded": isOpen })] })), (0, jsx_runtime_1.jsx)(ItemsContainer, tslib_1.__assign({}, getMenuProps(), { isOpen: isOpen, isFixedDropdown: isFixedDropdown, "aria-labelledby": id }, { children: isOpen &&
                            (noItems ? ((0, jsx_runtime_1.jsx)("div", tslib_1.__assign({ style: { padding: '8px 16px', pointerEvents: 'none' } }, { children: (0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ size: 3, scale: 'xs', lineHeight: 'xs', variation: "darkGray" }, { children: noItemsMessage })) }))) : (items.map(function (item, idx) {
                                var isSelected = (0, fast_deep_equal_1.default)(item, selectedItem);
                                var isHighlighted = inputInteractionTypeRef.current === input_interaction_type_1.InputInteractionType.keyboard &&
                                    highlightedIndex !== null &&
                                    highlightedIndex === idx;
                                return ((0, jsx_runtime_1.jsxs)(ItemContainer, tslib_1.__assign({ align: "center", justify: "space-between", itemsSpacing: 10 }, getItemProps({ item: item, index: idx }), { isHighlighted: isHighlighted }, { children: [(0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ size: isSelected ? 1 : 3, style: {
                                                overflow: 'hidden',
                                                whiteSpace: 'nowrap',
                                                textOverflow: 'ellipsis',
                                            }, scale: 'xs', lineHeight: 'xs' }, { children: itemNameGetter(item) })), areItemsRemovable && ((0, jsx_runtime_1.jsx)(DeleteSvgIcon, { src: ic_delete_svg_1.default, onClick: function (ev) {
                                                return handleRemoveItem(item, ev, downshift);
                                            } }))] }), "".concat(item, "-").concat(idx)));
                            }))) }))] })));
        } })));
}
exports.Dropdown = Dropdown;
function MultiSelectDropdown(props) {
    var id = props.id, items = props.items, value = props.value, label = props.label, placeholder = props.placeholder, disabled = props.disabled, onSelect = props.onSelect, onChange = props.onChange, onRemove = props.onRemove, onClearAllItems = props.onClearAllItems, _a = props.isFixedDropdown, isFixedDropdown = _a === void 0 ? false : _a;
    var _b = (0, downshift_1.useMultipleSelection)({
        initialSelectedItems: value,
        onSelectedItemsChange: function (changes) {
            onSelect && onSelect(getChangeEvent(changes.selectedItems));
        },
    }), getSelectedItemProps = _b.getSelectedItemProps, getDropdownProps = _b.getDropdownProps, addSelectedItem = _b.addSelectedItem, removeSelectedItem = _b.removeSelectedItem, selectedItems = _b.selectedItems, setSelectedItems = _b.setSelectedItems, reset = _b.reset;
    var _c = (0, downshift_1.useSelect)({
        selectedItem: null,
        defaultHighlightedIndex: 0,
        items: items,
        stateReducer: function (state, actionAndChanges) {
            var changes = actionAndChanges.changes, type = actionAndChanges.type;
            switch (type) {
                case downshift_1.useSelect.stateChangeTypes.ToggleButtonKeyDownEnter:
                case downshift_1.useSelect.stateChangeTypes.ToggleButtonKeyDownSpaceButton:
                case downshift_1.useSelect.stateChangeTypes.ItemClick:
                    return tslib_1.__assign(tslib_1.__assign({}, changes), { isOpen: true });
                default:
                    return changes;
            }
        },
        onStateChange: function (_a) {
            var type = _a.type, newSelectedItem = _a.selectedItem;
            switch (type) {
                case downshift_1.useSelect.stateChangeTypes.ToggleButtonKeyDownEnter:
                case downshift_1.useSelect.stateChangeTypes.ToggleButtonKeyDownSpaceButton:
                case downshift_1.useSelect.stateChangeTypes.ItemClick:
                    {
                        var isAlreadySelected = selectedItems.some(function (i) { return i.value === (newSelectedItem === null || newSelectedItem === void 0 ? void 0 : newSelectedItem.value); });
                        if (newSelectedItem) {
                            if (isAlreadySelected) {
                                setSelectedItems(selectedItems.filter(function (i) { return i.value !== newSelectedItem.value; }));
                                onRemove && onRemove(getChangeEvent(newSelectedItem));
                            }
                            else {
                                addSelectedItem(newSelectedItem);
                                onChange && onChange(getChangeEvent(newSelectedItem));
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
        },
    }), isOpen = _c.isOpen, selectedItem = _c.selectedItem, getToggleButtonProps = _c.getToggleButtonProps, getLabelProps = _c.getLabelProps, getMenuProps = _c.getMenuProps, getItemProps = _c.getItemProps, openMenu = _c.openMenu, highlightedIndex = _c.highlightedIndex;
    //Align resetting selected values if they were reset in parent
    (0, react_1.useEffect)(function () {
        if (!value || value.length < 1) {
            reset();
        }
    }, [value]);
    var handleClearAll = function () {
        onClearAllItems && onClearAllItems(getChangeEvent(null));
        reset();
    };
    var handleFocus = function (ev) {
        ev.stopPropagation();
        if (disabled) {
            return;
        }
        !isOpen && openMenu();
    };
    var inputInteractionTypeRef = (0, input_interaction_type_1.useGetInputInteractionType)();
    return ((0, jsx_runtime_1.jsx)(StyledDropdown, tslib_1.__assign({ disabled: disabled, isFixedDropdown: isFixedDropdown }, { children: (0, jsx_runtime_1.jsxs)(flex_column_1.default, tslib_1.__assign({ itemsSpacing: 4 }, { children: [label && ((0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ lineHeight: 'xs' }, getLabelProps(), { size: 1, id: id }, { children: label }))), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)(MultiSelectContainer, tslib_1.__assign({ align: "center", justify: "space-between" }, getToggleButtonProps(tslib_1.__assign(tslib_1.__assign({}, getDropdownProps({ preventKeyAction: isOpen })), { onClick: function (e) { return e.stopPropagation(); }, isOpen: isOpen })), { children: [(0, jsx_runtime_1.jsx)("span", { children: (0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ lineHeight: 'xs', size: 3, variation: selectedItem ? 'inherit' : 'darkGray' }, { children: (0, jsx_runtime_1.jsx)(OverflowWrapper, { children: (0, jsx_runtime_1.jsx)(flex_row_1.default, tslib_1.__assign({ gap: 8, wrap: 'wrap' }, { children: selectedItems.length === 0 ? ((0, jsx_runtime_1.jsx)(PlaceholderWrapper, { children: placeholder })) : (selectedItems.map(function (selectedItem, index) { return ((0, jsx_runtime_1.jsx)(ChipItemContainer, tslib_1.__assign({}, getSelectedItemProps({ selectedItem: selectedItem, index: index }), { children: (0, jsx_runtime_1.jsxs)(flex_row_1.default, tslib_1.__assign({ align: 'center', gap: 4 }, { children: [(selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.chipName) && ((0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ lineHeight: 'xs', size: 1, variation: 'black' }, { children: selectedItem.chipName }))), (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.chipLabel) || (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.label), (0, jsx_runtime_1.jsx)(MultiSelectDeleteIcon, { onClick: function (event) {
                                                                    event.preventDefault();
                                                                    event.stopPropagation();
                                                                    removeSelectedItem(selectedItem);
                                                                    onRemove &&
                                                                        onRemove(getChangeEvent(selectedItem));
                                                                }, size: 14, src: "assets/icons/ic-cross.svg", alt: 'Cross icon to clear', role: 'img' })] })) }), "selected-item-".concat(index))); })) })) }) })) }), (0, jsx_runtime_1.jsxs)(DropdownIconWrapper, { children: [onClearAllItems && !!selectedItems.length && ((0, jsx_runtime_1.jsx)(ClearSvgIcon, { src: ic_delete_svg_1.default, onClick: handleClearAll, marginRight: true, role: 'img', alt: 'Cross icon to clear items' })), (0, jsx_runtime_1.jsx)(svg_icon_1.default, { size: 16, src: isOpen ? ic_arrow_up_svg_1.default : ic_arrow_down_svg_1.default, rotate: isOpen, onKeyDown: function (ev) {
                                                if (ev.key === 'Enter') {
                                                    handleFocus(ev);
                                                }
                                            }, tabIndex: 0, alt: 'Arrow icon', "aria-labelledby": id, "aria-haspopup": "listbox", "aria-expanded": isOpen, role: 'button' })] })] })), (0, jsx_runtime_1.jsx)(ItemsContainer, tslib_1.__assign({}, getMenuProps(), { isOpen: isOpen, isFixedDropdown: isFixedDropdown }, { children: isOpen &&
                                items.map(function (item, index) {
                                    var isSelected = selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.some(function (i) { return i.value === item.value; });
                                    var isHighlighted = inputInteractionTypeRef.current === input_interaction_type_1.InputInteractionType.keyboard &&
                                        highlightedIndex !== null &&
                                        highlightedIndex === index;
                                    return ((0, jsx_runtime_1.jsxs)(ItemContainer, tslib_1.__assign({ align: "center", justify: "space-between", itemsSpacing: 10 }, getItemProps({ item: item, index: index }), { isHighlighted: isHighlighted }, { children: [(0, jsx_runtime_1.jsx)(body_text_1.default, tslib_1.__assign({ size: isSelected ? 1 : 3, lineHeight: 'xs', scale: 'xs' }, { children: item.label })), isSelected && (0, jsx_runtime_1.jsx)(CheckIcon, { size: 14, src: ic_checkmark_svg_1.default })] }), "".concat(item.value).concat(index)));
                                }) }))] })] })) })));
}
exports.MultiSelectDropdown = MultiSelectDropdown;
exports.default = Dropdown;
//# sourceMappingURL=data:application/json;base64,